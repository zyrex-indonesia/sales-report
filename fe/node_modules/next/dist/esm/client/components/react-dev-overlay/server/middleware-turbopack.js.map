{"version":3,"sources":["../../../../../src/client/components/react-dev-overlay/server/middleware-turbopack.ts"],"sourcesContent":["import type { IncomingMessage, ServerResponse } from 'http'\nimport {\n  badRequest,\n  findSourcePackage,\n  getOriginalCodeFrame,\n  internalServerError,\n  json,\n  jsonString,\n  noContent,\n  type OriginalStackFrameResponse,\n} from './shared'\n\nimport fs, { constants as FS } from 'fs/promises'\nimport path from 'path'\nimport { launchEditor } from '../internal/helpers/launchEditor'\nimport type { StackFrame } from 'next/dist/compiled/stacktrace-parser'\nimport type { Project, TurbopackStackFrame } from '../../../../build/swc/types'\nimport { getSourceMapFromFile } from '../internal/helpers/get-source-map-from-file'\n\nconst currentSourcesByFile: Map<string, Promise<string | null>> = new Map()\nexport async function batchedTraceSource(\n  project: Project,\n  frame: TurbopackStackFrame\n): Promise<{ frame: StackFrame; source: string | null } | undefined> {\n  const file = frame.file ? decodeURIComponent(frame.file) : undefined\n  if (!file) return\n\n  const sourceFrame = await project.traceSource(frame)\n  if (!sourceFrame) return\n\n  let source = null\n  // Don't look up source for node_modules or internals. These can often be large bundled files.\n  if (\n    sourceFrame.file &&\n    !(sourceFrame.file.includes('node_modules') || sourceFrame.isInternal)\n  ) {\n    let sourcePromise = currentSourcesByFile.get(sourceFrame.file)\n    if (!sourcePromise) {\n      sourcePromise = project.getSourceForAsset(sourceFrame.file)\n      currentSourcesByFile.set(sourceFrame.file, sourcePromise)\n      setTimeout(() => {\n        // Cache file reads for 100ms, as frames will often reference the same\n        // files and can be large.\n        currentSourcesByFile.delete(sourceFrame.file!)\n      }, 100)\n    }\n\n    source = await sourcePromise\n  }\n\n  return {\n    frame: {\n      file: sourceFrame.file,\n      lineNumber: sourceFrame.line ?? 0,\n      column: sourceFrame.column ?? 0,\n      methodName: sourceFrame.methodName ?? frame.methodName ?? '<unknown>',\n      arguments: [],\n    },\n    source,\n  }\n}\n\nfunction createStackFrame(searchParams: URLSearchParams) {\n  const fileParam = searchParams.get('file')\n\n  if (!fileParam) {\n    return undefined\n  }\n\n  // rsc://React/Server/file://<filename>?42 => file://<filename>\n  const file = fileParam\n    .replace(/^rsc:\\/\\/React\\/[^/]+\\//, '')\n    .replace(/\\?\\d+$/, '')\n\n  return {\n    file,\n    methodName: searchParams.get('methodName') ?? '<unknown>',\n    line: parseInt(searchParams.get('lineNumber') ?? '0', 10) || 0,\n    column: parseInt(searchParams.get('column') ?? '0', 10) || 0,\n    isServer: searchParams.get('isServer') === 'true',\n  } satisfies TurbopackStackFrame\n}\n\nexport async function createOriginalStackFrame(\n  project: Project,\n  frame: TurbopackStackFrame\n): Promise<OriginalStackFrameResponse | null> {\n  const traced = await batchedTraceSource(project, frame)\n  if (!traced) {\n    const sourcePackage = findSourcePackage(frame)\n    if (sourcePackage) return { sourcePackage }\n    return null\n  }\n\n  return {\n    originalStackFrame: traced.frame,\n    originalCodeFrame: getOriginalCodeFrame(traced.frame, traced.source),\n    sourcePackage: findSourcePackage(traced.frame),\n  }\n}\n\nexport function getOverlayMiddleware(project: Project) {\n  return async function (\n    req: IncomingMessage,\n    res: ServerResponse,\n    next: () => void\n  ): Promise<void> {\n    const { pathname, searchParams } = new URL(req.url!, 'http://n')\n\n    if (pathname === '/__nextjs_original-stack-frame') {\n      const frame = createStackFrame(searchParams)\n\n      if (!frame) return badRequest(res)\n\n      let originalStackFrame: OriginalStackFrameResponse | null\n      try {\n        originalStackFrame = await createOriginalStackFrame(project, frame)\n      } catch (e: any) {\n        return internalServerError(res, e.message)\n      }\n\n      if (!originalStackFrame) {\n        res.statusCode = 404\n        res.end('Unable to resolve sourcemap')\n        return\n      }\n\n      return json(res, originalStackFrame)\n    } else if (pathname === '/__nextjs_launch-editor') {\n      const frame = createStackFrame(searchParams)\n\n      if (!frame) return badRequest(res)\n\n      const fileExists = await fs.access(frame.file, FS.F_OK).then(\n        () => true,\n        () => false\n      )\n      if (!fileExists) return noContent(res)\n\n      try {\n        launchEditor(frame.file, frame.line ?? 1, frame.column ?? 1)\n      } catch (err) {\n        console.log('Failed to launch editor:', err)\n        return internalServerError(res)\n      }\n\n      noContent(res)\n    }\n\n    return next()\n  }\n}\n\nexport function getSourceMapMiddleware(project: Project, distDir: string) {\n  return async function (\n    req: IncomingMessage,\n    res: ServerResponse,\n    next: () => void\n  ): Promise<void> {\n    const { pathname, searchParams } = new URL(req.url!, 'http://n')\n\n    if (pathname !== '/__nextjs_source-map') {\n      return next()\n    }\n\n    let filename = searchParams.get('filename')\n\n    if (!filename) {\n      return badRequest(res)\n    }\n\n    try {\n      if (filename.startsWith('/_next/static')) {\n        filename = path.join(\n          distDir,\n          // /_next/static/chunks/%5Bproject%5D... => static/chunks/[project]...\n          decodeURIComponent(filename.replace(/^\\/_next\\//, ''))\n        )\n      }\n\n      const sourceMapString = await project.getSourceMap(filename)\n\n      if (sourceMapString) {\n        return jsonString(res, sourceMapString)\n      }\n\n      if (filename.startsWith('file:') || filename.startsWith(path.sep)) {\n        const sourceMap = await getSourceMapFromFile(filename)\n\n        if (sourceMap) {\n          return json(res, sourceMap)\n        }\n      }\n    } catch (error) {\n      console.error('Failed to get source map:', error)\n    }\n\n    noContent(res)\n  }\n}\n"],"names":["badRequest","findSourcePackage","getOriginalCodeFrame","internalServerError","json","jsonString","noContent","fs","constants","FS","path","launchEditor","getSourceMapFromFile","currentSourcesByFile","Map","batchedTraceSource","project","frame","file","decodeURIComponent","undefined","sourceFrame","traceSource","source","includes","isInternal","sourcePromise","get","getSourceForAsset","set","setTimeout","delete","lineNumber","line","column","methodName","arguments","createStackFrame","searchParams","fileParam","replace","parseInt","isServer","createOriginalStackFrame","traced","sourcePackage","originalStackFrame","originalCodeFrame","getOverlayMiddleware","req","res","next","pathname","URL","url","e","message","statusCode","end","fileExists","access","F_OK","then","err","console","log","getSourceMapMiddleware","distDir","filename","startsWith","join","sourceMapString","getSourceMap","sep","sourceMap","error"],"mappings":"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"}