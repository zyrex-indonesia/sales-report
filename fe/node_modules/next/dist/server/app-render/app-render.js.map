{"version":3,"sources":["../../../src/server/app-render/app-render.tsx"],"sourcesContent":["import type {\n  ActionResult,\n  DynamicParamTypesShort,\n  FlightRouterState,\n  FlightSegmentPath,\n  RenderOpts,\n  Segment,\n  CacheNodeSeedData,\n  PreloadCallbacks,\n  RSCPayload,\n  FlightData,\n  InitialRSCPayload,\n} from './types'\nimport type { WorkStore } from '../app-render/work-async-storage.external'\nimport type { RequestStore } from '../app-render/work-unit-async-storage.external'\nimport type { NextParsedUrlQuery } from '../request-meta'\nimport type { LoaderTree } from '../lib/app-dir-module'\nimport type { AppPageModule } from '../route-modules/app-page/module'\nimport type { ClientReferenceManifest } from '../../build/webpack/plugins/flight-manifest-plugin'\nimport type { DeepReadonly } from '../../shared/lib/deep-readonly'\nimport type { BaseNextRequest, BaseNextResponse } from '../base-http'\nimport type { IncomingHttpHeaders } from 'http'\n\nimport React, { type ErrorInfo, type JSX } from 'react'\n\nimport RenderResult, {\n  type AppPageRenderResultMetadata,\n  type RenderResultOptions,\n} from '../render-result'\nimport {\n  chainStreams,\n  renderToInitialFizzStream,\n  createDocumentClosingStream,\n  continueFizzStream,\n  continueDynamicPrerender,\n  continueStaticPrerender,\n  continueDynamicHTMLResume,\n  streamToBuffer,\n  streamToString,\n} from '../stream-utils/node-web-streams-helper'\nimport { stripInternalQueries } from '../internal-utils'\nimport {\n  NEXT_HMR_REFRESH_HEADER,\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_ROUTER_STALE_TIME_HEADER,\n  NEXT_URL,\n  RSC_HEADER,\n} from '../../client/components/app-router-headers'\nimport {\n  createTrackedMetadataContext,\n  createMetadataContext,\n} from '../../lib/metadata/metadata-context'\nimport { createRequestStoreForRender } from '../async-storage/request-store'\nimport { withWorkStore } from '../async-storage/with-work-store'\nimport { isNotFoundError } from '../../client/components/not-found'\nimport {\n  getURLFromRedirectError,\n  isRedirectError,\n  getRedirectStatusCodeFromError,\n} from '../../client/components/redirect'\nimport { getImplicitTags } from '../lib/implicit-tags'\nimport { AppRenderSpan, NextNodeServerSpan } from '../lib/trace/constants'\nimport { getTracer } from '../lib/trace/tracer'\nimport { FlightRenderResult } from './flight-render-result'\nimport {\n  createFlightReactServerErrorHandler,\n  createHTMLReactServerErrorHandler,\n  createHTMLErrorHandler,\n  type DigestedError,\n  isUserLandError,\n} from './create-error-handler'\nimport {\n  getShortDynamicParamType,\n  dynamicParamTypes,\n} from './get-short-dynamic-param-type'\nimport { getSegmentParam } from './get-segment-param'\nimport { getScriptNonceFromHeader } from './get-script-nonce-from-header'\nimport { parseAndValidateFlightRouterState } from './parse-and-validate-flight-router-state'\nimport { createFlightRouterStateFromLoaderTree } from './create-flight-router-state-from-loader-tree'\nimport { handleAction } from './action-handler'\nimport { isBailoutToCSRError } from '../../shared/lib/lazy-dynamic/bailout-to-csr'\nimport { warn, error } from '../../build/output/log'\nimport { appendMutableCookies } from '../web/spec-extension/adapters/request-cookies'\nimport { createServerInsertedHTML } from './server-inserted-html'\nimport { getRequiredScripts } from './required-scripts'\nimport { addPathPrefix } from '../../shared/lib/router/utils/add-path-prefix'\nimport { makeGetServerInsertedHTML } from './make-get-server-inserted-html'\nimport { walkTreeWithFlightRouterState } from './walk-tree-with-flight-router-state'\nimport { createComponentTree } from './create-component-tree'\nimport { getAssetQueryString } from './get-asset-query-string'\nimport { setReferenceManifestsSingleton } from './encryption-utils'\nimport {\n  DynamicState,\n  type PostponedState,\n  parsePostponedState,\n} from './postponed-state'\nimport {\n  getDynamicDataPostponedState,\n  getDynamicHTMLPostponedState,\n  getPostponedFromState,\n} from './postponed-state'\nimport { isDynamicServerError } from '../../client/components/hooks-server-context'\nimport {\n  useFlightStream,\n  createInlinedDataReadableStream,\n} from './use-flight-response'\nimport {\n  StaticGenBailoutError,\n  isStaticGenBailoutError,\n} from '../../client/components/static-generation-bailout'\nimport { getStackWithoutErrorMessage } from '../../lib/format-server-error'\nimport {\n  accessedDynamicData,\n  createPostponedAbortSignal,\n  formatDynamicAPIAccesses,\n  isPrerenderInterruptedError,\n  createDynamicTrackingState,\n  createDynamicValidationState,\n  getFirstDynamicReason,\n  trackAllowedDynamicAccess,\n  throwIfDisallowedDynamic,\n  consumeDynamicAccess,\n  type DynamicAccess,\n} from './dynamic-rendering'\nimport {\n  getClientComponentLoaderMetrics,\n  wrapClientComponentLoader,\n} from '../client-component-renderer-logger'\nimport { createServerModuleMap } from './action-utils'\nimport { isNodeNextRequest } from '../base-http/helpers'\nimport { parseParameter } from '../../shared/lib/router/utils/route-regex'\nimport { parseRelativeUrl } from '../../shared/lib/router/utils/parse-relative-url'\nimport AppRouter from '../../client/components/app-router'\nimport type { ServerComponentsHmrCache } from '../response-cache'\nimport type { RequestErrorContext } from '../instrumentation/types'\nimport { getServerActionRequestMetadata } from '../lib/server-action-request-meta'\nimport { createInitialRouterState } from '../../client/components/router-reducer/create-initial-router-state'\nimport { createMutableActionQueue } from '../../shared/lib/router/action-queue'\nimport { getRevalidateReason } from '../instrumentation/utils'\nimport { PAGE_SEGMENT_KEY } from '../../shared/lib/segment'\nimport type { FallbackRouteParams } from '../request/fallback-params'\nimport { DynamicServerError } from '../../client/components/hooks-server-context'\nimport {\n  type ReactServerPrerenderResolveToType,\n  type ReactServerPrerenderResult,\n  ReactServerResult,\n  createReactServerPrerenderResult,\n  createReactServerPrerenderResultFromRender,\n  prerenderAndAbortInSequentialTasks,\n} from './app-render-prerender-utils'\nimport { printDebugThrownValueForProspectiveRender } from './prospective-render-utils'\nimport { scheduleInSequentialTasks } from './app-render-render-utils'\nimport { waitAtLeastOneReactRenderTask } from '../../lib/scheduler'\nimport {\n  workUnitAsyncStorage,\n  type PrerenderStore,\n} from './work-unit-async-storage.external'\nimport { CacheSignal } from './cache-signal'\nimport { getTracedMetadata } from '../lib/trace/utils'\nimport { InvariantError } from '../../shared/lib/invariant-error'\n\nimport './clean-async-snapshot.external'\nimport { INFINITE_CACHE } from '../../lib/constants'\n\nexport type GetDynamicParamFromSegment = (\n  // [slug] / [[slug]] / [...slug]\n  segment: string\n) => {\n  param: string\n  value: string | string[] | null\n  treeSegment: Segment\n  type: DynamicParamTypesShort\n} | null\n\nexport type GenerateFlight = typeof generateDynamicFlightRenderResult\n\nexport type AppRenderContext = {\n  workStore: WorkStore\n  requestStore: RequestStore\n  componentMod: AppPageModule\n  renderOpts: RenderOpts\n  parsedRequestHeaders: ParsedRequestHeaders\n  getDynamicParamFromSegment: GetDynamicParamFromSegment\n  query: NextParsedUrlQuery\n  isPrefetch: boolean\n  isAction: boolean\n  requestTimestamp: number\n  appUsingSizeAdjustment: boolean\n  flightRouterState?: FlightRouterState\n  requestId: string\n  pagePath: string\n  clientReferenceManifest: DeepReadonly<ClientReferenceManifest>\n  assetPrefix: string\n  isNotFoundPath: boolean\n  nonce: string | undefined\n  res: BaseNextResponse\n}\n\ninterface ParseRequestHeadersOptions {\n  readonly isDevWarmup: undefined | boolean\n  readonly isRoutePPREnabled: boolean\n}\n\nconst flightDataPathHeadKey = 'h'\n\ninterface ParsedRequestHeaders {\n  /**\n   * Router state provided from the client-side router. Used to handle rendering\n   * from the common layout down. This value will be undefined if the request is\n   * not a client-side navigation request, or if the request is a prefetch\n   * request.\n   */\n  readonly flightRouterState: FlightRouterState | undefined\n  readonly isPrefetchRequest: boolean\n  readonly isDevWarmupRequest: boolean\n  readonly isHmrRefresh: boolean\n  readonly isRSCRequest: boolean\n  readonly nonce: string | undefined\n}\n\nfunction parseRequestHeaders(\n  headers: IncomingHttpHeaders,\n  options: ParseRequestHeadersOptions\n): ParsedRequestHeaders {\n  const isDevWarmupRequest = options.isDevWarmup === true\n\n  // dev warmup requests are treated as prefetch RSC requests\n  const isPrefetchRequest =\n    isDevWarmupRequest ||\n    headers[NEXT_ROUTER_PREFETCH_HEADER.toLowerCase()] !== undefined\n\n  const isHmrRefresh =\n    headers[NEXT_HMR_REFRESH_HEADER.toLowerCase()] !== undefined\n\n  // dev warmup requests are treated as prefetch RSC requests\n  const isRSCRequest =\n    isDevWarmupRequest || headers[RSC_HEADER.toLowerCase()] !== undefined\n\n  const shouldProvideFlightRouterState =\n    isRSCRequest && (!isPrefetchRequest || !options.isRoutePPREnabled)\n\n  const flightRouterState = shouldProvideFlightRouterState\n    ? parseAndValidateFlightRouterState(\n        headers[NEXT_ROUTER_STATE_TREE_HEADER.toLowerCase()]\n      )\n    : undefined\n\n  const csp =\n    headers['content-security-policy'] ||\n    headers['content-security-policy-report-only']\n\n  const nonce =\n    typeof csp === 'string' ? getScriptNonceFromHeader(csp) : undefined\n\n  return {\n    flightRouterState,\n    isPrefetchRequest,\n    isHmrRefresh,\n    isRSCRequest,\n    isDevWarmupRequest,\n    nonce,\n  }\n}\n\nfunction createNotFoundLoaderTree(loaderTree: LoaderTree): LoaderTree {\n  // Align the segment with parallel-route-default in next-app-loader\n  const components = loaderTree[2]\n  return [\n    '',\n    {\n      children: [\n        PAGE_SEGMENT_KEY,\n        {},\n        {\n          page: components['not-found'],\n        },\n      ],\n    },\n    components,\n  ]\n}\n\nexport type CreateSegmentPath = (child: FlightSegmentPath) => FlightSegmentPath\n\n/**\n * Returns a function that parses the dynamic segment and return the associated value.\n */\nfunction makeGetDynamicParamFromSegment(\n  params: { [key: string]: any },\n  pagePath: string,\n  fallbackRouteParams: FallbackRouteParams | null\n): GetDynamicParamFromSegment {\n  return function getDynamicParamFromSegment(\n    // [slug] / [[slug]] / [...slug]\n    segment: string\n  ) {\n    const segmentParam = getSegmentParam(segment)\n    if (!segmentParam) {\n      return null\n    }\n\n    const key = segmentParam.param\n\n    let value = params[key]\n\n    if (fallbackRouteParams && fallbackRouteParams.has(segmentParam.param)) {\n      value = fallbackRouteParams.get(segmentParam.param)\n    } else if (Array.isArray(value)) {\n      value = value.map((i) => encodeURIComponent(i))\n    } else if (typeof value === 'string') {\n      value = encodeURIComponent(value)\n    }\n\n    if (!value) {\n      const isCatchall = segmentParam.type === 'catchall'\n      const isOptionalCatchall = segmentParam.type === 'optional-catchall'\n\n      if (isCatchall || isOptionalCatchall) {\n        const dynamicParamType = dynamicParamTypes[segmentParam.type]\n        // handle the case where an optional catchall does not have a value,\n        // e.g. `/dashboard/[[...slug]]` when requesting `/dashboard`\n        if (isOptionalCatchall) {\n          return {\n            param: key,\n            value: null,\n            type: dynamicParamType,\n            treeSegment: [key, '', dynamicParamType],\n          }\n        }\n\n        // handle the case where a catchall or optional catchall does not have a value,\n        // e.g. `/foo/bar/hello` and `@slot/[...catchall]` or `@slot/[[...catchall]]` is matched\n        value = pagePath\n          .split('/')\n          // remove the first empty string\n          .slice(1)\n          // replace any dynamic params with the actual values\n          .flatMap((pathSegment) => {\n            const param = parseParameter(pathSegment)\n            // if the segment matches a param, return the param value\n            // otherwise, it's a static segment, so just return that\n            return params[param.key] ?? param.key\n          })\n\n        return {\n          param: key,\n          value,\n          type: dynamicParamType,\n          // This value always has to be a string.\n          treeSegment: [key, value.join('/'), dynamicParamType],\n        }\n      }\n    }\n\n    const type = getShortDynamicParamType(segmentParam.type)\n\n    return {\n      param: key,\n      // The value that is passed to user code.\n      value: value,\n      // The value that is rendered in the router tree.\n      treeSegment: [key, Array.isArray(value) ? value.join('/') : value, type],\n      type: type,\n    }\n  }\n}\n\nfunction NonIndex({ ctx }: { ctx: AppRenderContext }) {\n  const is404Page = ctx.pagePath === '/404'\n  const isInvalidStatusCode =\n    typeof ctx.res.statusCode === 'number' && ctx.res.statusCode > 400\n\n  if (is404Page || isInvalidStatusCode) {\n    return <meta name=\"robots\" content=\"noindex\" />\n  }\n  return null\n}\n\n/**\n * This is used by server actions & client-side navigations to generate RSC data from a client-side request.\n * This function is only called on \"dynamic\" requests (ie, there wasn't already a static response).\n * It uses request headers (namely `Next-Router-State-Tree`) to determine where to start rendering.\n */\nasync function generateDynamicRSCPayload(\n  ctx: AppRenderContext,\n  options?: {\n    actionResult: ActionResult\n    skipFlight: boolean\n  }\n): Promise<RSCPayload> {\n  ctx.requestStore.phase = 'render'\n  // Flight data that is going to be passed to the browser.\n  // Currently a single item array but in the future multiple patches might be combined in a single request.\n\n  // We initialize `flightData` to an empty string because the client router knows how to tolerate\n  // it (treating it as an MPA navigation). The only time this function wouldn't generate flight data\n  // is for server actions, if the server action handler instructs this function to skip it. When the server\n  // action reducer sees a falsy value, it'll simply resolve the action with no data.\n  let flightData: FlightData = ''\n\n  const {\n    componentMod: {\n      tree: loaderTree,\n      createServerSearchParamsForMetadata,\n      createServerParamsForMetadata,\n      createMetadataComponents,\n      MetadataBoundary,\n      ViewportBoundary,\n    },\n    getDynamicParamFromSegment,\n    appUsingSizeAdjustment,\n    requestStore: { url },\n    query,\n    requestId,\n    flightRouterState,\n    workStore,\n  } = ctx\n\n  if (!options?.skipFlight) {\n    const preloadCallbacks: PreloadCallbacks = []\n\n    const searchParams = createServerSearchParamsForMetadata(query, workStore)\n    const [MetadataTree, getMetadataReady] = createMetadataComponents({\n      tree: loaderTree,\n      searchParams,\n      metadataContext: createTrackedMetadataContext(\n        url.pathname,\n        ctx.renderOpts,\n        workStore\n      ),\n      getDynamicParamFromSegment,\n      appUsingSizeAdjustment,\n      createServerParamsForMetadata,\n      workStore,\n      MetadataBoundary,\n      ViewportBoundary,\n    })\n    flightData = (\n      await walkTreeWithFlightRouterState({\n        ctx,\n        createSegmentPath: (child) => child,\n        loaderTreeToFilter: loaderTree,\n        parentParams: {},\n        flightRouterState,\n        isFirst: true,\n        // For flight, render metadata inside leaf page\n        rscPayloadHead: (\n          <React.Fragment key={flightDataPathHeadKey}>\n            <NonIndex ctx={ctx} />\n            {/* Adding requestId as react key to make metadata remount for each render */}\n            <MetadataTree key={requestId} />\n          </React.Fragment>\n        ),\n        injectedCSS: new Set(),\n        injectedJS: new Set(),\n        injectedFontPreloadTags: new Set(),\n        rootLayoutIncluded: false,\n        getMetadataReady,\n        preloadCallbacks,\n      })\n    ).map((path) => path.slice(1)) // remove the '' (root) segment\n  }\n\n  // If we have an action result, then this is a server action response.\n  // We can rely on this because `ActionResult` will always be a promise, even if\n  // the result is falsey.\n  if (options?.actionResult) {\n    return {\n      a: options.actionResult,\n      f: flightData,\n      b: ctx.renderOpts.buildId,\n    }\n  }\n\n  // Otherwise, it's a regular RSC response.\n  return {\n    b: ctx.renderOpts.buildId,\n    f: flightData,\n    S: workStore.isStaticGeneration,\n  }\n}\n\nfunction createErrorContext(\n  ctx: AppRenderContext,\n  renderSource: RequestErrorContext['renderSource']\n): RequestErrorContext {\n  return {\n    routerKind: 'App Router',\n    routePath: ctx.pagePath,\n    routeType: ctx.isAction ? 'action' : 'render',\n    renderSource,\n    revalidateReason: getRevalidateReason(ctx.workStore),\n  }\n}\n/**\n * Produces a RenderResult containing the Flight data for the given request. See\n * `generateDynamicRSCPayload` for information on the contents of the render result.\n */\nasync function generateDynamicFlightRenderResult(\n  req: BaseNextRequest,\n  ctx: AppRenderContext,\n  options?: {\n    actionResult: ActionResult\n    skipFlight: boolean\n    componentTree?: CacheNodeSeedData\n    preloadCallbacks?: PreloadCallbacks\n    temporaryReferences?: WeakMap<any, string>\n  }\n): Promise<RenderResult> {\n  const renderOpts = ctx.renderOpts\n\n  function onFlightDataRenderError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'react-server-components-payload')\n    )\n  }\n  const onError = createFlightReactServerErrorHandler(\n    !!renderOpts.dev,\n    onFlightDataRenderError\n  )\n\n  const RSCPayload: RSCPayload & {\n    /** Only available during dynamicIO development builds. Used for logging errors. */\n    _validation?: Promise<React.ReactNode>\n  } = await generateDynamicRSCPayload(ctx, options)\n\n  if (\n    // We only want this behavior when running `next dev`\n    renderOpts.dev &&\n    // We only want this behavior when we have React's dev builds available\n    process.env.NODE_ENV === 'development' &&\n    // We only have a Prerender environment for projects opted into dynamicIO\n    renderOpts.experimental.dynamicIO\n  ) {\n    const [resolveValidation, validationOutlet] = createValidationOutlet()\n    RSCPayload._validation = validationOutlet\n\n    spawnDynamicValidationInDev(\n      resolveValidation,\n      ctx.componentMod.tree,\n      ctx,\n      false,\n      ctx.clientReferenceManifest,\n      ctx.workStore.route\n    )\n  }\n\n  // For app dir, use the bundled version of Flight server renderer (renderToReadableStream)\n  // which contains the subset React.\n  const flightReadableStream = ctx.componentMod.renderToReadableStream(\n    RSCPayload,\n    ctx.clientReferenceManifest.clientModules,\n    {\n      onError,\n      temporaryReferences: options?.temporaryReferences,\n    }\n  )\n\n  return new FlightRenderResult(flightReadableStream, {\n    fetchMetrics: ctx.workStore.fetchMetrics,\n  })\n}\n\n/**\n * Performs a \"warmup\" render of the RSC payload for a given route. This function is called by the server\n * prior to an actual render request in Dev mode only. It's purpose is to fill caches so the actual render\n * can accurately log activity in the right render context (Prerender vs Render).\n *\n * At the moment this implementation is mostly a fork of generateDynamicFlightRenderResult\n */\nasync function warmupDevRender(\n  req: BaseNextRequest,\n  ctx: AppRenderContext,\n  options?: {\n    actionResult: ActionResult\n    skipFlight: boolean\n    componentTree?: CacheNodeSeedData\n    preloadCallbacks?: PreloadCallbacks\n  }\n): Promise<RenderResult> {\n  const renderOpts = ctx.renderOpts\n  if (!renderOpts.dev) {\n    throw new InvariantError(\n      'generateDynamicFlightRenderResult should never be called in `next start` mode.'\n    )\n  }\n\n  function onFlightDataRenderError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'react-server-components-payload')\n    )\n  }\n  const onError = createFlightReactServerErrorHandler(\n    true,\n    onFlightDataRenderError\n  )\n\n  const rscPayload = await generateDynamicRSCPayload(ctx, options)\n\n  // For app dir, use the bundled version of Flight server renderer (renderToReadableStream)\n  // which contains the subset React.\n  const flightReadableStream = ctx.componentMod.renderToReadableStream(\n    rscPayload,\n    ctx.clientReferenceManifest.clientModules,\n    {\n      onError,\n    }\n  )\n\n  const reader = flightReadableStream.getReader()\n  while (true) {\n    if ((await reader.read()).done) {\n      break\n    }\n  }\n\n  // We don't really want to return a result here but the stack of functions\n  // that calls into renderToHTML... expects a result. We should refactor this to\n  // lift the warmup pathway outside of renderToHTML... but for now this suffices\n  return new FlightRenderResult('', {\n    fetchMetrics: ctx.workStore.fetchMetrics,\n  })\n}\n\n/**\n * Crawlers will inadvertently think the canonicalUrl in the RSC payload should be crawled\n * when our intention is to just seed the router state with the current URL.\n * This function splits up the pathname so that we can later join it on\n * when we're ready to consume the path.\n */\nfunction prepareInitialCanonicalUrl(url: RequestStore['url']) {\n  return (url.pathname + url.search).split('/')\n}\n\n// This is the data necessary to render <AppRouter /> when no SSR errors are encountered\nasync function getRSCPayload(\n  tree: LoaderTree,\n  ctx: AppRenderContext,\n  is404: boolean\n): Promise<InitialRSCPayload & { P: React.ReactNode }> {\n  const injectedCSS = new Set<string>()\n  const injectedJS = new Set<string>()\n  const injectedFontPreloadTags = new Set<string>()\n  let missingSlots: Set<string> | undefined\n\n  // We only track missing parallel slots in development\n  if (process.env.NODE_ENV === 'development') {\n    missingSlots = new Set<string>()\n  }\n\n  const {\n    getDynamicParamFromSegment,\n    query,\n    appUsingSizeAdjustment,\n    componentMod: {\n      GlobalError,\n      createServerSearchParamsForMetadata,\n      createServerParamsForMetadata,\n      createMetadataComponents,\n      MetadataBoundary,\n      ViewportBoundary,\n    },\n    requestStore: { url },\n    workStore,\n  } = ctx\n  const initialTree = createFlightRouterStateFromLoaderTree(\n    tree,\n    getDynamicParamFromSegment,\n    query\n  )\n\n  const searchParams = createServerSearchParamsForMetadata(query, workStore)\n  const [MetadataTree, getMetadataReady] = createMetadataComponents({\n    tree,\n    errorType: is404 ? 'not-found' : undefined,\n    searchParams,\n    metadataContext: createTrackedMetadataContext(\n      url.pathname,\n      ctx.renderOpts,\n      workStore\n    ),\n    getDynamicParamFromSegment,\n    appUsingSizeAdjustment,\n    createServerParamsForMetadata,\n    workStore,\n    MetadataBoundary,\n    ViewportBoundary,\n  })\n\n  const preloadCallbacks: PreloadCallbacks = []\n\n  const seedData = await createComponentTree({\n    ctx,\n    createSegmentPath: (child) => child,\n    loaderTree: tree,\n    parentParams: {},\n    firstItem: true,\n    injectedCSS,\n    injectedJS,\n    injectedFontPreloadTags,\n    rootLayoutIncluded: false,\n    getMetadataReady,\n    missingSlots,\n    preloadCallbacks,\n  })\n\n  // When the `vary` response header is present with `Next-URL`, that means there's a chance\n  // it could respond differently if there's an interception route. We provide this information\n  // to `AppRouter` so that it can properly seed the prefetch cache with a prefix, if needed.\n  const varyHeader = ctx.res.getHeader('vary')\n  const couldBeIntercepted =\n    typeof varyHeader === 'string' && varyHeader.includes(NEXT_URL)\n\n  const initialHead = (\n    <React.Fragment key={flightDataPathHeadKey}>\n      <NonIndex ctx={ctx} />\n      {/* Adding requestId as react key to make metadata remount for each render */}\n      <MetadataTree key={ctx.requestId} />\n    </React.Fragment>\n  )\n\n  return {\n    // See the comment above the `Preloads` component (below) for why this is part of the payload\n    P: <Preloads preloadCallbacks={preloadCallbacks} />,\n    b: ctx.renderOpts.buildId,\n    p: ctx.assetPrefix,\n    c: prepareInitialCanonicalUrl(url),\n    i: !!couldBeIntercepted,\n    f: [[initialTree, seedData, initialHead]],\n    m: missingSlots,\n    G: GlobalError,\n    s: typeof ctx.renderOpts.postponed === 'string',\n    S: workStore.isStaticGeneration,\n  }\n}\n\n/**\n * Preload calls (such as `ReactDOM.preloadStyle` and `ReactDOM.preloadFont`) need to be called during rendering\n * in order to create the appropriate preload tags in the DOM, otherwise they're a no-op. Since we invoke\n * renderToReadableStream with a function that returns component props rather than a component itself, we use\n * this component to \"render  \" the preload calls.\n */\nfunction Preloads({ preloadCallbacks }: { preloadCallbacks: Function[] }) {\n  preloadCallbacks.forEach((preloadFn) => preloadFn())\n  return null\n}\n\n// This is the data necessary to render <AppRouter /> when an error state is triggered\nasync function getErrorRSCPayload(\n  tree: LoaderTree,\n  ctx: AppRenderContext,\n  errorType: 'not-found' | 'redirect' | undefined\n) {\n  const {\n    getDynamicParamFromSegment,\n    query,\n    appUsingSizeAdjustment,\n    componentMod: {\n      GlobalError,\n      createServerSearchParamsForMetadata,\n      createServerParamsForMetadata,\n      createMetadataComponents,\n      MetadataBoundary,\n      ViewportBoundary,\n    },\n    requestStore: { url },\n    requestId,\n    workStore,\n  } = ctx\n\n  const searchParams = createServerSearchParamsForMetadata(query, workStore)\n  const [MetadataTree] = createMetadataComponents({\n    tree,\n    searchParams,\n    // We create an untracked metadata context here because we can't postpone\n    // again during the error render.\n    metadataContext: createMetadataContext(url.pathname, ctx.renderOpts),\n    errorType,\n    getDynamicParamFromSegment,\n    appUsingSizeAdjustment,\n    createServerParamsForMetadata,\n    workStore,\n    MetadataBoundary,\n    ViewportBoundary,\n  })\n\n  const initialHead = (\n    <React.Fragment key={flightDataPathHeadKey}>\n      <NonIndex ctx={ctx} />\n      {/* Adding requestId as react key to make metadata remount for each render */}\n      <MetadataTree key={requestId} />\n      {process.env.NODE_ENV === 'development' && (\n        <meta name=\"next-error\" content=\"not-found\" />\n      )}\n    </React.Fragment>\n  )\n\n  const initialTree = createFlightRouterStateFromLoaderTree(\n    tree,\n    getDynamicParamFromSegment,\n    query\n  )\n\n  // For metadata notFound error there's no global not found boundary on top\n  // so we create a not found page with AppRouter\n  const initialSeedData: CacheNodeSeedData = [\n    initialTree[0],\n    <html id=\"__next_error__\">\n      <head></head>\n      <body></body>\n    </html>,\n    {},\n    null,\n  ]\n\n  return {\n    b: ctx.renderOpts.buildId,\n    p: ctx.assetPrefix,\n    c: prepareInitialCanonicalUrl(url),\n    m: undefined,\n    i: false,\n    f: [[initialTree, initialSeedData, initialHead]],\n    G: GlobalError,\n    s: typeof ctx.renderOpts.postponed === 'string',\n    S: workStore.isStaticGeneration,\n  } satisfies InitialRSCPayload\n}\n\n// This component must run in an SSR context. It will render the RSC root component\nfunction App<T>({\n  reactServerStream,\n  preinitScripts,\n  clientReferenceManifest,\n  nonce,\n  ServerInsertedHTMLProvider,\n}: {\n  reactServerStream: BinaryStreamOf<T>\n  preinitScripts: () => void\n  clientReferenceManifest: NonNullable<RenderOpts['clientReferenceManifest']>\n  ServerInsertedHTMLProvider: React.ComponentType<{ children: JSX.Element }>\n  nonce?: string\n}): JSX.Element {\n  preinitScripts()\n  const response = React.use(\n    useFlightStream<InitialRSCPayload>(\n      reactServerStream,\n      clientReferenceManifest,\n      nonce\n    )\n  )\n\n  const initialState = createInitialRouterState({\n    buildId: response.b,\n    initialFlightData: response.f,\n    initialCanonicalUrlParts: response.c,\n    // location and initialParallelRoutes are not initialized in the SSR render\n    // they are set to an empty map and window.location, respectively during hydration\n    initialParallelRoutes: null!,\n    location: null,\n    couldBeIntercepted: response.i,\n    postponed: response.s,\n    prerendered: response.S,\n  })\n\n  const actionQueue = createMutableActionQueue(initialState)\n\n  const { HeadManagerContext } =\n    require('../../shared/lib/head-manager-context.shared-runtime') as typeof import('../../shared/lib/head-manager-context.shared-runtime')\n\n  return (\n    <HeadManagerContext.Provider\n      value={{\n        appDir: true,\n        nonce,\n      }}\n    >\n      <ServerInsertedHTMLProvider>\n        <AppRouter\n          actionQueue={actionQueue}\n          globalErrorComponent={response.G}\n          assetPrefix={response.p}\n        />\n      </ServerInsertedHTMLProvider>\n    </HeadManagerContext.Provider>\n  )\n}\n\n// @TODO our error stream should be probably just use the same root component. But it was previously\n// different I don't want to figure out if that is meaningful at this time so just keeping the behavior\n// consistent for now.\nfunction AppWithoutContext<T>({\n  reactServerStream,\n  preinitScripts,\n  clientReferenceManifest,\n  nonce,\n}: {\n  reactServerStream: BinaryStreamOf<T>\n  preinitScripts: () => void\n  clientReferenceManifest: NonNullable<RenderOpts['clientReferenceManifest']>\n  nonce?: string\n}): JSX.Element {\n  preinitScripts()\n  const response = React.use(\n    useFlightStream<InitialRSCPayload>(\n      reactServerStream,\n      clientReferenceManifest,\n      nonce\n    )\n  )\n\n  const initialState = createInitialRouterState({\n    buildId: response.b,\n    initialFlightData: response.f,\n    initialCanonicalUrlParts: response.c,\n    // location and initialParallelRoutes are not initialized in the SSR render\n    // they are set to an empty map and window.location, respectively during hydration\n    initialParallelRoutes: null!,\n    location: null,\n    couldBeIntercepted: response.i,\n    postponed: response.s,\n    prerendered: response.S,\n  })\n\n  const actionQueue = createMutableActionQueue(initialState)\n\n  return (\n    <AppRouter\n      actionQueue={actionQueue}\n      globalErrorComponent={response.G}\n      assetPrefix={response.p}\n    />\n  )\n}\n\n// We use a trick with TS Generics to branch streams with a type so we can\n// consume the parsed value of a Readable Stream if it was constructed with a\n// certain object shape. The generic type is not used directly in the type so it\n// requires a disabling of the eslint rule disallowing unused vars\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport type BinaryStreamOf<T> = ReadableStream<Uint8Array>\n\nasync function renderToHTMLOrFlightImpl(\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  pagePath: string,\n  query: NextParsedUrlQuery,\n  renderOpts: RenderOpts,\n  requestStore: RequestStore,\n  workStore: WorkStore,\n  parsedRequestHeaders: ParsedRequestHeaders,\n  requestEndedState: { ended?: boolean },\n  postponedState: PostponedState | null\n) {\n  const isNotFoundPath = pagePath === '/404'\n  if (isNotFoundPath) {\n    res.statusCode = 404\n  }\n\n  // A unique request timestamp used by development to ensure that it's\n  // consistent and won't change during this request. This is important to\n  // avoid that resources can be deduped by React Float if the same resource is\n  // rendered or preloaded multiple times: `<link href=\"a.css?v={Date.now()}\"/>`.\n  const requestTimestamp = Date.now()\n\n  const {\n    serverActionsManifest,\n    ComponentMod,\n    nextFontManifest,\n    serverActions,\n    assetPrefix = '',\n    enableTainting,\n  } = renderOpts\n\n  // We need to expose the bundled `require` API globally for\n  // react-server-dom-webpack. This is a hack until we find a better way.\n  if (ComponentMod.__next_app__) {\n    const instrumented = wrapClientComponentLoader(ComponentMod)\n    // @ts-ignore\n    globalThis.__next_require__ = instrumented.require\n    // When we are prerendering if there is a cacheSignal for tracking\n    // cache reads we wrap the loadChunk in this tracking. This allows us\n    // to treat chunk loading with similar semantics as cache reads to avoid\n    // async loading chunks from causing a prerender to abort too early.\n    // @ts-ignore\n    globalThis.__next_chunk_load__ = (...args: Array<any>) => {\n      const loadingChunk = instrumented.loadChunk(...args)\n      trackChunkLoading(loadingChunk)\n      return loadingChunk\n    }\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    // reset isr status at start of request\n    const { pathname } = new URL(req.url || '/', 'http://n')\n    renderOpts.setAppIsrStatus?.(pathname, null)\n  }\n\n  if (\n    // The type check here ensures that `req` is correctly typed, and the\n    // environment variable check provides dead code elimination.\n    process.env.NEXT_RUNTIME !== 'edge' &&\n    isNodeNextRequest(req)\n  ) {\n    req.originalRequest.on('end', () => {\n      const prerenderStore = workUnitAsyncStorage.getStore()\n      const isPPR =\n        prerenderStore &&\n        (prerenderStore.type === 'prerender' ||\n          prerenderStore.type === 'prerender-ppr')\n          ? !!prerenderStore.dynamicTracking?.dynamicAccesses?.length\n          : false\n\n      if (\n        process.env.NODE_ENV === 'development' &&\n        renderOpts.setAppIsrStatus &&\n        !isPPR &&\n        !requestStore.usedDynamic &&\n        !workStore.forceDynamic\n      ) {\n        // only node can be ISR so we only need to update the status here\n        const { pathname } = new URL(req.url || '/', 'http://n')\n        renderOpts.setAppIsrStatus(pathname, true)\n      }\n\n      requestEndedState.ended = true\n\n      if ('performance' in globalThis) {\n        const metrics = getClientComponentLoaderMetrics({ reset: true })\n        if (metrics) {\n          getTracer()\n            .startSpan(NextNodeServerSpan.clientComponentLoading, {\n              startTime: metrics.clientComponentLoadStart,\n              attributes: {\n                'next.clientComponentLoadCount':\n                  metrics.clientComponentLoadCount,\n                'next.span_type': NextNodeServerSpan.clientComponentLoading,\n              },\n            })\n            .end(\n              metrics.clientComponentLoadStart +\n                metrics.clientComponentLoadTimes\n            )\n        }\n      }\n    })\n  }\n\n  const metadata: AppPageRenderResultMetadata = {}\n\n  const appUsingSizeAdjustment = !!nextFontManifest?.appUsingSizeAdjust\n\n  // TODO: fix this typescript\n  const clientReferenceManifest = renderOpts.clientReferenceManifest!\n\n  const serverModuleMap = createServerModuleMap({\n    serverActionsManifest,\n    pageName: renderOpts.page,\n  })\n\n  setReferenceManifestsSingleton({\n    clientReferenceManifest,\n    serverActionsManifest,\n    serverModuleMap,\n  })\n\n  ComponentMod.patchFetch()\n\n  // Pull out the hooks/references from the component.\n  const { tree: loaderTree, taintObjectReference } = ComponentMod\n\n  if (enableTainting) {\n    taintObjectReference(\n      'Do not pass process.env to client components since it will leak sensitive data',\n      process.env\n    )\n  }\n\n  workStore.fetchMetrics = []\n  metadata.fetchMetrics = workStore.fetchMetrics\n\n  // don't modify original query object\n  query = { ...query }\n  stripInternalQueries(query)\n\n  const {\n    flightRouterState,\n    isPrefetchRequest,\n    isRSCRequest,\n    isDevWarmupRequest,\n    nonce,\n  } = parsedRequestHeaders\n\n  /**\n   * The metadata items array created in next-app-loader with all relevant information\n   * that we need to resolve the final metadata.\n   */\n  let requestId: string\n\n  if (process.env.NEXT_RUNTIME === 'edge') {\n    requestId = crypto.randomUUID()\n  } else {\n    requestId = require('next/dist/compiled/nanoid').nanoid()\n  }\n\n  /**\n   * Dynamic parameters. E.g. when you visit `/dashboard/vercel` which is rendered by `/dashboard/[slug]` the value will be {\"slug\": \"vercel\"}.\n   */\n  const params = renderOpts.params ?? {}\n\n  const { isStaticGeneration, fallbackRouteParams } = workStore\n\n  const getDynamicParamFromSegment = makeGetDynamicParamFromSegment(\n    params,\n    pagePath,\n    fallbackRouteParams\n  )\n\n  const isActionRequest = getServerActionRequestMetadata(req).isServerAction\n\n  const ctx: AppRenderContext = {\n    componentMod: ComponentMod,\n    renderOpts,\n    requestStore,\n    workStore,\n    parsedRequestHeaders,\n    getDynamicParamFromSegment,\n    query,\n    isPrefetch: isPrefetchRequest,\n    isAction: isActionRequest,\n    requestTimestamp,\n    appUsingSizeAdjustment,\n    flightRouterState,\n    requestId,\n    pagePath,\n    clientReferenceManifest,\n    assetPrefix,\n    isNotFoundPath,\n    nonce,\n    res,\n  }\n\n  getTracer().setRootSpanAttribute('next.route', pagePath)\n\n  if (isStaticGeneration) {\n    // We're either building or revalidating. In either case we need to\n    // prerender our page rather than render it.\n    const prerenderToStreamWithTracing = getTracer().wrap(\n      AppRenderSpan.getBodyResult,\n      {\n        spanName: `prerender route (app) ${pagePath}`,\n        attributes: {\n          'next.route': pagePath,\n        },\n      },\n      prerenderToStream\n    )\n\n    let response = await prerenderToStreamWithTracing(\n      req,\n      res,\n      ctx,\n      metadata,\n      workStore,\n      loaderTree\n    )\n\n    // If we're debugging partial prerendering, print all the dynamic API accesses\n    // that occurred during the render.\n    // @TODO move into renderToStream function\n    if (\n      response.dynamicAccess &&\n      accessedDynamicData(response.dynamicAccess) &&\n      renderOpts.isDebugDynamicAccesses\n    ) {\n      warn('The following dynamic usage was detected:')\n      for (const access of formatDynamicAPIAccesses(response.dynamicAccess)) {\n        warn(access)\n      }\n    }\n\n    // If we encountered any unexpected errors during build we fail the\n    // prerendering phase and the build.\n    if (response.digestErrorsMap.size) {\n      const buildFailingError = response.digestErrorsMap.values().next().value\n      if (buildFailingError) throw buildFailingError\n    }\n    // Pick first userland SSR error, which is also not a RSC error.\n    if (response.ssrErrors.length) {\n      const buildFailingError = response.ssrErrors.find((err) =>\n        isUserLandError(err)\n      )\n      if (buildFailingError) throw buildFailingError\n    }\n\n    const options: RenderResultOptions = {\n      metadata,\n    }\n    // If we have pending revalidates, wait until they are all resolved.\n    if (\n      workStore.pendingRevalidates ||\n      workStore.pendingRevalidateWrites ||\n      workStore.revalidatedTags\n    ) {\n      options.waitUntil = Promise.all([\n        workStore.incrementalCache?.revalidateTag(\n          workStore.revalidatedTags || []\n        ),\n        ...Object.values(workStore.pendingRevalidates || {}),\n        ...(workStore.pendingRevalidateWrites || []),\n      ])\n    }\n\n    if (response.collectedTags) {\n      metadata.fetchTags = response.collectedTags.join(',')\n    }\n\n    // Let the client router know how long to keep the cached entry around.\n    const staleHeader = String(response.collectedStale)\n    res.setHeader(NEXT_ROUTER_STALE_TIME_HEADER, staleHeader)\n    metadata.headers ??= {}\n    metadata.headers[NEXT_ROUTER_STALE_TIME_HEADER] = staleHeader\n\n    // If force static is specifically set to false, we should not revalidate\n    // the page.\n    if (workStore.forceStatic === false || response.collectedRevalidate === 0) {\n      metadata.revalidate = 0\n    } else {\n      // Copy the revalidation value onto the render result metadata.\n      metadata.revalidate =\n        response.collectedRevalidate >= INFINITE_CACHE\n          ? false\n          : response.collectedRevalidate\n    }\n\n    // provide bailout info for debugging\n    if (metadata.revalidate === 0) {\n      metadata.staticBailoutInfo = {\n        description: workStore.dynamicUsageDescription,\n        stack: workStore.dynamicUsageStack,\n      }\n    }\n\n    // Per-segment prefetch data\n    //\n    // All of the segments for a page are generated simultaneously, including\n    // during revalidations. This is to ensure consistency, because it's\n    // possible for a mismatch between a layout and page segment can cause the\n    // client to error during rendering. We want to preserve the ability of the\n    // client to recover from such a mismatch by re-requesting all the segments\n    // to get a consistent view of the page.\n    //\n    // TODO (Per Segment Prefetching): This is placeholder data. Populate with\n    // the actual data generated during prerender.\n    if (renderOpts.experimental.isRoutePPREnabled === true) {\n      const placeholder = Buffer.from(\n        'TODO (Per Segment Prefetching): Not yet implemented\\n'\n      )\n      metadata.segmentFlightData = new Map([\n        // Root segment\n        ['/', placeholder],\n        ['/blog', placeholder],\n        // TODO: Update the client to use the same encoding for segment paths that\n        // we use here, so we don't have to convert between them. Needs to be\n        // filesystem safe.\n        ['/blog/[post]-1-d', placeholder],\n      ])\n    }\n\n    return new RenderResult(await streamToString(response.stream), options)\n  } else {\n    // We're rendering dynamically\n    if (isDevWarmupRequest) {\n      return warmupDevRender(req, ctx)\n    } else if (isRSCRequest) {\n      return generateDynamicFlightRenderResult(req, ctx)\n    }\n\n    const renderToStreamWithTracing = getTracer().wrap(\n      AppRenderSpan.getBodyResult,\n      {\n        spanName: `render route (app) ${pagePath}`,\n        attributes: {\n          'next.route': pagePath,\n        },\n      },\n      renderToStream\n    )\n\n    let formState: null | any = null\n    if (isActionRequest) {\n      // For action requests, we handle them differently with a special render result.\n      const actionRequestResult = await handleAction({\n        req,\n        res,\n        ComponentMod,\n        serverModuleMap,\n        generateFlight: generateDynamicFlightRenderResult,\n        workStore,\n        requestStore,\n        serverActions,\n        ctx,\n      })\n\n      if (actionRequestResult) {\n        if (actionRequestResult.type === 'not-found') {\n          const notFoundLoaderTree = createNotFoundLoaderTree(loaderTree)\n          res.statusCode = 404\n          const stream = await renderToStreamWithTracing(\n            requestStore,\n            req,\n            res,\n            ctx,\n            workStore,\n            notFoundLoaderTree,\n            formState,\n            postponedState\n          )\n\n          return new RenderResult(stream, { metadata })\n        } else if (actionRequestResult.type === 'done') {\n          if (actionRequestResult.result) {\n            actionRequestResult.result.assignMetadata(metadata)\n            return actionRequestResult.result\n          } else if (actionRequestResult.formState) {\n            formState = actionRequestResult.formState\n          }\n        }\n      }\n    }\n\n    const options: RenderResultOptions = {\n      metadata,\n    }\n\n    const stream = await renderToStreamWithTracing(\n      requestStore,\n      req,\n      res,\n      ctx,\n      workStore,\n      loaderTree,\n      formState,\n      postponedState\n    )\n\n    // If we have pending revalidates, wait until they are all resolved.\n    if (\n      workStore.pendingRevalidates ||\n      workStore.pendingRevalidateWrites ||\n      workStore.revalidatedTags\n    ) {\n      options.waitUntil = Promise.all([\n        workStore.incrementalCache?.revalidateTag(\n          workStore.revalidatedTags || []\n        ),\n        ...Object.values(workStore.pendingRevalidates || {}),\n        ...(workStore.pendingRevalidateWrites || []),\n      ])\n    }\n\n    // Create the new render result for the response.\n    return new RenderResult(stream, options)\n  }\n}\n\nexport type AppPageRender = (\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  pagePath: string,\n  query: NextParsedUrlQuery,\n  fallbackRouteParams: FallbackRouteParams | null,\n  renderOpts: RenderOpts,\n  serverComponentsHmrCache?: ServerComponentsHmrCache\n) => Promise<RenderResult<AppPageRenderResultMetadata>>\n\nexport const renderToHTMLOrFlight: AppPageRender = (\n  req,\n  res,\n  pagePath,\n  query,\n  fallbackRouteParams,\n  renderOpts,\n  serverComponentsHmrCache\n) => {\n  if (!req.url) {\n    throw new Error('Invalid URL')\n  }\n\n  const url = parseRelativeUrl(req.url, undefined, false)\n\n  // We read these values from the request object as, in certain cases,\n  // base-server will strip them to opt into different rendering behavior.\n  const parsedRequestHeaders = parseRequestHeaders(req.headers, {\n    isDevWarmup: renderOpts.isDevWarmup,\n    isRoutePPREnabled: renderOpts.experimental.isRoutePPREnabled === true,\n  })\n\n  const { isHmrRefresh, isPrefetchRequest } = parsedRequestHeaders\n\n  const requestEndedState = { ended: false }\n  let postponedState: PostponedState | null = null\n\n  // If provided, the postpone state should be parsed so it can be provided to\n  // React.\n  if (typeof renderOpts.postponed === 'string') {\n    if (fallbackRouteParams && fallbackRouteParams.size > 0) {\n      throw new Error(\n        'Invariant: postponed state should not be provided when fallback params are provided'\n      )\n    }\n\n    postponedState = parsePostponedState(\n      renderOpts.postponed,\n      renderOpts.params\n    )\n  }\n\n  const implicitTags = getImplicitTags(\n    renderOpts.routeModule.definition.page,\n    url,\n    fallbackRouteParams\n  )\n  // TODO: We need to refactor this so that prerenders do not rely upon the\n  // existence of an outer scoped request store. Then we should move this\n  // store generation inside the appropriate scope like `renderToStream` where\n  // we know we're handling a Request and not a Prerender\n  const requestStore = createRequestStoreForRender(\n    req,\n    res,\n    url,\n    implicitTags,\n    renderOpts.onUpdateCookies,\n    renderOpts.previewProps,\n    isHmrRefresh,\n    serverComponentsHmrCache\n  )\n  return workUnitAsyncStorage.run(requestStore, () => {\n    return withWorkStore(\n      renderOpts.ComponentMod.workAsyncStorage,\n      {\n        page: renderOpts.routeModule.definition.page,\n        fallbackRouteParams,\n        renderOpts,\n        requestEndedState,\n        // @TODO move to workUnitStore of type Request\n        isPrefetchRequest,\n      },\n      (workStore) =>\n        renderToHTMLOrFlightImpl(\n          req,\n          res,\n          pagePath,\n          query,\n          renderOpts,\n          requestStore,\n          workStore,\n          parsedRequestHeaders,\n          requestEndedState,\n          postponedState\n        )\n    )\n  })\n}\n\nasync function renderToStream(\n  requestStore: RequestStore,\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  ctx: AppRenderContext,\n  workStore: WorkStore,\n  tree: LoaderTree,\n  formState: any,\n  postponedState: PostponedState | null\n): Promise<ReadableStream<Uint8Array>> {\n  const renderOpts = ctx.renderOpts\n  const ComponentMod = renderOpts.ComponentMod\n  // TODO: fix this typescript\n  const clientReferenceManifest = renderOpts.clientReferenceManifest!\n\n  const { ServerInsertedHTMLProvider, renderServerInsertedHTML } =\n    createServerInsertedHTML()\n\n  const tracingMetadata = getTracedMetadata(\n    getTracer().getTracePropagationData(),\n    renderOpts.experimental.clientTraceMetadata\n  )\n\n  const polyfills: JSX.IntrinsicElements['script'][] =\n    renderOpts.buildManifest.polyfillFiles\n      .filter(\n        (polyfill) =>\n          polyfill.endsWith('.js') && !polyfill.endsWith('.module.js')\n      )\n      .map((polyfill) => ({\n        src: `${ctx.assetPrefix}/_next/${polyfill}${getAssetQueryString(\n          ctx,\n          false\n        )}`,\n        integrity: renderOpts.subresourceIntegrityManifest?.[polyfill],\n        crossOrigin: renderOpts.crossOrigin,\n        noModule: true,\n        nonce: ctx.nonce,\n      }))\n\n  const [preinitScripts, bootstrapScript] = getRequiredScripts(\n    renderOpts.buildManifest,\n    // Why is assetPrefix optional on renderOpts?\n    // @TODO make it default empty string on renderOpts and get rid of it from ctx\n    ctx.assetPrefix,\n    renderOpts.crossOrigin,\n    renderOpts.subresourceIntegrityManifest,\n    getAssetQueryString(ctx, true),\n    ctx.nonce,\n    renderOpts.page\n  )\n\n  const reactServerErrorsByDigest: Map<string, DigestedError> = new Map()\n  const silenceLogger = false\n  function onHTMLRenderRSCError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'react-server-components')\n    )\n  }\n  const serverComponentsErrorHandler = createHTMLReactServerErrorHandler(\n    !!renderOpts.dev,\n    !!renderOpts.nextExport,\n    reactServerErrorsByDigest,\n    silenceLogger,\n    onHTMLRenderRSCError\n  )\n\n  function onHTMLRenderSSRError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'server-rendering')\n    )\n  }\n\n  const allCapturedErrors: Array<unknown> = []\n  const htmlRendererErrorHandler = createHTMLErrorHandler(\n    !!renderOpts.dev,\n    !!renderOpts.nextExport,\n    reactServerErrorsByDigest,\n    allCapturedErrors,\n    silenceLogger,\n    onHTMLRenderSSRError\n  )\n\n  let reactServerResult: null | ReactServerResult = null\n\n  const setHeader = res.setHeader.bind(res)\n\n  try {\n    if (\n      // We only want this behavior when running `next dev`\n      renderOpts.dev &&\n      // We only want this behavior when we have React's dev builds available\n      process.env.NODE_ENV === 'development' &&\n      // Edge routes never prerender so we don't have a Prerender environment for anything in edge runtime\n      process.env.NEXT_RUNTIME !== 'edge' &&\n      // We only have a Prerender environment for projects opted into dynamicIO\n      renderOpts.experimental.dynamicIO\n    ) {\n      // This is a dynamic render. We don't do dynamic tracking because we're not prerendering\n      const RSCPayload: InitialRSCPayload & {\n        /** Only available during dynamicIO development builds. Used for logging errors. */\n        _validation?: Promise<React.ReactNode>\n      } = await workUnitAsyncStorage.run(\n        requestStore,\n        getRSCPayload,\n        tree,\n        ctx,\n        res.statusCode === 404\n      )\n      const [resolveValidation, validationOutlet] = createValidationOutlet()\n      RSCPayload._validation = validationOutlet\n\n      const reactServerStream = await workUnitAsyncStorage.run(\n        requestStore,\n        scheduleInSequentialTasks,\n        () => {\n          requestStore.prerenderPhase = true\n          return ComponentMod.renderToReadableStream(\n            RSCPayload,\n            clientReferenceManifest.clientModules,\n            {\n              onError: serverComponentsErrorHandler,\n              environmentName: () =>\n                requestStore.prerenderPhase === true ? 'Prerender' : 'Server',\n            }\n          )\n        },\n        () => {\n          requestStore.prerenderPhase = false\n        }\n      )\n\n      spawnDynamicValidationInDev(\n        resolveValidation,\n        tree,\n        ctx,\n        res.statusCode === 404,\n        clientReferenceManifest,\n        workStore.route\n      )\n\n      reactServerResult = new ReactServerResult(reactServerStream)\n    } else {\n      // This is a dynamic render. We don't do dynamic tracking because we're not prerendering\n      const RSCPayload = await workUnitAsyncStorage.run(\n        requestStore,\n        getRSCPayload,\n        tree,\n        ctx,\n        res.statusCode === 404\n      )\n\n      reactServerResult = new ReactServerResult(\n        workUnitAsyncStorage.run(\n          requestStore,\n          ComponentMod.renderToReadableStream,\n          RSCPayload,\n          clientReferenceManifest.clientModules,\n          {\n            onError: serverComponentsErrorHandler,\n          }\n        )\n      )\n    }\n\n    // React doesn't start rendering synchronously but we want the RSC render to have a chance to start\n    // before we begin SSR rendering because we want to capture any available preload headers so we tick\n    // one task before continuing\n    await waitAtLeastOneReactRenderTask()\n\n    // If provided, the postpone state should be parsed as JSON so it can be\n    // provided to React.\n    if (typeof renderOpts.postponed === 'string') {\n      if (postponedState?.type === DynamicState.DATA) {\n        // We have a complete HTML Document in the prerender but we need to\n        // still include the new server component render because it was not included\n        // in the static prelude.\n        const inlinedReactServerDataStream = createInlinedDataReadableStream(\n          reactServerResult.tee(),\n          ctx.nonce,\n          formState\n        )\n\n        return chainStreams(\n          inlinedReactServerDataStream,\n          createDocumentClosingStream()\n        )\n      } else if (postponedState) {\n        // We assume we have dynamic HTML requiring a resume render to complete\n        const postponed = getPostponedFromState(postponedState)\n\n        const resume = require('react-dom/server.edge')\n          .resume as (typeof import('react-dom/server.edge'))['resume']\n\n        const htmlStream = await workUnitAsyncStorage.run(\n          requestStore,\n          resume,\n          <App\n            reactServerStream={reactServerResult.tee()}\n            preinitScripts={preinitScripts}\n            clientReferenceManifest={clientReferenceManifest}\n            ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n            nonce={ctx.nonce}\n          />,\n          postponed,\n          {\n            onError: htmlRendererErrorHandler,\n            nonce: ctx.nonce,\n          }\n        )\n\n        const getServerInsertedHTML = makeGetServerInsertedHTML({\n          polyfills,\n          renderServerInsertedHTML,\n          serverCapturedErrors: allCapturedErrors,\n          basePath: renderOpts.basePath,\n          tracingMetadata: tracingMetadata,\n        })\n        return await continueDynamicHTMLResume(htmlStream, {\n          inlinedDataStream: createInlinedDataReadableStream(\n            reactServerResult.consume(),\n            ctx.nonce,\n            formState\n          ),\n          getServerInsertedHTML,\n        })\n      }\n    }\n\n    // This is a regular dynamic render\n    const renderToReadableStream = require('react-dom/server.edge')\n      .renderToReadableStream as (typeof import('react-dom/server.edge'))['renderToReadableStream']\n\n    const htmlStream = await workUnitAsyncStorage.run(\n      requestStore,\n      renderToReadableStream,\n      <App\n        reactServerStream={reactServerResult.tee()}\n        preinitScripts={preinitScripts}\n        clientReferenceManifest={clientReferenceManifest}\n        ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n        nonce={ctx.nonce}\n      />,\n      {\n        onError: htmlRendererErrorHandler,\n        nonce: ctx.nonce,\n        onHeaders: (headers: Headers) => {\n          headers.forEach((value, key) => {\n            setHeader(key, value)\n          })\n        },\n        maxHeadersLength: renderOpts.reactMaxHeadersLength,\n        // When debugging the static shell, client-side rendering should be\n        // disabled to prevent blanking out the page.\n        bootstrapScripts: renderOpts.isDebugStaticShell\n          ? []\n          : [bootstrapScript],\n        formState,\n      }\n    )\n\n    const getServerInsertedHTML = makeGetServerInsertedHTML({\n      polyfills,\n      renderServerInsertedHTML,\n      serverCapturedErrors: allCapturedErrors,\n      basePath: renderOpts.basePath,\n      tracingMetadata: tracingMetadata,\n    })\n    /**\n     * Rules of Static & Dynamic HTML:\n     *\n     *    1.) We must generate static HTML unless the caller explicitly opts\n     *        in to dynamic HTML support.\n     *\n     *    2.) If dynamic HTML support is requested, we must honor that request\n     *        or throw an error. It is the sole responsibility of the caller to\n     *        ensure they aren't e.g. requesting dynamic HTML for an AMP page.\n     *\n     * These rules help ensure that other existing features like request caching,\n     * coalescing, and ISR continue working as intended.\n     */\n    const generateStaticHTML = renderOpts.supportsDynamicResponse !== true\n    const validateRootLayout = renderOpts.dev\n    return await continueFizzStream(htmlStream, {\n      inlinedDataStream: createInlinedDataReadableStream(\n        reactServerResult.consume(),\n        ctx.nonce,\n        formState\n      ),\n      isStaticGeneration: generateStaticHTML,\n      getServerInsertedHTML,\n      serverInsertedHTMLToHead: true,\n      validateRootLayout,\n    })\n  } catch (err) {\n    if (\n      isStaticGenBailoutError(err) ||\n      (typeof err === 'object' &&\n        err !== null &&\n        'message' in err &&\n        typeof err.message === 'string' &&\n        err.message.includes(\n          'https://nextjs.org/docs/advanced-features/static-html-export'\n        ))\n    ) {\n      // Ensure that \"next dev\" prints the red error overlay\n      throw err\n    }\n\n    // If a bailout made it to this point, it means it wasn't wrapped inside\n    // a suspense boundary.\n    const shouldBailoutToCSR = isBailoutToCSRError(err)\n    if (shouldBailoutToCSR) {\n      const stack = getStackWithoutErrorMessage(err)\n      error(\n        `${err.reason} should be wrapped in a suspense boundary at page \"${ctx.pagePath}\". Read more: https://nextjs.org/docs/messages/missing-suspense-with-csr-bailout\\n${stack}`\n      )\n\n      throw err\n    }\n\n    let errorType: 'not-found' | 'redirect' | undefined\n\n    if (isNotFoundError(err)) {\n      errorType = 'not-found'\n      res.statusCode = 404\n    } else if (isRedirectError(err)) {\n      errorType = 'redirect'\n      res.statusCode = getRedirectStatusCodeFromError(err)\n\n      const redirectUrl = addPathPrefix(\n        getURLFromRedirectError(err),\n        renderOpts.basePath\n      )\n\n      // If there were mutable cookies set, we need to set them on the\n      // response.\n      const headers = new Headers()\n      if (appendMutableCookies(headers, ctx.requestStore.mutableCookies)) {\n        setHeader('set-cookie', Array.from(headers.values()))\n      }\n\n      setHeader('location', redirectUrl)\n    } else if (!shouldBailoutToCSR) {\n      res.statusCode = 500\n    }\n\n    const [errorPreinitScripts, errorBootstrapScript] = getRequiredScripts(\n      renderOpts.buildManifest,\n      ctx.assetPrefix,\n      renderOpts.crossOrigin,\n      renderOpts.subresourceIntegrityManifest,\n      getAssetQueryString(ctx, false),\n      ctx.nonce,\n      '/_not-found/page'\n    )\n\n    const errorRSCPayload = await workUnitAsyncStorage.run(\n      requestStore,\n      getErrorRSCPayload,\n      tree,\n      ctx,\n      errorType\n    )\n\n    const errorServerStream = workUnitAsyncStorage.run(\n      requestStore,\n      ComponentMod.renderToReadableStream,\n      errorRSCPayload,\n      clientReferenceManifest.clientModules,\n      {\n        onError: serverComponentsErrorHandler,\n      }\n    )\n\n    if (reactServerResult === null) {\n      // We errored when we did not have an RSC stream to read from. This is not just a render\n      // error, we need to throw early\n      throw err\n    }\n\n    try {\n      const fizzStream = await workUnitAsyncStorage.run(\n        requestStore,\n        renderToInitialFizzStream,\n        {\n          ReactDOMServer: require('react-dom/server.edge'),\n          element: (\n            <AppWithoutContext\n              reactServerStream={errorServerStream}\n              preinitScripts={errorPreinitScripts}\n              clientReferenceManifest={clientReferenceManifest}\n              nonce={ctx.nonce}\n            />\n          ),\n          streamOptions: {\n            nonce: ctx.nonce,\n            // Include hydration scripts in the HTML\n            bootstrapScripts: [errorBootstrapScript],\n            formState,\n          },\n        }\n      )\n\n      /**\n       * Rules of Static & Dynamic HTML:\n       *\n       *    1.) We must generate static HTML unless the caller explicitly opts\n       *        in to dynamic HTML support.\n       *\n       *    2.) If dynamic HTML support is requested, we must honor that request\n       *        or throw an error. It is the sole responsibility of the caller to\n       *        ensure they aren't e.g. requesting dynamic HTML for an AMP page.\n       *\n       * These rules help ensure that other existing features like request caching,\n       * coalescing, and ISR continue working as intended.\n       */\n      const generateStaticHTML = renderOpts.supportsDynamicResponse !== true\n      const validateRootLayout = renderOpts.dev\n      return await continueFizzStream(fizzStream, {\n        inlinedDataStream: createInlinedDataReadableStream(\n          // This is intentionally using the readable datastream from the\n          // main render rather than the flight data from the error page\n          // render\n          reactServerResult.consume(),\n          ctx.nonce,\n          formState\n        ),\n        isStaticGeneration: generateStaticHTML,\n        getServerInsertedHTML: makeGetServerInsertedHTML({\n          polyfills,\n          renderServerInsertedHTML,\n          serverCapturedErrors: [],\n          basePath: renderOpts.basePath,\n          tracingMetadata: tracingMetadata,\n        }),\n        serverInsertedHTMLToHead: true,\n        validateRootLayout,\n      })\n    } catch (finalErr: any) {\n      if (process.env.NODE_ENV === 'development' && isNotFoundError(finalErr)) {\n        const bailOnNotFound: typeof import('../../client/components/dev-root-not-found-boundary').bailOnNotFound =\n          require('../../client/components/dev-root-not-found-boundary').bailOnNotFound\n        bailOnNotFound()\n      }\n      throw finalErr\n    }\n  }\n}\n\nfunction createValidationOutlet() {\n  let resolveValidation: (value: React.ReactNode) => void\n  let outlet = new Promise<React.ReactNode>((resolve) => {\n    resolveValidation = resolve\n  })\n  return [resolveValidation!, outlet] as const\n}\n\nasync function spawnDynamicValidationInDev(\n  resolveValidation: (validatingElement: React.ReactNode) => void,\n  tree: LoaderTree,\n  ctx: AppRenderContext,\n  isNotFound: boolean,\n  clientReferenceManifest: NonNullable<RenderOpts['clientReferenceManifest']>,\n  route: string\n): Promise<void> {\n  const { componentMod: ComponentMod } = ctx\n\n  const firstAttemptServerController = new AbortController()\n  let serverDynamicTracking = createDynamicTrackingState(false)\n\n  const firstAttemptServerPrerenderStore: PrerenderStore = {\n    type: 'prerender',\n    phase: 'render',\n    implicitTags: [],\n    renderSignal: firstAttemptServerController.signal,\n    cacheSignal: null,\n    // During the prospective render we don't want to synchronously abort on dynamic access\n    // because it could prevent us from discovering all caches in siblings. So we omit the controller\n    // from the prerender store this time.\n    controller: firstAttemptServerController,\n    // With PPR during Prerender we don't need to track individual dynamic reasons\n    // because we will always do a final render after caches have filled and we\n    // will track it again there\n    dynamicTracking: serverDynamicTracking,\n    revalidate: INFINITE_CACHE,\n    expire: INFINITE_CACHE,\n    stale: INFINITE_CACHE,\n    tags: [],\n    // Dev only property that allows certain logs to be supressed\n    validating: true,\n  }\n\n  const firstAttemptRSCPayload = await workUnitAsyncStorage.run(\n    firstAttemptServerPrerenderStore,\n    getRSCPayload,\n    tree,\n    ctx,\n    isNotFound\n  )\n\n  let reactServerStream = await workUnitAsyncStorage.run(\n    firstAttemptServerPrerenderStore,\n    scheduleInSequentialTasks,\n    () => {\n      const stream = ComponentMod.renderToReadableStream(\n        firstAttemptRSCPayload,\n        clientReferenceManifest.clientModules,\n        {\n          signal: firstAttemptServerController.signal,\n          onError: () => {},\n        }\n      )\n      return asHaltedStream(stream, firstAttemptServerController.signal)\n    },\n    () => {\n      firstAttemptServerController.abort()\n    }\n  )\n\n  if (serverDynamicTracking.syncDynamicErrorWithStack) {\n    // If we had a sync dynamic error then we need to retry without\n    reactServerStream.cancel()\n\n    const secondAttemptServerController = new AbortController()\n    serverDynamicTracking = createDynamicTrackingState(false)\n\n    const secondAttemptServerPrerenderStore: PrerenderStore = {\n      type: 'prerender',\n      phase: 'render',\n      implicitTags: [],\n      renderSignal: secondAttemptServerController.signal,\n      cacheSignal: null,\n      // During the prospective render we don't want to synchronously abort on dynamic access\n      // because it could prevent us from discovering all caches in siblings. So we omit the controller\n      // from the prerender store this time.\n      controller: secondAttemptServerController,\n      // With PPR during Prerender we don't need to track individual dynamic reasons\n      // because we will always do a final render after caches have filled and we\n      // will track it again there\n      dynamicTracking: serverDynamicTracking,\n      revalidate: INFINITE_CACHE,\n      expire: INFINITE_CACHE,\n      stale: INFINITE_CACHE,\n      tags: [],\n      // Dev only property that allows certain logs to be supressed\n      validating: true,\n    }\n\n    const secondAttemptRSCPayload = await workUnitAsyncStorage.run(\n      secondAttemptServerPrerenderStore,\n      getRSCPayload,\n      tree,\n      ctx,\n      isNotFound\n    )\n\n    reactServerStream = await workUnitAsyncStorage.run(\n      secondAttemptServerPrerenderStore,\n      scheduleInSequentialTasks,\n      () => {\n        const stream = ComponentMod.renderToReadableStream(\n          secondAttemptRSCPayload,\n          clientReferenceManifest.clientModules,\n          {\n            signal: secondAttemptServerController.signal,\n            onError: () => {},\n          }\n        )\n        return asHaltedStream(stream, secondAttemptServerController.signal)\n      },\n      () => {\n        secondAttemptServerController.abort()\n      }\n    )\n  }\n\n  const [warmupStream, renderStream] = reactServerStream.tee()\n\n  await warmFlightResponse(warmupStream, clientReferenceManifest)\n\n  const { ServerInsertedHTMLProvider } = createServerInsertedHTML()\n  const nonce = '1'\n\n  const prerender = require('react-dom/static.edge')\n    .prerender as (typeof import('react-dom/static.edge'))['prerender']\n\n  let clientDynamicTracking = createDynamicTrackingState(false)\n  let dynamicValidation = createDynamicValidationState()\n\n  function SSROnError(err: unknown, errorInfo?: ErrorInfo) {\n    if (\n      isPrerenderInterruptedError(err) ||\n      firstAttemptServerController.signal.aborted\n    ) {\n      const componentStack: string | undefined = (errorInfo as any)\n        .componentStack\n      if (typeof componentStack === 'string' && err instanceof Error) {\n        trackAllowedDynamicAccess(\n          route,\n          componentStack,\n          dynamicValidation,\n          serverDynamicTracking,\n          clientDynamicTracking\n        )\n      }\n      return undefined\n    }\n    return undefined\n  }\n\n  const firstAttemptClientController = new AbortController()\n  const firstAttemptClientPrerenderStore: PrerenderStore = {\n    type: 'prerender',\n    phase: 'render',\n    implicitTags: [],\n    renderSignal: firstAttemptClientController.signal,\n    // For HTML Generation we don't need to track cache reads (RSC only)\n    cacheSignal: null,\n    // We expect the SSR render to complete in a single Task and need to be able to synchronously abort\n    // When you use APIs that are considered dynamic or synchronous IO.\n    controller: firstAttemptClientController,\n    // We do track dynamic access because searchParams and certain hooks can still be\n    // dynamic during SSR\n    dynamicTracking: clientDynamicTracking,\n    revalidate: INFINITE_CACHE,\n    expire: INFINITE_CACHE,\n    stale: INFINITE_CACHE,\n    tags: [],\n    validating: true,\n  }\n\n  const [firstAttemptReactServerStream, secondAttemptReactServerStream] =\n    renderStream.tee()\n  let hadException = false\n  try {\n    await prerenderAndAbortInSequentialTasks(\n      async () => {\n        workUnitAsyncStorage\n          .run(\n            firstAttemptClientPrerenderStore,\n            prerender,\n            <App\n              reactServerStream={firstAttemptReactServerStream}\n              preinitScripts={() => {}}\n              clientReferenceManifest={clientReferenceManifest}\n              ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n              nonce={nonce}\n            />,\n            {\n              signal: firstAttemptClientController.signal,\n              onError: SSROnError,\n            }\n          )\n          .catch(() => {})\n        return null\n      },\n      () => {\n        firstAttemptClientController.abort()\n      }\n    ).catch(() => {})\n  } catch (err: unknown) {\n    if (firstAttemptClientController.signal.aborted) {\n      // We aborted the render normally and can ignore this error\n    } else {\n      hadException = true\n      // We're going to retry to so we normally would suppress this error but\n      // when verbose logging is on we print it\n      if (process.env.__NEXT_VERBOSE_LOGGING) {\n        printDebugThrownValueForProspectiveRender(err, route)\n      }\n    }\n  }\n\n  if (hadException || clientDynamicTracking.syncDynamicErrorWithStack) {\n    // We threw something unexpected in the initial render prior to aborting or\n    // we observed a sync abort. In either case we attempt a final render to see if\n    // the error was caused by module loading scope or some other transient cause\n\n    // Reset tracking objects\n    clientDynamicTracking = createDynamicTrackingState(false)\n    dynamicValidation = createDynamicValidationState()\n\n    const secondAttemptClientController = new AbortController()\n    const secondAttemptClientPrerenderStore: PrerenderStore = {\n      type: 'prerender',\n      phase: 'render',\n      implicitTags: [],\n      renderSignal: secondAttemptClientController.signal,\n      // For HTML Generation we don't need to track cache reads (RSC only)\n      cacheSignal: null,\n      // We expect the SSR render to complete in a single Task and need to be able to synchronously abort\n      // When you use APIs that are considered dynamic or synchronous IO.\n      controller: secondAttemptClientController,\n      // We do track dynamic access because searchParams and certain hooks can still be\n      // dynamic during SSR\n      dynamicTracking: clientDynamicTracking,\n      revalidate: INFINITE_CACHE,\n      expire: INFINITE_CACHE,\n      stale: INFINITE_CACHE,\n      tags: [],\n      validating: true,\n    }\n\n    try {\n      await prerenderAndAbortInSequentialTasks(\n        async () => {\n          workUnitAsyncStorage\n            .run(\n              secondAttemptClientPrerenderStore,\n              prerender,\n              <App\n                reactServerStream={secondAttemptReactServerStream}\n                preinitScripts={() => {}}\n                clientReferenceManifest={clientReferenceManifest}\n                ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n                nonce={nonce}\n              />,\n              {\n                signal: secondAttemptClientController.signal,\n                onError: SSROnError,\n              }\n            )\n            .catch(() => {})\n          return null\n        },\n        () => {\n          secondAttemptClientController.abort()\n        }\n      )\n    } catch (err) {\n      if (secondAttemptClientController.signal.aborted) {\n        // We aborted the render normally and can ignore this error\n      } else {\n        // We errored in the shell. This should also mean the normal render errored\n        // in the same place so we omit this log except when verbose mode is on.\n        if (process.env.__NEXT_VERBOSE_LOGGING) {\n          printDebugThrownValueForProspectiveRender(err, route)\n        }\n      }\n    }\n  }\n\n  function LogDynamicValidation() {\n    try {\n      throwIfDisallowedDynamic(\n        route,\n        dynamicValidation,\n        serverDynamicTracking,\n        clientDynamicTracking\n      )\n    } catch {}\n    return null\n  }\n\n  resolveValidation(<LogDynamicValidation />)\n}\n\nfunction asHaltedStream(\n  stream: ReadableStream<Uint8Array>,\n  signal: AbortSignal\n) {\n  return new ReadableStream({\n    start(controller: ReadableStreamDefaultController<Uint8Array>) {\n      const reader = stream.getReader()\n      function errorStream(err: unknown) {\n        controller.error(err)\n        reader.cancel(err)\n      }\n      function progressStream({\n        done,\n        value,\n      }: ReadableStreamReadResult<Uint8Array>) {\n        if (done) {\n          // We don't actually close the outer stream because\n          // we might have aborted the inner one but we are simulating a halt\n          return\n        } else {\n          if (!signal.aborted) {\n            controller.enqueue(value)\n            reader.read().then(progressStream, errorStream)\n          } else {\n            // If the signal aborted we leave the stream open but no longer pull from the upstream\n            reader.cancel()\n          }\n        }\n      }\n      reader.read().then(progressStream, errorStream)\n    },\n  })\n}\n\ntype PrerenderToStreamResult = {\n  stream: ReadableStream<Uint8Array>\n  digestErrorsMap: Map<string, DigestedError>\n  ssrErrors: Array<unknown>\n  dynamicAccess?: null | Array<DynamicAccess>\n  collectedRevalidate: number\n  collectedExpire: number\n  collectedStale: number\n  collectedTags: null | string[]\n}\n\n/**\n * Determines whether we should generate static flight data.\n */\nfunction shouldGenerateStaticFlightData(workStore: WorkStore): boolean {\n  const { fallbackRouteParams, isStaticGeneration } = workStore\n  if (!isStaticGeneration) return false\n\n  if (fallbackRouteParams && fallbackRouteParams.size > 0) {\n    return false\n  }\n\n  return true\n}\n\nasync function prerenderToStream(\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  ctx: AppRenderContext,\n  metadata: AppPageRenderResultMetadata,\n  workStore: WorkStore,\n  tree: LoaderTree\n): Promise<PrerenderToStreamResult> {\n  ctx.requestStore.phase = 'render'\n\n  // When prerendering formState is always null. We still include it\n  // because some shared APIs expect a formState value and this is slightly\n  // more explicit than making it an optional function argument\n  const formState = null\n\n  const renderOpts = ctx.renderOpts\n  const ComponentMod = renderOpts.ComponentMod\n  // TODO: fix this typescript\n  const clientReferenceManifest = renderOpts.clientReferenceManifest!\n  const fallbackRouteParams = workStore.fallbackRouteParams\n\n  const { ServerInsertedHTMLProvider, renderServerInsertedHTML } =\n    createServerInsertedHTML()\n\n  const tracingMetadata = getTracedMetadata(\n    getTracer().getTracePropagationData(),\n    renderOpts.experimental.clientTraceMetadata\n  )\n\n  const polyfills: JSX.IntrinsicElements['script'][] =\n    renderOpts.buildManifest.polyfillFiles\n      .filter(\n        (polyfill) =>\n          polyfill.endsWith('.js') && !polyfill.endsWith('.module.js')\n      )\n      .map((polyfill) => ({\n        src: `${ctx.assetPrefix}/_next/${polyfill}${getAssetQueryString(\n          ctx,\n          false\n        )}`,\n        integrity: renderOpts.subresourceIntegrityManifest?.[polyfill],\n        crossOrigin: renderOpts.crossOrigin,\n        noModule: true,\n        nonce: ctx.nonce,\n      }))\n\n  const [preinitScripts, bootstrapScript] = getRequiredScripts(\n    renderOpts.buildManifest,\n    // Why is assetPrefix optional on renderOpts?\n    // @TODO make it default empty string on renderOpts and get rid of it from ctx\n    ctx.assetPrefix,\n    renderOpts.crossOrigin,\n    renderOpts.subresourceIntegrityManifest,\n    getAssetQueryString(ctx, true),\n    ctx.nonce,\n    renderOpts.page\n  )\n\n  const reactServerErrorsByDigest: Map<string, DigestedError> = new Map()\n  // We don't report errors during prerendering through our instrumentation hooks\n  const silenceLogger = !!renderOpts.experimental.isRoutePPREnabled\n  function onHTMLRenderRSCError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'react-server-components')\n    )\n  }\n  const serverComponentsErrorHandler = createHTMLReactServerErrorHandler(\n    !!renderOpts.dev,\n    !!renderOpts.nextExport,\n    reactServerErrorsByDigest,\n    silenceLogger,\n    onHTMLRenderRSCError\n  )\n\n  function onHTMLRenderSSRError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'server-rendering')\n    )\n  }\n  const allCapturedErrors: Array<unknown> = []\n  const htmlRendererErrorHandler = createHTMLErrorHandler(\n    !!renderOpts.dev,\n    !!renderOpts.nextExport,\n    reactServerErrorsByDigest,\n    allCapturedErrors,\n    silenceLogger,\n    onHTMLRenderSSRError\n  )\n\n  let reactServerPrerenderResult: null | ReactServerPrerenderResult = null\n  const setHeader = (name: string, value: string | string[]) => {\n    res.setHeader(name, value)\n\n    metadata.headers ??= {}\n    metadata.headers[name] = res.getHeader(name)\n\n    return res\n  }\n\n  let prerenderStore: PrerenderStore | null = null\n\n  try {\n    if (renderOpts.experimental.dynamicIO) {\n      if (renderOpts.experimental.isRoutePPREnabled) {\n        /**\n         * dynamicIO with PPR\n         *\n         * The general approach is to render the RSC stream first allowing any cache reads to resolve.\n         * Once we have settled all cache reads we restart the render and abort after a single Task.\n         *\n         * Unlike with the non PPR case we can't synchronously abort the render when a dynamic API is used\n         * during the initial render because we need to ensure all caches can be filled as part of the initial Task\n         * and a synchronous abort might prevent us from filling all caches.\n         *\n         * Once the render is complete we allow the SSR render to finish and use a combination of the postponed state\n         * and the reactServerIsDynamic value to determine how to treat the resulting render\n         */\n\n        const PRERENDER_COMPLETE = 'NEXT_PRERENDER_COMPLETE'\n        const abortReason = new Error(PRERENDER_COMPLETE)\n\n        const prospectiveRenderFlightController = new AbortController()\n        const prospectiveRenderFlightSignal =\n          prospectiveRenderFlightController.signal\n        const cacheSignal = new CacheSignal()\n\n        const prospectiveRenderPrerenderStore: PrerenderStore =\n          (prerenderStore = {\n            type: 'prerender',\n            phase: 'render',\n            implicitTags: ctx.requestStore.implicitTags,\n            renderSignal: prospectiveRenderFlightSignal,\n            cacheSignal,\n            // During the prospective render we don't want to synchronously abort on dynamic access\n            // because it could prevent us from discovering all caches in siblings. So we omit the controller\n            // from the prerender store this time.\n            controller: null,\n            // With PPR during Prerender we don't need to track individual dynamic reasons\n            // because we will always do a final render after caches have filled and we\n            // will track it again there\n            dynamicTracking: null,\n            revalidate: INFINITE_CACHE,\n            expire: INFINITE_CACHE,\n            stale: INFINITE_CACHE,\n            tags: [...ctx.requestStore.implicitTags],\n          })\n\n        let reactServerIsDynamic = false\n        function prospectiveRenderOnError(err: unknown) {\n          if (isPrerenderInterruptedError(err)) {\n            reactServerIsDynamic = true\n            return err.digest\n          } else if (prospectiveRenderFlightSignal.aborted) {\n            reactServerIsDynamic = true\n            return PRERENDER_COMPLETE\n          } else if (\n            process.env.NEXT_DEBUG_BUILD ||\n            process.env.__NEXT_VERBOSE_LOGGING\n          ) {\n            printDebugThrownValueForProspectiveRender(err, workStore.route)\n          }\n          // We don't track errors during the prospective render because we will\n          // always do a final render and we cannot infer the errors from this render\n          // are relevant to the final result\n        }\n\n        // We're not going to use the result of this render because the only time it could be used\n        // is if it completes in a microtask and that's likely very rare for any non-trivial app\n        const firstAttemptRSCPayload = await workUnitAsyncStorage.run(\n          prospectiveRenderPrerenderStore,\n          getRSCPayload,\n          tree,\n          ctx,\n          res.statusCode === 404\n        )\n\n        ;(\n          workUnitAsyncStorage.run(\n            // The store to scope\n            prospectiveRenderPrerenderStore,\n            // The function to run\n            ComponentMod.prerender,\n            // ... the arguments for the function to run\n            firstAttemptRSCPayload,\n            clientReferenceManifest.clientModules,\n            {\n              onError: prospectiveRenderOnError,\n              // we don't care to track postpones during the prospective render because we need\n              // to always do a final render anyway\n              onPostpone: undefined,\n              signal: prospectiveRenderFlightSignal,\n            }\n          ) as Promise<ReactServerPrerenderResolveToType>\n        ).catch((err) => {\n          if (\n            (process.env.NEXT_DEBUG_BUILD ||\n              process.env.__NEXT_VERBOSE_LOGGING) &&\n            !prospectiveRenderFlightController.signal.aborted &&\n            !isPrerenderInterruptedError(err) &&\n            !isDynamicServerError(err)\n          ) {\n            printDebugThrownValueForProspectiveRender(err, workStore.route)\n          }\n        })\n\n        // When this resolves the cache has no inflight reads and we can ascertain the dynamic outcome\n        await cacheSignal.cacheReady()\n        prospectiveRenderFlightController.abort(abortReason)\n\n        // When PPR is enabled we don't synchronously abort the render when performing a prospective render\n        // because it might prevent us from discovering all caches during the render which is essential\n        // when we perform the second single-task render.\n\n        // Reset the dynamic IO state for the final render\n        reactServerIsDynamic = false\n        const finalRenderFlightController = new AbortController()\n        const finalRenderFlightSignal = finalRenderFlightController.signal\n        const serverDynamicTracking = createDynamicTrackingState(\n          renderOpts.isDebugDynamicAccesses\n        )\n\n        const finalRenderPrerenderStore: PrerenderStore = (prerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: ctx.requestStore.implicitTags,\n          renderSignal: finalRenderFlightSignal,\n          // During the final prerender we don't need to track cache access so we omit the signal\n          cacheSignal: null,\n          // During the final render we do want to abort synchronously on dynamic access so we\n          // include the flight controller in the store.\n          controller: finalRenderFlightController,\n          dynamicTracking: serverDynamicTracking,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...ctx.requestStore.implicitTags],\n        })\n\n        function finalRenderOnError(err: unknown) {\n          if (isPrerenderInterruptedError(err)) {\n            reactServerIsDynamic = true\n            return err.digest\n          } else if (finalRenderFlightSignal.aborted) {\n            reactServerIsDynamic = true\n            return PRERENDER_COMPLETE\n          }\n\n          return serverComponentsErrorHandler(err)\n        }\n\n        const finalAttemptRSCPayload = await workUnitAsyncStorage.run(\n          finalRenderPrerenderStore,\n          getRSCPayload,\n          tree,\n          ctx,\n          res.statusCode === 404\n        )\n        const reactServerResult = (reactServerPrerenderResult =\n          await createReactServerPrerenderResult(\n            prerenderAndAbortInSequentialTasks(\n              () =>\n                workUnitAsyncStorage.run(\n                  // The store to scope\n                  finalRenderPrerenderStore,\n                  // The function to run\n                  ComponentMod.prerender,\n                  // ... the arguments for the function to run\n                  finalAttemptRSCPayload,\n                  clientReferenceManifest.clientModules,\n                  {\n                    onError: finalRenderOnError,\n                    signal: finalRenderFlightSignal,\n                  }\n                ),\n              () => {\n                finalRenderFlightController.abort(abortReason)\n              }\n            )\n          ))\n\n        await warmFlightResponse(\n          reactServerResult.asStream(),\n          clientReferenceManifest\n        )\n\n        let clientDynamicTracking = createDynamicTrackingState(\n          renderOpts.isDebugDynamicAccesses\n        )\n        const SSRController = new AbortController()\n        const ssrPrerenderStore: PrerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: ctx.requestStore.implicitTags,\n          renderSignal: SSRController.signal,\n          // For HTML Generation we don't need to track cache reads (RSC only)\n          cacheSignal: null,\n          // We don't want to abort synchronously because if there is a sync bailout we\n          // want to discover all that we can within the prerender task.\n          controller: null,\n          // We do track dynamic access because searchParams and certain hooks can still be\n          // dynamic during SSR\n          dynamicTracking: clientDynamicTracking,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...ctx.requestStore.implicitTags],\n        }\n        let SSRIsDynamic = false\n        let dynamicValidation = createDynamicValidationState()\n        function SSROnError(err: unknown, errorInfo: ErrorInfo) {\n          if (\n            isPrerenderInterruptedError(err) ||\n            SSRController.signal.aborted\n          ) {\n            SSRIsDynamic = true\n\n            const componentStack: string | undefined = (errorInfo as any)\n              .componentStack\n            if (typeof componentStack === 'string') {\n              trackAllowedDynamicAccess(\n                workStore.route,\n                componentStack,\n                dynamicValidation,\n                serverDynamicTracking,\n                clientDynamicTracking\n              )\n            }\n            return\n          }\n\n          return htmlRendererErrorHandler(err, errorInfo)\n        }\n\n        const prerender = require('react-dom/static.edge')\n          .prerender as (typeof import('react-dom/static.edge'))['prerender']\n        let { prelude, postponed } = await prerenderAndAbortInSequentialTasks(\n          () =>\n            workUnitAsyncStorage.run(\n              ssrPrerenderStore,\n              prerender,\n              <App\n                reactServerStream={reactServerResult.asUnclosingStream()}\n                preinitScripts={preinitScripts}\n                clientReferenceManifest={clientReferenceManifest}\n                ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n                nonce={ctx.nonce}\n              />,\n              {\n                signal: SSRController.signal,\n                onError: SSROnError,\n                onHeaders: (headers: Headers) => {\n                  headers.forEach((value, key) => {\n                    setHeader(key, value)\n                  })\n                },\n                maxHeadersLength: renderOpts.reactMaxHeadersLength,\n                // When debugging the static shell, client-side rendering should be\n                // disabled to prevent blanking out the page.\n                bootstrapScripts: renderOpts.isDebugStaticShell\n                  ? []\n                  : [bootstrapScript],\n              }\n            ),\n          () => {\n            SSRController.abort(abortReason)\n          }\n        )\n\n        if (clientDynamicTracking.syncDynamicErrorWithStack) {\n          // If our SSR render produced it's own sync bailout we need to try again.\n          // It's possible that we loaded a module while performed a sync bailout\n          // however module scope should really be excluded from the prerender scope.\n          // To simulate this we simply render a second time. If the sync API was in module\n          // scope it won't be accessed again but if it was in a component scope it will be\n\n          // Reset tracking objects\n          clientDynamicTracking = createDynamicTrackingState(\n            renderOpts.isDebugDynamicAccesses\n          )\n          dynamicValidation = createDynamicValidationState()\n          SSRIsDynamic = false\n\n          const finalSSRController = new AbortController()\n          const finalSSRPrerenderStore: PrerenderStore = {\n            type: 'prerender',\n            phase: 'render',\n            implicitTags: ctx.requestStore.implicitTags,\n            renderSignal: finalSSRController.signal,\n            // For HTML Generation we don't need to track cache reads (RSC only)\n            cacheSignal: null,\n            controller: finalSSRController,\n            // We do track dynamic access because searchParams and certain hooks can still be\n            // dynamic during SSR\n            dynamicTracking: clientDynamicTracking,\n            revalidate: INFINITE_CACHE,\n            expire: INFINITE_CACHE,\n            stale: INFINITE_CACHE,\n            tags: [...ctx.requestStore.implicitTags],\n          }\n\n          ;({ prelude, postponed } = await prerenderAndAbortInSequentialTasks(\n            () =>\n              workUnitAsyncStorage.run(\n                finalSSRPrerenderStore,\n                prerender,\n                <App\n                  reactServerStream={reactServerResult.asUnclosingStream()}\n                  preinitScripts={preinitScripts}\n                  clientReferenceManifest={clientReferenceManifest}\n                  ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n                  nonce={ctx.nonce}\n                />,\n                {\n                  signal: finalSSRController.signal,\n                  onError: SSROnError,\n                  onHeaders: (headers: Headers) => {\n                    headers.forEach((value, key) => {\n                      setHeader(key, value)\n                    })\n                  },\n                  maxHeadersLength: renderOpts.reactMaxHeadersLength,\n                  // When debugging the static shell, client-side rendering should be\n                  // disabled to prevent blanking out the page.\n                  bootstrapScripts: renderOpts.isDebugStaticShell\n                    ? []\n                    : [bootstrapScript],\n                }\n              ),\n            () => {\n              finalSSRController.abort(abortReason)\n            }\n          ))\n        }\n\n        throwIfDisallowedDynamic(\n          workStore.route,\n          dynamicValidation,\n          serverDynamicTracking,\n          clientDynamicTracking\n        )\n\n        const getServerInsertedHTML = makeGetServerInsertedHTML({\n          polyfills,\n          renderServerInsertedHTML,\n          serverCapturedErrors: allCapturedErrors,\n          basePath: renderOpts.basePath,\n          tracingMetadata: tracingMetadata,\n        })\n\n        metadata.flightData = await streamToBuffer(reactServerResult.asStream())\n\n        if (SSRIsDynamic || reactServerIsDynamic) {\n          if (postponed != null) {\n            // Dynamic HTML case\n            metadata.postponed = getDynamicHTMLPostponedState(\n              postponed,\n              fallbackRouteParams\n            )\n          } else {\n            // Dynamic Data case\n            metadata.postponed = getDynamicDataPostponedState()\n          }\n          reactServerResult.consume()\n          return {\n            digestErrorsMap: reactServerErrorsByDigest,\n            ssrErrors: allCapturedErrors,\n            stream: await continueDynamicPrerender(prelude, {\n              getServerInsertedHTML,\n            }),\n            dynamicAccess: consumeDynamicAccess(\n              serverDynamicTracking,\n              clientDynamicTracking\n            ),\n            // TODO: Should this include the SSR pass?\n            collectedRevalidate: finalRenderPrerenderStore.revalidate,\n            collectedExpire: finalRenderPrerenderStore.expire,\n            collectedStale: finalRenderPrerenderStore.stale,\n            collectedTags: finalRenderPrerenderStore.tags,\n          }\n        } else {\n          // Static case\n          if (workStore.forceDynamic) {\n            throw new StaticGenBailoutError(\n              'Invariant: a Page with `dynamic = \"force-dynamic\"` did not trigger the dynamic pathway. This is a bug in Next.js'\n            )\n          }\n\n          let htmlStream = prelude\n          if (postponed != null) {\n            // We postponed but nothing dynamic was used. We resume the render now and immediately abort it\n            // so we can set all the postponed boundaries to client render mode before we store the HTML response\n            const resume = require('react-dom/server.edge')\n              .resume as (typeof import('react-dom/server.edge'))['resume']\n\n            // We don't actually want to render anything so we just pass a stream\n            // that never resolves. The resume call is going to abort immediately anyway\n            const foreverStream = new ReadableStream<Uint8Array>()\n\n            const resumeStream = await resume(\n              <App\n                reactServerStream={foreverStream}\n                preinitScripts={() => {}}\n                clientReferenceManifest={clientReferenceManifest}\n                ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n                nonce={ctx.nonce}\n              />,\n              JSON.parse(JSON.stringify(postponed)),\n              {\n                signal: createPostponedAbortSignal('static prerender resume'),\n                onError: htmlRendererErrorHandler,\n                nonce: ctx.nonce,\n              }\n            )\n\n            // First we write everything from the prerender, then we write everything from the aborted resume render\n            htmlStream = chainStreams(prelude, resumeStream)\n          }\n\n          return {\n            digestErrorsMap: reactServerErrorsByDigest,\n            ssrErrors: allCapturedErrors,\n            stream: await continueStaticPrerender(htmlStream, {\n              inlinedDataStream: createInlinedDataReadableStream(\n                reactServerResult.consumeAsStream(),\n                ctx.nonce,\n                formState\n              ),\n              getServerInsertedHTML,\n            }),\n            dynamicAccess: consumeDynamicAccess(\n              serverDynamicTracking,\n              clientDynamicTracking\n            ),\n            // TODO: Should this include the SSR pass?\n            collectedRevalidate: finalRenderPrerenderStore.revalidate,\n            collectedExpire: finalRenderPrerenderStore.expire,\n            collectedStale: finalRenderPrerenderStore.stale,\n            collectedTags: finalRenderPrerenderStore.tags,\n          }\n        }\n      } else {\n        /**\n         * dynamicIO without PPR\n         *\n         * The general approach is to render the RSC tree first allowing for any inflight\n         * caches to resolve. Once we have settled inflight caches we can check and see if any\n         * synchronous dynamic APIs were used. If so we don't need to bother doing anything more\n         * because the page will be dynamic on re-render anyway\n         *\n         * If no sync dynamic APIs were used we then re-render and abort after a single Task.\n         * If the render errors we know that the page has some dynamic IO. This assumes and relies\n         * upon caches reading from a in process memory cache and resolving in a microtask. While this\n         * is true from our own default cache implementation and if you don't exceed our LRU size it\n         * might not be true for custom cache implementations.\n         *\n         * Future implementations can do some different strategies during build like using IPC to\n         * synchronously fill caches during this special rendering mode. For now this heuristic should work\n         */\n\n        const cache = workStore.incrementalCache\n        if (!cache) {\n          throw new Error(\n            'Expected incremental cache to exist. This is a bug in Next.js'\n          )\n        }\n\n        const PRERENDER_COMPLETE = 'NEXT_PRERENDER_COMPLETE'\n        const abortReason = new Error(PRERENDER_COMPLETE)\n\n        // We need to scope the dynamic IO state per render because we don't want to leak\n        // details between the prospective render and the final render\n        const prospectiveRenderFlightController = new AbortController()\n        const prospectiveRenderFlightSignal =\n          prospectiveRenderFlightController.signal\n\n        const cacheSignal = new CacheSignal()\n        const prospectiveRenderPrerenderStore: PrerenderStore =\n          (prerenderStore = {\n            type: 'prerender',\n            phase: 'render',\n            implicitTags: ctx.requestStore.implicitTags,\n            renderSignal: prospectiveRenderFlightSignal,\n            cacheSignal,\n            controller: null,\n            dynamicTracking: null,\n            revalidate: INFINITE_CACHE,\n            expire: INFINITE_CACHE,\n            stale: INFINITE_CACHE,\n            tags: [...ctx.requestStore.implicitTags],\n          })\n\n        const firstAttemptRSCPayload = await workUnitAsyncStorage.run(\n          prospectiveRenderPrerenderStore,\n          getRSCPayload,\n          tree,\n          ctx,\n          res.statusCode === 404\n        )\n\n        let reactServerIsDynamic = false\n\n        function prospectiveRenderOnError(err: unknown) {\n          if (isPrerenderInterruptedError(err)) {\n            reactServerIsDynamic = true\n            return err.digest\n          } else if (prospectiveRenderFlightSignal.aborted) {\n            reactServerIsDynamic = true\n            return PRERENDER_COMPLETE\n          } else if (process.env.NEXT_DEBUG_BUILD) {\n            printDebugThrownValueForProspectiveRender(err, workStore.route)\n          }\n          // We don't track errors during the prospective render because we will\n          // always do a final render and we cannot infer the errors from this render\n          // are relevant to the final result\n        }\n\n        try {\n          const prospectiveStream = workUnitAsyncStorage.run(\n            // The store to scope\n            prospectiveRenderPrerenderStore,\n            // The function to run\n            ComponentMod.renderToReadableStream,\n            // ... the arguments for the function to run\n            firstAttemptRSCPayload,\n            clientReferenceManifest.clientModules,\n            {\n              onError: prospectiveRenderOnError,\n              signal: prospectiveRenderFlightSignal,\n            }\n          ) as ReadableStream<Uint8Array>\n\n          // When this resolves the cache has no inflight reads and we can ascertain the dynamic outcome\n          await cacheSignal.cacheReady()\n          // Even though we could detect whether a sync dynamic API was used we still need to render SSR to\n          // do error validation so we just abort and re-render.\n          prospectiveRenderFlightController.abort(abortReason)\n\n          await warmFlightResponse(prospectiveStream, clientReferenceManifest)\n        } catch (err) {\n          if (\n            process.env.NEXT_DEBUG_BUILD &&\n            err !== abortReason &&\n            !isPrerenderInterruptedError(err) &&\n            !isDynamicServerError(err)\n          ) {\n            printDebugThrownValueForProspectiveRender(err, workStore.route)\n          }\n        }\n\n        // Reset the prerenderState because we are going to retry the render\n        const finalRenderFlightController = new AbortController()\n        const finalRenderFlightSignal = finalRenderFlightController.signal\n        let serverDynamicTracking = createDynamicTrackingState(\n          renderOpts.isDebugDynamicAccesses\n        )\n        reactServerIsDynamic = false\n        let SSRIsDynamic = false\n\n        const finalRenderPrerenderStore: PrerenderStore = (prerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: ctx.requestStore.implicitTags,\n          renderSignal: finalRenderFlightSignal,\n          // During the final prerender we don't need to track cache access so we omit the signal\n          cacheSignal: null,\n          controller: finalRenderFlightController,\n          dynamicTracking: serverDynamicTracking,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...ctx.requestStore.implicitTags],\n        })\n\n        let clientDynamicTracking = createDynamicTrackingState(\n          renderOpts.isDebugDynamicAccesses\n        )\n        const SSRController = new AbortController()\n        const ssrPrerenderStore: PrerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: ctx.requestStore.implicitTags,\n          renderSignal: SSRController.signal,\n          // For HTML Generation we don't need to track cache reads (RSC only)\n          cacheSignal: null,\n          // During the initial SSR render we won't abort for sync dynamic access becuase\n          // we want to let all modules load (this is like filling a cache). If there was\n          // something sync dynamic we'll do another render to abort it.\n          controller: null,\n          // We do track dynamic access because searchParams and certain hooks can still be\n          // dynamic during SSR\n          dynamicTracking: clientDynamicTracking,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...ctx.requestStore.implicitTags],\n        }\n\n        const finalAttemptRSCPayload = await workUnitAsyncStorage.run(\n          finalRenderPrerenderStore,\n          getRSCPayload,\n          tree,\n          ctx,\n          res.statusCode === 404\n        )\n\n        function finalRenderOnError(err: unknown) {\n          if (isPrerenderInterruptedError(err)) {\n            reactServerIsDynamic = true\n            return err.digest\n          } else if (finalRenderFlightSignal.aborted) {\n            reactServerIsDynamic = true\n            return PRERENDER_COMPLETE\n          }\n\n          return serverComponentsErrorHandler(err)\n        }\n\n        let dynamicValidation = createDynamicValidationState()\n        function SSROnError(err: unknown, errorInfo?: ErrorInfo) {\n          if (\n            isPrerenderInterruptedError(err) ||\n            SSRController.signal.aborted\n          ) {\n            SSRIsDynamic = true\n\n            const componentStack: string | undefined = (errorInfo as any)\n              .componentStack\n            if (typeof componentStack === 'string') {\n              trackAllowedDynamicAccess(\n                workStore.route,\n                componentStack,\n                dynamicValidation,\n                serverDynamicTracking,\n                clientDynamicTracking\n              )\n            }\n            return\n          }\n\n          return htmlRendererErrorHandler(err, errorInfo)\n        }\n\n        let reactServerStream: ReadableStream<Uint8Array>\n        let htmlStream\n        try {\n          htmlStream = await prerenderAndAbortInSequentialTasks(\n            async () => {\n              const teedStream = (\n                workUnitAsyncStorage.run(\n                  // The store to scope\n                  finalRenderPrerenderStore,\n                  // The function to run\n                  ComponentMod.renderToReadableStream,\n                  // ... the arguments for the function to run\n                  finalAttemptRSCPayload,\n                  clientReferenceManifest.clientModules,\n                  {\n                    onError: finalRenderOnError,\n                    signal: finalRenderFlightSignal,\n                  }\n                ) as ReadableStream<Uint8Array>\n              ).tee()\n\n              reactServerStream = teedStream[0]\n              const rscForSSRStream = teedStream[1]\n\n              const prerender = require('react-dom/static.edge')\n                .prerender as (typeof import('react-dom/static.edge'))['prerender']\n              const { prelude } = await workUnitAsyncStorage.run(\n                ssrPrerenderStore,\n                prerender,\n                <App\n                  reactServerStream={rscForSSRStream}\n                  preinitScripts={preinitScripts}\n                  clientReferenceManifest={clientReferenceManifest}\n                  ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n                  nonce={ctx.nonce}\n                />,\n                {\n                  signal: SSRController.signal,\n                  onError: SSROnError,\n                  // When debugging the static shell, client-side rendering should be\n                  // disabled to prevent blanking out the page.\n                  bootstrapScripts: renderOpts.isDebugStaticShell\n                    ? []\n                    : [bootstrapScript],\n                }\n              )\n              return prelude\n            },\n            () => {\n              SSRController.abort(abortReason)\n              finalRenderFlightController.abort(abortReason)\n            }\n          )\n        } catch (err) {\n          if (finalRenderFlightSignal.aborted || SSRController.signal.aborted) {\n            // We aborted with an incomplete shell. We'll handle this below with the handling\n            // for dynamic.\n          } else {\n            // We have some other kind of shell error, we want to bubble this up to be handled\n            throw err\n          }\n        }\n\n        if (clientDynamicTracking.syncDynamicErrorWithStack) {\n          // If our SSR render produced it's own sync bailout we need to try again.\n          // It's possible that we loaded a module while performed a sync bailout\n          // however module scope should really be excluded from the prerender scope.\n          // To simulate this we simply render a second time. If the sync API was in module\n          // scope it won't be accessed again but if it was in a component scope it will be\n\n          // Reset tracking objects\n          clientDynamicTracking = createDynamicTrackingState(\n            renderOpts.isDebugDynamicAccesses\n          )\n          dynamicValidation = createDynamicValidationState()\n          SSRIsDynamic = false\n          reactServerIsDynamic = false\n\n          serverDynamicTracking = createDynamicTrackingState(\n            renderOpts.isDebugDynamicAccesses\n          )\n          const thirdRenderFlightController = new AbortController()\n          const thirdRenderPrerenderStore: PrerenderStore = (prerenderStore = {\n            type: 'prerender',\n            phase: 'render',\n            implicitTags: ctx.requestStore.implicitTags,\n            renderSignal: thirdRenderFlightController.signal,\n            // During the final prerender we don't need to track cache access so we omit the signal\n            cacheSignal: null,\n            controller: thirdRenderFlightController,\n            dynamicTracking: serverDynamicTracking,\n            revalidate: INFINITE_CACHE,\n            expire: INFINITE_CACHE,\n            stale: INFINITE_CACHE,\n            tags: [...ctx.requestStore.implicitTags],\n          })\n\n          const thirdRenderRSCPayload = await workUnitAsyncStorage.run(\n            finalRenderPrerenderStore,\n            getRSCPayload,\n            tree,\n            ctx,\n            res.statusCode === 404\n          )\n\n          const finalSSRController = new AbortController()\n          const finalSSRPrerenderStore: PrerenderStore = {\n            type: 'prerender',\n            phase: 'render',\n            implicitTags: ctx.requestStore.implicitTags,\n            renderSignal: finalSSRController.signal,\n            // For HTML Generation we don't need to track cache reads (RSC only)\n            cacheSignal: null,\n            controller: finalSSRController,\n            // We do track dynamic access because searchParams and certain hooks can still be\n            // dynamic during SSR\n            dynamicTracking: clientDynamicTracking,\n            revalidate: INFINITE_CACHE,\n            expire: INFINITE_CACHE,\n            stale: INFINITE_CACHE,\n            tags: [...ctx.requestStore.implicitTags],\n          }\n\n          try {\n            htmlStream = await prerenderAndAbortInSequentialTasks(\n              () => {\n                const teedStream = (\n                  workUnitAsyncStorage.run(\n                    // The store to scope\n                    thirdRenderPrerenderStore,\n                    // The function to run\n                    ComponentMod.renderToReadableStream,\n                    // ... the arguments for the function to run\n                    thirdRenderRSCPayload,\n                    clientReferenceManifest.clientModules,\n                    {\n                      onError: finalRenderOnError,\n                      signal: thirdRenderFlightController.signal,\n                    }\n                  ) as ReadableStream<Uint8Array>\n                ).tee()\n\n                reactServerStream = teedStream[0]\n                const rscForSSRStream = teedStream[1]\n\n                const renderToReadableStream = require('react-dom/server.edge')\n                  .renderToReadableStream as (typeof import('react-dom/server.edge'))['renderToReadableStream']\n                const pendingHTMLStream = workUnitAsyncStorage.run(\n                  finalSSRPrerenderStore,\n                  renderToReadableStream,\n                  <App\n                    reactServerStream={rscForSSRStream}\n                    preinitScripts={preinitScripts}\n                    clientReferenceManifest={clientReferenceManifest}\n                    ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n                    nonce={ctx.nonce}\n                  />,\n                  {\n                    signal: finalSSRController.signal,\n                    onError: SSROnError,\n                    // When debugging the static shell, client-side rendering should be\n                    // disabled to prevent blanking out the page.\n                    bootstrapScripts: renderOpts.isDebugStaticShell\n                      ? []\n                      : [bootstrapScript],\n                  }\n                )\n                pendingHTMLStream.catch(() => {})\n                return pendingHTMLStream\n              },\n              () => {\n                finalSSRController.abort(abortReason)\n                thirdRenderFlightController.abort(abortReason)\n              }\n            )\n          } catch (err) {\n            if (\n              thirdRenderFlightController.signal.aborted ||\n              finalSSRController.signal.aborted\n            ) {\n              // We aborted with an incomplete shell. We'll handle this below with the handling\n              // for dynamic.\n            } else {\n              // We have some other kind of shell error, we want to bubble this up to be handled\n              throw err\n            }\n          }\n        }\n\n        throwIfDisallowedDynamic(\n          workStore.route,\n          dynamicValidation,\n          serverDynamicTracking,\n          clientDynamicTracking\n        )\n\n        if (SSRIsDynamic) {\n          const dynamicReason = getFirstDynamicReason(clientDynamicTracking)\n          if (dynamicReason) {\n            throw new DynamicServerError(\n              `Route \"${workStore.route}\" couldn't be rendered statically because it used \\`${dynamicReason}\\`. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`\n            )\n          } else {\n            throw new DynamicServerError(\n              `Route \"${workStore.route}\" couldn't be rendered statically it accessed data without explicitly caching it. See more info here: https://nextjs.org/docs/messages/dynamic-io`\n            )\n          }\n        } else if (reactServerIsDynamic) {\n          const dynamicReason = getFirstDynamicReason(serverDynamicTracking)\n          if (dynamicReason) {\n            throw new DynamicServerError(\n              `Route \"${workStore.route}\" couldn't be rendered statically because it used \\`${dynamicReason}\\`. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`\n            )\n          } else {\n            throw new DynamicServerError(\n              `Route \"${workStore.route}\" couldn't be rendered statically it accessed data without explicitly caching it. See more info here: https://nextjs.org/docs/messages/dynamic-io`\n            )\n          }\n        }\n\n        const reactServerResult =\n          await createReactServerPrerenderResultFromRender(reactServerStream!)\n\n        metadata.flightData = await streamToBuffer(reactServerResult.asStream())\n\n        const getServerInsertedHTML = makeGetServerInsertedHTML({\n          polyfills,\n          renderServerInsertedHTML,\n          serverCapturedErrors: allCapturedErrors,\n          basePath: renderOpts.basePath,\n          tracingMetadata: tracingMetadata,\n        })\n        const validateRootLayout = renderOpts.dev\n        return {\n          digestErrorsMap: reactServerErrorsByDigest,\n          ssrErrors: allCapturedErrors,\n          stream: await continueFizzStream(htmlStream!, {\n            inlinedDataStream: createInlinedDataReadableStream(\n              reactServerResult.consumeAsStream(),\n              ctx.nonce,\n              formState\n            ),\n            isStaticGeneration: true,\n            getServerInsertedHTML,\n            serverInsertedHTMLToHead: true,\n            validateRootLayout,\n          }),\n          dynamicAccess: consumeDynamicAccess(\n            serverDynamicTracking,\n            clientDynamicTracking\n          ),\n          // TODO: Should this include the SSR pass?\n          collectedRevalidate: finalRenderPrerenderStore.revalidate,\n          collectedExpire: finalRenderPrerenderStore.expire,\n          collectedStale: finalRenderPrerenderStore.stale,\n          collectedTags: finalRenderPrerenderStore.tags,\n        }\n      }\n    } else if (renderOpts.experimental.isRoutePPREnabled) {\n      // We're statically generating with PPR and need to do dynamic tracking\n      let dynamicTracking = createDynamicTrackingState(\n        renderOpts.isDebugDynamicAccesses\n      )\n      const reactServerPrerenderStore: PrerenderStore = (prerenderStore = {\n        type: 'prerender-ppr',\n        phase: 'render',\n        implicitTags: ctx.requestStore.implicitTags,\n        dynamicTracking,\n        revalidate: INFINITE_CACHE,\n        expire: INFINITE_CACHE,\n        stale: INFINITE_CACHE,\n        tags: [...ctx.requestStore.implicitTags],\n      })\n      const RSCPayload = await workUnitAsyncStorage.run(\n        reactServerPrerenderStore,\n        getRSCPayload,\n        tree,\n        ctx,\n        res.statusCode === 404\n      )\n      const reactServerResult = (reactServerPrerenderResult =\n        await createReactServerPrerenderResultFromRender(\n          workUnitAsyncStorage.run(\n            reactServerPrerenderStore,\n            ComponentMod.renderToReadableStream,\n            // ... the arguments for the function to run\n            RSCPayload,\n            clientReferenceManifest.clientModules,\n            {\n              onError: serverComponentsErrorHandler,\n            }\n          )\n        ))\n\n      const ssrPrerenderStore: PrerenderStore = {\n        type: 'prerender-ppr',\n        phase: 'render',\n        implicitTags: ctx.requestStore.implicitTags,\n        dynamicTracking,\n        revalidate: INFINITE_CACHE,\n        expire: INFINITE_CACHE,\n        stale: INFINITE_CACHE,\n        tags: [...ctx.requestStore.implicitTags],\n      }\n      const prerender = require('react-dom/static.edge')\n        .prerender as (typeof import('react-dom/static.edge'))['prerender']\n      const { prelude, postponed } = await workUnitAsyncStorage.run(\n        ssrPrerenderStore,\n        prerender,\n        <App\n          reactServerStream={reactServerResult.asUnclosingStream()}\n          preinitScripts={preinitScripts}\n          clientReferenceManifest={clientReferenceManifest}\n          ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n          nonce={ctx.nonce}\n        />,\n        {\n          onError: htmlRendererErrorHandler,\n          onHeaders: (headers: Headers) => {\n            headers.forEach((value, key) => {\n              setHeader(key, value)\n            })\n          },\n          maxHeadersLength: renderOpts.reactMaxHeadersLength,\n          // When debugging the static shell, client-side rendering should be\n          // disabled to prevent blanking out the page.\n          bootstrapScripts: renderOpts.isDebugStaticShell\n            ? []\n            : [bootstrapScript],\n        }\n      )\n      const getServerInsertedHTML = makeGetServerInsertedHTML({\n        polyfills,\n        renderServerInsertedHTML,\n        serverCapturedErrors: allCapturedErrors,\n        basePath: renderOpts.basePath,\n        tracingMetadata: tracingMetadata,\n      })\n\n      // After awaiting here we've waited for the entire RSC render to complete. Crucially this means\n      // that when we detect whether we've used dynamic APIs below we know we'll have picked up even\n      // parts of the React Server render that might not be used in the SSR render.\n      const flightData = await streamToBuffer(reactServerResult.asStream())\n\n      if (shouldGenerateStaticFlightData(workStore)) {\n        metadata.flightData = flightData\n      }\n\n      /**\n       * When prerendering there are three outcomes to consider\n       *\n       *   Dynamic HTML:      The prerender has dynamic holes (caused by using Next.js Dynamic Rendering APIs)\n       *                      We will need to resume this result when requests are handled and we don't include\n       *                      any server inserted HTML or inlined flight data in the static HTML\n       *\n       *   Dynamic Data:      The prerender has no dynamic holes but dynamic APIs were used. We will not\n       *                      resume this render when requests are handled but we will generate new inlined\n       *                      flight data since it is dynamic and differences may end up reconciling on the client\n       *\n       *   Static:            The prerender has no dynamic holes and no dynamic APIs were used. We statically encode\n       *                      all server inserted HTML and flight data\n       */\n      // First we check if we have any dynamic holes in our HTML prerender\n      if (accessedDynamicData(dynamicTracking.dynamicAccesses)) {\n        if (postponed != null) {\n          // Dynamic HTML case.\n          metadata.postponed = getDynamicHTMLPostponedState(\n            postponed,\n            fallbackRouteParams\n          )\n        } else {\n          // Dynamic Data case.\n          metadata.postponed = getDynamicDataPostponedState()\n        }\n        // Regardless of whether this is the Dynamic HTML or Dynamic Data case we need to ensure we include\n        // server inserted html in the static response because the html that is part of the prerender may depend on it\n        // It is possible in the set of stream transforms for Dynamic HTML vs Dynamic Data may differ but currently both states\n        // require the same set so we unify the code path here\n        reactServerResult.consume()\n        return {\n          digestErrorsMap: reactServerErrorsByDigest,\n          ssrErrors: allCapturedErrors,\n          stream: await continueDynamicPrerender(prelude, {\n            getServerInsertedHTML,\n          }),\n          dynamicAccess: dynamicTracking.dynamicAccesses,\n          // TODO: Should this include the SSR pass?\n          collectedRevalidate: reactServerPrerenderStore.revalidate,\n          collectedExpire: reactServerPrerenderStore.expire,\n          collectedStale: reactServerPrerenderStore.stale,\n          collectedTags: reactServerPrerenderStore.tags,\n        }\n      } else if (fallbackRouteParams && fallbackRouteParams.size > 0) {\n        // Rendering the fallback case.\n        metadata.postponed = getDynamicDataPostponedState()\n\n        return {\n          digestErrorsMap: reactServerErrorsByDigest,\n          ssrErrors: allCapturedErrors,\n          stream: await continueDynamicPrerender(prelude, {\n            getServerInsertedHTML,\n          }),\n          dynamicAccess: dynamicTracking.dynamicAccesses,\n          // TODO: Should this include the SSR pass?\n          collectedRevalidate: reactServerPrerenderStore.revalidate,\n          collectedExpire: reactServerPrerenderStore.expire,\n          collectedStale: reactServerPrerenderStore.stale,\n          collectedTags: reactServerPrerenderStore.tags,\n        }\n      } else {\n        // Static case\n        // We still have not used any dynamic APIs. At this point we can produce an entirely static prerender response\n        if (workStore.forceDynamic) {\n          throw new StaticGenBailoutError(\n            'Invariant: a Page with `dynamic = \"force-dynamic\"` did not trigger the dynamic pathway. This is a bug in Next.js'\n          )\n        }\n\n        let htmlStream = prelude\n        if (postponed != null) {\n          // We postponed but nothing dynamic was used. We resume the render now and immediately abort it\n          // so we can set all the postponed boundaries to client render mode before we store the HTML response\n          const resume = require('react-dom/server.edge')\n            .resume as (typeof import('react-dom/server.edge'))['resume']\n\n          // We don't actually want to render anything so we just pass a stream\n          // that never resolves. The resume call is going to abort immediately anyway\n          const foreverStream = new ReadableStream<Uint8Array>()\n\n          const resumeStream = await resume(\n            <App\n              reactServerStream={foreverStream}\n              preinitScripts={() => {}}\n              clientReferenceManifest={clientReferenceManifest}\n              ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n              nonce={ctx.nonce}\n            />,\n            JSON.parse(JSON.stringify(postponed)),\n            {\n              signal: createPostponedAbortSignal('static prerender resume'),\n              onError: htmlRendererErrorHandler,\n              nonce: ctx.nonce,\n            }\n          )\n\n          // First we write everything from the prerender, then we write everything from the aborted resume render\n          htmlStream = chainStreams(prelude, resumeStream)\n        }\n\n        return {\n          digestErrorsMap: reactServerErrorsByDigest,\n          ssrErrors: allCapturedErrors,\n          stream: await continueStaticPrerender(htmlStream, {\n            inlinedDataStream: createInlinedDataReadableStream(\n              reactServerResult.consumeAsStream(),\n              ctx.nonce,\n              formState\n            ),\n            getServerInsertedHTML,\n          }),\n          dynamicAccess: dynamicTracking.dynamicAccesses,\n          // TODO: Should this include the SSR pass?\n          collectedRevalidate: reactServerPrerenderStore.revalidate,\n          collectedExpire: reactServerPrerenderStore.expire,\n          collectedStale: reactServerPrerenderStore.stale,\n          collectedTags: reactServerPrerenderStore.tags,\n        }\n      }\n    } else {\n      const prerenderLegacyStore: PrerenderStore = (prerenderStore = {\n        type: 'prerender-legacy',\n        phase: 'render',\n        implicitTags: ctx.requestStore.implicitTags,\n        revalidate: INFINITE_CACHE,\n        expire: INFINITE_CACHE,\n        stale: INFINITE_CACHE,\n        tags: [...ctx.requestStore.implicitTags],\n      })\n      // This is a regular static generation. We don't do dynamic tracking because we rely on\n      // the old-school dynamic error handling to bail out of static generation\n      const RSCPayload = await workUnitAsyncStorage.run(\n        prerenderLegacyStore,\n        getRSCPayload,\n        tree,\n        ctx,\n        res.statusCode === 404\n      )\n      const reactServerResult = (reactServerPrerenderResult =\n        await createReactServerPrerenderResultFromRender(\n          workUnitAsyncStorage.run(\n            prerenderLegacyStore,\n            ComponentMod.renderToReadableStream,\n            RSCPayload,\n            clientReferenceManifest.clientModules,\n            {\n              onError: serverComponentsErrorHandler,\n            }\n          )\n        ))\n\n      const renderToReadableStream = require('react-dom/server.edge')\n        .renderToReadableStream as (typeof import('react-dom/server.edge'))['renderToReadableStream']\n\n      const htmlStream = await workUnitAsyncStorage.run(\n        prerenderLegacyStore,\n        renderToReadableStream,\n        <App\n          reactServerStream={reactServerResult.asUnclosingStream()}\n          preinitScripts={preinitScripts}\n          clientReferenceManifest={clientReferenceManifest}\n          ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n          nonce={ctx.nonce}\n        />,\n        {\n          onError: htmlRendererErrorHandler,\n          nonce: ctx.nonce,\n          // When debugging the static shell, client-side rendering should be\n          // disabled to prevent blanking out the page.\n          bootstrapScripts: renderOpts.isDebugStaticShell\n            ? []\n            : [bootstrapScript],\n        }\n      )\n\n      if (shouldGenerateStaticFlightData(workStore)) {\n        metadata.flightData = await streamToBuffer(reactServerResult.asStream())\n      }\n\n      const getServerInsertedHTML = makeGetServerInsertedHTML({\n        polyfills,\n        renderServerInsertedHTML,\n        serverCapturedErrors: allCapturedErrors,\n        basePath: renderOpts.basePath,\n        tracingMetadata: tracingMetadata,\n      })\n      return {\n        digestErrorsMap: reactServerErrorsByDigest,\n        ssrErrors: allCapturedErrors,\n        stream: await continueFizzStream(htmlStream, {\n          inlinedDataStream: createInlinedDataReadableStream(\n            reactServerResult.consumeAsStream(),\n            ctx.nonce,\n            formState\n          ),\n          isStaticGeneration: true,\n          getServerInsertedHTML,\n          serverInsertedHTMLToHead: true,\n        }),\n        // TODO: Should this include the SSR pass?\n        collectedRevalidate: prerenderLegacyStore.revalidate,\n        collectedExpire: prerenderLegacyStore.expire,\n        collectedStale: prerenderLegacyStore.stale,\n        collectedTags: prerenderLegacyStore.tags,\n      }\n    }\n  } catch (err) {\n    if (\n      isStaticGenBailoutError(err) ||\n      (typeof err === 'object' &&\n        err !== null &&\n        'message' in err &&\n        typeof err.message === 'string' &&\n        err.message.includes(\n          'https://nextjs.org/docs/advanced-features/static-html-export'\n        ))\n    ) {\n      // Ensure that \"next dev\" prints the red error overlay\n      throw err\n    }\n\n    // If this is a static generation error, we need to throw it so that it\n    // can be handled by the caller if we're in static generation mode.\n    if (isDynamicServerError(err)) {\n      throw err\n    }\n\n    // If a bailout made it to this point, it means it wasn't wrapped inside\n    // a suspense boundary.\n    const shouldBailoutToCSR = isBailoutToCSRError(err)\n    if (shouldBailoutToCSR) {\n      const stack = getStackWithoutErrorMessage(err)\n      error(\n        `${err.reason} should be wrapped in a suspense boundary at page \"${ctx.pagePath}\". Read more: https://nextjs.org/docs/messages/missing-suspense-with-csr-bailout\\n${stack}`\n      )\n\n      throw err\n    }\n\n    // If we errored when we did not have an RSC stream to read from. This is\n    // not just a render error, we need to throw early.\n    if (reactServerPrerenderResult === null) {\n      throw err\n    }\n\n    let errorType: 'not-found' | 'redirect' | undefined\n\n    if (isNotFoundError(err)) {\n      errorType = 'not-found'\n      res.statusCode = 404\n    } else if (isRedirectError(err)) {\n      errorType = 'redirect'\n      res.statusCode = getRedirectStatusCodeFromError(err)\n\n      const redirectUrl = addPathPrefix(\n        getURLFromRedirectError(err),\n        renderOpts.basePath\n      )\n\n      // If there were mutable cookies set, we need to set them on the\n      // response.\n      const headers = new Headers()\n      if (appendMutableCookies(headers, ctx.requestStore.mutableCookies)) {\n        setHeader('set-cookie', Array.from(headers.values()))\n      }\n\n      setHeader('location', redirectUrl)\n    } else if (!shouldBailoutToCSR) {\n      res.statusCode = 500\n    }\n\n    const [errorPreinitScripts, errorBootstrapScript] = getRequiredScripts(\n      renderOpts.buildManifest,\n      ctx.assetPrefix,\n      renderOpts.crossOrigin,\n      renderOpts.subresourceIntegrityManifest,\n      getAssetQueryString(ctx, false),\n      ctx.nonce,\n      '/_not-found/page'\n    )\n\n    const prerenderLegacyStore: PrerenderStore = (prerenderStore = {\n      type: 'prerender-legacy',\n      phase: 'render',\n      implicitTags: ctx.requestStore.implicitTags,\n      revalidate: INFINITE_CACHE,\n      expire: INFINITE_CACHE,\n      stale: INFINITE_CACHE,\n      tags: [...ctx.requestStore.implicitTags],\n    })\n    const errorRSCPayload = await workUnitAsyncStorage.run(\n      prerenderLegacyStore,\n      getErrorRSCPayload,\n      tree,\n      ctx,\n      errorType\n    )\n\n    const errorServerStream = workUnitAsyncStorage.run(\n      prerenderLegacyStore,\n      ComponentMod.renderToReadableStream,\n      errorRSCPayload,\n      clientReferenceManifest.clientModules,\n      {\n        onError: serverComponentsErrorHandler,\n      }\n    )\n\n    try {\n      const fizzStream = await renderToInitialFizzStream({\n        ReactDOMServer: require('react-dom/server.edge'),\n        element: (\n          <AppWithoutContext\n            reactServerStream={errorServerStream}\n            preinitScripts={errorPreinitScripts}\n            clientReferenceManifest={clientReferenceManifest}\n            nonce={ctx.nonce}\n          />\n        ),\n        streamOptions: {\n          nonce: ctx.nonce,\n          // Include hydration scripts in the HTML\n          bootstrapScripts: [errorBootstrapScript],\n          formState,\n        },\n      })\n\n      if (shouldGenerateStaticFlightData(workStore)) {\n        metadata.flightData = await streamToBuffer(\n          reactServerPrerenderResult.asStream()\n        )\n      }\n\n      const validateRootLayout = renderOpts.dev\n      return {\n        // Returning the error that was thrown so it can be used to handle\n        // the response in the caller.\n        digestErrorsMap: reactServerErrorsByDigest,\n        ssrErrors: allCapturedErrors,\n        stream: await continueFizzStream(fizzStream, {\n          inlinedDataStream: createInlinedDataReadableStream(\n            // This is intentionally using the readable datastream from the\n            // main render rather than the flight data from the error page\n            // render\n            reactServerPrerenderResult.consumeAsStream(),\n            ctx.nonce,\n            formState\n          ),\n          isStaticGeneration: true,\n          getServerInsertedHTML: makeGetServerInsertedHTML({\n            polyfills,\n            renderServerInsertedHTML,\n            serverCapturedErrors: [],\n            basePath: renderOpts.basePath,\n            tracingMetadata: tracingMetadata,\n          }),\n          serverInsertedHTMLToHead: true,\n          validateRootLayout,\n        }),\n        dynamicAccess: null,\n        collectedRevalidate:\n          prerenderStore !== null ? prerenderStore.revalidate : INFINITE_CACHE,\n        collectedExpire:\n          prerenderStore !== null ? prerenderStore.expire : INFINITE_CACHE,\n        collectedStale:\n          prerenderStore !== null ? prerenderStore.stale : INFINITE_CACHE,\n        collectedTags: prerenderStore !== null ? prerenderStore.tags : null,\n      }\n    } catch (finalErr: any) {\n      if (process.env.NODE_ENV === 'development' && isNotFoundError(finalErr)) {\n        const bailOnNotFound: typeof import('../../client/components/dev-root-not-found-boundary').bailOnNotFound =\n          require('../../client/components/dev-root-not-found-boundary').bailOnNotFound\n        bailOnNotFound()\n      }\n      throw finalErr\n    }\n  }\n}\n\nconst loadingChunks: Set<Promise<unknown>> = new Set()\nconst chunkListeners: Array<(x?: unknown) => void> = []\n\nfunction trackChunkLoading(load: Promise<unknown>) {\n  loadingChunks.add(load)\n  load.finally(() => {\n    if (loadingChunks.has(load)) {\n      loadingChunks.delete(load)\n      if (loadingChunks.size === 0) {\n        // We are not currently loading any chunks. We can notify all listeners\n        for (let i = 0; i < chunkListeners.length; i++) {\n          chunkListeners[i]()\n        }\n        chunkListeners.length = 0\n      }\n    }\n  })\n}\n\nexport async function warmFlightResponse(\n  flightStream: ReadableStream<Uint8Array>,\n  clientReferenceManifest: DeepReadonly<ClientReferenceManifest>\n) {\n  let createFromReadableStream\n  if (process.env.TURBOPACK) {\n    createFromReadableStream =\n      // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-turbopack/client.edge').createFromReadableStream\n  } else {\n    createFromReadableStream =\n      // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client.edge').createFromReadableStream\n  }\n\n  try {\n    createFromReadableStream(flightStream, {\n      serverConsumerManifest: {\n        moduleLoading: clientReferenceManifest.moduleLoading,\n        moduleMap: clientReferenceManifest.ssrModuleMapping,\n        serverModuleMap: null,\n      },\n    })\n  } catch {\n    // We don't want to handle errors here but we don't want it to\n    // interrupt the outer flow. We simply ignore it here and expect\n    // it will bubble up during a render\n  }\n\n  // We'll wait at least one task and then if no chunks have started to load\n  // we'll we can infer that there are none to load from this flight response\n  trackChunkLoading(waitAtLeastOneReactRenderTask())\n  return new Promise((r) => {\n    chunkListeners.push(r)\n  })\n}\n"],"names":["renderToHTMLOrFlight","warmFlightResponse","flightDataPathHeadKey","parseRequestHeaders","headers","options","isDevWarmupRequest","isDevWarmup","isPrefetchRequest","NEXT_ROUTER_PREFETCH_HEADER","toLowerCase","undefined","isHmrRefresh","NEXT_HMR_REFRESH_HEADER","isRSCRequest","RSC_HEADER","shouldProvideFlightRouterState","isRoutePPREnabled","flightRouterState","parseAndValidateFlightRouterState","NEXT_ROUTER_STATE_TREE_HEADER","csp","nonce","getScriptNonceFromHeader","createNotFoundLoaderTree","loaderTree","components","children","PAGE_SEGMENT_KEY","page","makeGetDynamicParamFromSegment","params","pagePath","fallbackRouteParams","getDynamicParamFromSegment","segment","segmentParam","getSegmentParam","key","param","value","has","get","Array","isArray","map","i","encodeURIComponent","isCatchall","type","isOptionalCatchall","dynamicParamType","dynamicParamTypes","treeSegment","split","slice","flatMap","pathSegment","parseParameter","join","getShortDynamicParamType","NonIndex","ctx","is404Page","isInvalidStatusCode","res","statusCode","meta","name","content","generateDynamicRSCPayload","requestStore","phase","flightData","componentMod","tree","createServerSearchParamsForMetadata","createServerParamsForMetadata","createMetadataComponents","MetadataBoundary","ViewportBoundary","appUsingSizeAdjustment","url","query","requestId","workStore","skipFlight","preloadCallbacks","searchParams","MetadataTree","getMetadataReady","metadataContext","createTrackedMetadataContext","pathname","renderOpts","walkTreeWithFlightRouterState","createSegmentPath","child","loaderTreeToFilter","parentParams","isFirst","rscPayloadHead","React","Fragment","injectedCSS","Set","injectedJS","injectedFontPreloadTags","rootLayoutIncluded","path","actionResult","a","f","b","buildId","S","isStaticGeneration","createErrorContext","renderSource","routerKind","routePath","routeType","isAction","revalidateReason","getRevalidateReason","generateDynamicFlightRenderResult","req","onFlightDataRenderError","err","onInstrumentationRequestError","onError","createFlightReactServerErrorHandler","dev","RSCPayload","process","env","NODE_ENV","experimental","dynamicIO","resolveValidation","validationOutlet","createValidationOutlet","_validation","spawnDynamicValidationInDev","clientReferenceManifest","route","flightReadableStream","renderToReadableStream","clientModules","temporaryReferences","FlightRenderResult","fetchMetrics","warmupDevRender","InvariantError","rscPayload","reader","getReader","read","done","prepareInitialCanonicalUrl","search","getRSCPayload","is404","missingSlots","GlobalError","initialTree","createFlightRouterStateFromLoaderTree","errorType","seedData","createComponentTree","firstItem","varyHeader","getHeader","couldBeIntercepted","includes","NEXT_URL","initialHead","P","Preloads","p","assetPrefix","c","m","G","s","postponed","forEach","preloadFn","getErrorRSCPayload","createMetadataContext","initialSeedData","html","id","head","body","App","reactServerStream","preinitScripts","ServerInsertedHTMLProvider","response","use","useFlightStream","initialState","createInitialRouterState","initialFlightData","initialCanonicalUrlParts","initialParallelRoutes","location","prerendered","actionQueue","createMutableActionQueue","HeadManagerContext","require","Provider","appDir","AppRouter","globalErrorComponent","AppWithoutContext","renderToHTMLOrFlightImpl","parsedRequestHeaders","requestEndedState","postponedState","isNotFoundPath","requestTimestamp","Date","now","serverActionsManifest","ComponentMod","nextFontManifest","serverActions","enableTainting","__next_app__","instrumented","wrapClientComponentLoader","globalThis","__next_require__","__next_chunk_load__","args","loadingChunk","loadChunk","trackChunkLoading","URL","setAppIsrStatus","NEXT_RUNTIME","isNodeNextRequest","originalRequest","on","prerenderStore","workUnitAsyncStorage","getStore","isPPR","dynamicTracking","dynamicAccesses","length","usedDynamic","forceDynamic","ended","metrics","getClientComponentLoaderMetrics","reset","getTracer","startSpan","NextNodeServerSpan","clientComponentLoading","startTime","clientComponentLoadStart","attributes","clientComponentLoadCount","end","clientComponentLoadTimes","metadata","appUsingSizeAdjust","serverModuleMap","createServerModuleMap","pageName","setReferenceManifestsSingleton","patchFetch","taintObjectReference","stripInternalQueries","crypto","randomUUID","nanoid","isActionRequest","getServerActionRequestMetadata","isServerAction","isPrefetch","setRootSpanAttribute","prerenderToStreamWithTracing","wrap","AppRenderSpan","getBodyResult","spanName","prerenderToStream","dynamicAccess","accessedDynamicData","isDebugDynamicAccesses","warn","access","formatDynamicAPIAccesses","digestErrorsMap","size","buildFailingError","values","next","ssrErrors","find","isUserLandError","pendingRevalidates","pendingRevalidateWrites","revalidatedTags","waitUntil","Promise","all","incrementalCache","revalidateTag","Object","collectedTags","fetchTags","staleHeader","String","collectedStale","setHeader","NEXT_ROUTER_STALE_TIME_HEADER","forceStatic","collectedRevalidate","revalidate","INFINITE_CACHE","staticBailoutInfo","description","dynamicUsageDescription","stack","dynamicUsageStack","placeholder","Buffer","from","segmentFlightData","Map","RenderResult","streamToString","stream","renderToStreamWithTracing","renderToStream","formState","actionRequestResult","handleAction","generateFlight","notFoundLoaderTree","result","assignMetadata","serverComponentsHmrCache","Error","parseRelativeUrl","parsePostponedState","implicitTags","getImplicitTags","routeModule","definition","createRequestStoreForRender","onUpdateCookies","previewProps","run","withWorkStore","workAsyncStorage","renderServerInsertedHTML","createServerInsertedHTML","tracingMetadata","getTracedMetadata","getTracePropagationData","clientTraceMetadata","polyfills","buildManifest","polyfillFiles","filter","polyfill","endsWith","src","getAssetQueryString","integrity","subresourceIntegrityManifest","crossOrigin","noModule","bootstrapScript","getRequiredScripts","reactServerErrorsByDigest","silenceLogger","onHTMLRenderRSCError","serverComponentsErrorHandler","createHTMLReactServerErrorHandler","nextExport","onHTMLRenderSSRError","allCapturedErrors","htmlRendererErrorHandler","createHTMLErrorHandler","reactServerResult","bind","scheduleInSequentialTasks","prerenderPhase","environmentName","ReactServerResult","waitAtLeastOneReactRenderTask","DynamicState","DATA","inlinedReactServerDataStream","createInlinedDataReadableStream","tee","chainStreams","createDocumentClosingStream","getPostponedFromState","resume","htmlStream","getServerInsertedHTML","makeGetServerInsertedHTML","serverCapturedErrors","basePath","continueDynamicHTMLResume","inlinedDataStream","consume","onHeaders","maxHeadersLength","reactMaxHeadersLength","bootstrapScripts","isDebugStaticShell","generateStaticHTML","supportsDynamicResponse","validateRootLayout","continueFizzStream","serverInsertedHTMLToHead","isStaticGenBailoutError","message","shouldBailoutToCSR","isBailoutToCSRError","getStackWithoutErrorMessage","error","reason","isNotFoundError","isRedirectError","getRedirectStatusCodeFromError","redirectUrl","addPathPrefix","getURLFromRedirectError","Headers","appendMutableCookies","mutableCookies","errorPreinitScripts","errorBootstrapScript","errorRSCPayload","errorServerStream","fizzStream","renderToInitialFizzStream","ReactDOMServer","element","streamOptions","finalErr","bailOnNotFound","outlet","resolve","isNotFound","firstAttemptServerController","AbortController","serverDynamicTracking","createDynamicTrackingState","firstAttemptServerPrerenderStore","renderSignal","signal","cacheSignal","controller","expire","stale","tags","validating","firstAttemptRSCPayload","asHaltedStream","abort","syncDynamicErrorWithStack","cancel","secondAttemptServerController","secondAttemptServerPrerenderStore","secondAttemptRSCPayload","warmupStream","renderStream","prerender","clientDynamicTracking","dynamicValidation","createDynamicValidationState","SSROnError","errorInfo","isPrerenderInterruptedError","aborted","componentStack","trackAllowedDynamicAccess","firstAttemptClientController","firstAttemptClientPrerenderStore","firstAttemptReactServerStream","secondAttemptReactServerStream","hadException","prerenderAndAbortInSequentialTasks","catch","__NEXT_VERBOSE_LOGGING","printDebugThrownValueForProspectiveRender","secondAttemptClientController","secondAttemptClientPrerenderStore","LogDynamicValidation","throwIfDisallowedDynamic","ReadableStream","start","errorStream","progressStream","enqueue","then","shouldGenerateStaticFlightData","reactServerPrerenderResult","PRERENDER_COMPLETE","abortReason","prospectiveRenderFlightController","prospectiveRenderFlightSignal","CacheSignal","prospectiveRenderPrerenderStore","reactServerIsDynamic","prospectiveRenderOnError","digest","NEXT_DEBUG_BUILD","onPostpone","isDynamicServerError","cacheReady","finalRenderFlightController","finalRenderFlightSignal","finalRenderPrerenderStore","finalRenderOnError","finalAttemptRSCPayload","createReactServerPrerenderResult","asStream","SSRController","ssrPrerenderStore","SSRIsDynamic","prelude","asUnclosingStream","finalSSRController","finalSSRPrerenderStore","streamToBuffer","getDynamicHTMLPostponedState","getDynamicDataPostponedState","continueDynamicPrerender","consumeDynamicAccess","collectedExpire","StaticGenBailoutError","foreverStream","resumeStream","JSON","parse","stringify","createPostponedAbortSignal","continueStaticPrerender","consumeAsStream","cache","prospectiveStream","teedStream","rscForSSRStream","thirdRenderFlightController","thirdRenderPrerenderStore","thirdRenderRSCPayload","pendingHTMLStream","dynamicReason","getFirstDynamicReason","DynamicServerError","createReactServerPrerenderResultFromRender","reactServerPrerenderStore","prerenderLegacyStore","loadingChunks","chunkListeners","load","add","finally","delete","flightStream","createFromReadableStream","TURBOPACK","serverConsumerManifest","moduleLoading","moduleMap","ssrModuleMapping","r","push"],"mappings":";;;;;;;;;;;;;;;IAo2CaA,oBAAoB;eAApBA;;IAm2ESC,kBAAkB;eAAlBA;;;;8DAhrH0B;qEAKzC;sCAWA;+BAC8B;kCAQ9B;iCAIA;8BACqC;+BACd;0BACE;0BAKzB;8BACyB;2BACkB;wBACxB;oCACS;oCAO5B;0CAIA;iCACyB;0CACS;mDACS;uDACI;+BACzB;8BACO;qBACR;gCACS;oCACI;iCACN;+BACL;2CACY;+CACI;qCACV;qCACA;iCACW;gCAKxC;oCAM8B;mCAI9B;yCAIA;mCACqC;kCAarC;+CAIA;6BAC+B;yBACJ;4BACH;kCACE;kEACX;yCAGyB;0CACN;6BACA;uBACL;yBACH;yCAU1B;wCACmD;sCAChB;2BACI;8CAIvC;6BACqB;wBACM;gCACH;QAExB;4BACwB;;;;;;AAyC/B,MAAMC,wBAAwB;AAiB9B,SAASC,oBACPC,OAA4B,EAC5BC,OAAmC;IAEnC,MAAMC,qBAAqBD,QAAQE,WAAW,KAAK;IAEnD,2DAA2D;IAC3D,MAAMC,oBACJF,sBACAF,OAAO,CAACK,6CAA2B,CAACC,WAAW,GAAG,KAAKC;IAEzD,MAAMC,eACJR,OAAO,CAACS,yCAAuB,CAACH,WAAW,GAAG,KAAKC;IAErD,2DAA2D;IAC3D,MAAMG,eACJR,sBAAsBF,OAAO,CAACW,4BAAU,CAACL,WAAW,GAAG,KAAKC;IAE9D,MAAMK,iCACJF,gBAAiB,CAAA,CAACN,qBAAqB,CAACH,QAAQY,iBAAiB,AAAD;IAElE,MAAMC,oBAAoBF,iCACtBG,IAAAA,oEAAiC,EAC/Bf,OAAO,CAACgB,+CAA6B,CAACV,WAAW,GAAG,IAEtDC;IAEJ,MAAMU,MACJjB,OAAO,CAAC,0BAA0B,IAClCA,OAAO,CAAC,sCAAsC;IAEhD,MAAMkB,QACJ,OAAOD,QAAQ,WAAWE,IAAAA,kDAAwB,EAACF,OAAOV;IAE5D,OAAO;QACLO;QACAV;QACAI;QACAE;QACAR;QACAgB;IACF;AACF;AAEA,SAASE,yBAAyBC,UAAsB;IACtD,mEAAmE;IACnE,MAAMC,aAAaD,UAAU,CAAC,EAAE;IAChC,OAAO;QACL;QACA;YACEE,UAAU;gBACRC,yBAAgB;gBAChB,CAAC;gBACD;oBACEC,MAAMH,UAAU,CAAC,YAAY;gBAC/B;aACD;QACH;QACAA;KACD;AACH;AAIA;;CAEC,GACD,SAASI,+BACPC,MAA8B,EAC9BC,QAAgB,EAChBC,mBAA+C;IAE/C,OAAO,SAASC,2BACd,gCAAgC;IAChCC,OAAe;QAEf,MAAMC,eAAeC,IAAAA,gCAAe,EAACF;QACrC,IAAI,CAACC,cAAc;YACjB,OAAO;QACT;QAEA,MAAME,MAAMF,aAAaG,KAAK;QAE9B,IAAIC,QAAQT,MAAM,CAACO,IAAI;QAEvB,IAAIL,uBAAuBA,oBAAoBQ,GAAG,CAACL,aAAaG,KAAK,GAAG;YACtEC,QAAQP,oBAAoBS,GAAG,CAACN,aAAaG,KAAK;QACpD,OAAO,IAAII,MAAMC,OAAO,CAACJ,QAAQ;YAC/BA,QAAQA,MAAMK,GAAG,CAAC,CAACC,IAAMC,mBAAmBD;QAC9C,OAAO,IAAI,OAAON,UAAU,UAAU;YACpCA,QAAQO,mBAAmBP;QAC7B;QAEA,IAAI,CAACA,OAAO;YACV,MAAMQ,aAAaZ,aAAaa,IAAI,KAAK;YACzC,MAAMC,qBAAqBd,aAAaa,IAAI,KAAK;YAEjD,IAAID,cAAcE,oBAAoB;gBACpC,MAAMC,mBAAmBC,2CAAiB,CAAChB,aAAaa,IAAI,CAAC;gBAC7D,oEAAoE;gBACpE,6DAA6D;gBAC7D,IAAIC,oBAAoB;oBACtB,OAAO;wBACLX,OAAOD;wBACPE,OAAO;wBACPS,MAAME;wBACNE,aAAa;4BAACf;4BAAK;4BAAIa;yBAAiB;oBAC1C;gBACF;gBAEA,+EAA+E;gBAC/E,wFAAwF;gBACxFX,QAAQR,SACLsB,KAAK,CAAC,IACP,gCAAgC;iBAC/BC,KAAK,CAAC,EACP,oDAAoD;iBACnDC,OAAO,CAAC,CAACC;oBACR,MAAMlB,QAAQmB,IAAAA,0BAAc,EAACD;oBAC7B,yDAAyD;oBACzD,wDAAwD;oBACxD,OAAO1B,MAAM,CAACQ,MAAMD,GAAG,CAAC,IAAIC,MAAMD,GAAG;gBACvC;gBAEF,OAAO;oBACLC,OAAOD;oBACPE;oBACAS,MAAME;oBACN,wCAAwC;oBACxCE,aAAa;wBAACf;wBAAKE,MAAMmB,IAAI,CAAC;wBAAMR;qBAAiB;gBACvD;YACF;QACF;QAEA,MAAMF,OAAOW,IAAAA,kDAAwB,EAACxB,aAAaa,IAAI;QAEvD,OAAO;YACLV,OAAOD;YACP,yCAAyC;YACzCE,OAAOA;YACP,iDAAiD;YACjDa,aAAa;gBAACf;gBAAKK,MAAMC,OAAO,CAACJ,SAASA,MAAMmB,IAAI,CAAC,OAAOnB;gBAAOS;aAAK;YACxEA,MAAMA;QACR;IACF;AACF;AAEA,SAASY,SAAS,EAAEC,GAAG,EAA6B;IAClD,MAAMC,YAAYD,IAAI9B,QAAQ,KAAK;IACnC,MAAMgC,sBACJ,OAAOF,IAAIG,GAAG,CAACC,UAAU,KAAK,YAAYJ,IAAIG,GAAG,CAACC,UAAU,GAAG;IAEjE,IAAIH,aAAaC,qBAAqB;QACpC,qBAAO,qBAACG;YAAKC,MAAK;YAASC,SAAQ;;IACrC;IACA,OAAO;AACT;AAEA;;;;CAIC,GACD,eAAeC,0BACbR,GAAqB,EACrBzD,OAGC;IAEDyD,IAAIS,YAAY,CAACC,KAAK,GAAG;IACzB,yDAAyD;IACzD,0GAA0G;IAE1G,gGAAgG;IAChG,mGAAmG;IACnG,0GAA0G;IAC1G,mFAAmF;IACnF,IAAIC,aAAyB;IAE7B,MAAM,EACJC,cAAc,EACZC,MAAMlD,UAAU,EAChBmD,mCAAmC,EACnCC,6BAA6B,EAC7BC,wBAAwB,EACxBC,gBAAgB,EAChBC,gBAAgB,EACjB,EACD9C,0BAA0B,EAC1B+C,sBAAsB,EACtBV,cAAc,EAAEW,GAAG,EAAE,EACrBC,KAAK,EACLC,SAAS,EACTlE,iBAAiB,EACjBmE,SAAS,EACV,GAAGvB;IAEJ,IAAI,EAACzD,2BAAAA,QAASiF,UAAU,GAAE;QACxB,MAAMC,mBAAqC,EAAE;QAE7C,MAAMC,eAAeZ,oCAAoCO,OAAOE;QAChE,MAAM,CAACI,cAAcC,iBAAiB,GAAGZ,yBAAyB;YAChEH,MAAMlD;YACN+D;YACAG,iBAAiBC,IAAAA,6CAA4B,EAC3CV,IAAIW,QAAQ,EACZ/B,IAAIgC,UAAU,EACdT;YAEFnD;YACA+C;YACAJ;YACAQ;YACAN;YACAC;QACF;QACAP,aAAa,AACX,CAAA,MAAMsB,IAAAA,4DAA6B,EAAC;YAClCjC;YACAkC,mBAAmB,CAACC,QAAUA;YAC9BC,oBAAoBzE;YACpB0E,cAAc,CAAC;YACfjF;YACAkF,SAAS;YACT,+CAA+C;YAC/CC,8BACE,sBAACC,cAAK,CAACC,QAAQ;;kCACb,qBAAC1C;wBAASC,KAAKA;;kCAEf,qBAAC2B,kBAAkBL;;eAHAlF;YAMvBsG,aAAa,IAAIC;YACjBC,YAAY,IAAID;YAChBE,yBAAyB,IAAIF;YAC7BG,oBAAoB;YACpBlB;YACAH;QACF,EAAC,EACD1C,GAAG,CAAC,CAACgE,OAASA,KAAKtD,KAAK,CAAC,IAAI,+BAA+B;;IAChE;IAEA,sEAAsE;IACtE,+EAA+E;IAC/E,wBAAwB;IACxB,IAAIlD,2BAAAA,QAASyG,YAAY,EAAE;QACzB,OAAO;YACLC,GAAG1G,QAAQyG,YAAY;YACvBE,GAAGvC;YACHwC,GAAGnD,IAAIgC,UAAU,CAACoB,OAAO;QAC3B;IACF;IAEA,0CAA0C;IAC1C,OAAO;QACLD,GAAGnD,IAAIgC,UAAU,CAACoB,OAAO;QACzBF,GAAGvC;QACH0C,GAAG9B,UAAU+B,kBAAkB;IACjC;AACF;AAEA,SAASC,mBACPvD,GAAqB,EACrBwD,YAAiD;IAEjD,OAAO;QACLC,YAAY;QACZC,WAAW1D,IAAI9B,QAAQ;QACvByF,WAAW3D,IAAI4D,QAAQ,GAAG,WAAW;QACrCJ;QACAK,kBAAkBC,IAAAA,0BAAmB,EAAC9D,IAAIuB,SAAS;IACrD;AACF;AACA;;;CAGC,GACD,eAAewC,kCACbC,GAAoB,EACpBhE,GAAqB,EACrBzD,OAMC;IAED,MAAMyF,aAAahC,IAAIgC,UAAU;IAEjC,SAASiC,wBAAwBC,GAAkB;QACjD,OAAOlC,WAAWmC,6BAA6B,oBAAxCnC,WAAWmC,6BAA6B,MAAxCnC,YACLkC,KACAF,KACAT,mBAAmBvD,KAAK;IAE5B;IACA,MAAMoE,UAAUC,IAAAA,uDAAmC,EACjD,CAAC,CAACrC,WAAWsC,GAAG,EAChBL;IAGF,MAAMM,aAGF,MAAM/D,0BAA0BR,KAAKzD;IAEzC,IACE,qDAAqD;IACrDyF,WAAWsC,GAAG,IACd,uEAAuE;IACvEE,QAAQC,GAAG,CAACC,QAAQ,KAAK,iBACzB,yEAAyE;IACzE1C,WAAW2C,YAAY,CAACC,SAAS,EACjC;QACA,MAAM,CAACC,mBAAmBC,iBAAiB,GAAGC;QAC9CR,WAAWS,WAAW,GAAGF;QAEzBG,4BACEJ,mBACA7E,IAAIY,YAAY,CAACC,IAAI,EACrBb,KACA,OACAA,IAAIkF,uBAAuB,EAC3BlF,IAAIuB,SAAS,CAAC4D,KAAK;IAEvB;IAEA,0FAA0F;IAC1F,mCAAmC;IACnC,MAAMC,uBAAuBpF,IAAIY,YAAY,CAACyE,sBAAsB,CAClEd,YACAvE,IAAIkF,uBAAuB,CAACI,aAAa,EACzC;QACElB;QACAmB,mBAAmB,EAAEhJ,2BAAAA,QAASgJ,mBAAmB;IACnD;IAGF,OAAO,IAAIC,sCAAkB,CAACJ,sBAAsB;QAClDK,cAAczF,IAAIuB,SAAS,CAACkE,YAAY;IAC1C;AACF;AAEA;;;;;;CAMC,GACD,eAAeC,gBACb1B,GAAoB,EACpBhE,GAAqB,EACrBzD,OAKC;IAED,MAAMyF,aAAahC,IAAIgC,UAAU;IACjC,IAAI,CAACA,WAAWsC,GAAG,EAAE;QACnB,MAAM,IAAIqB,8BAAc,CACtB;IAEJ;IAEA,SAAS1B,wBAAwBC,GAAkB;QACjD,OAAOlC,WAAWmC,6BAA6B,oBAAxCnC,WAAWmC,6BAA6B,MAAxCnC,YACLkC,KACAF,KACAT,mBAAmBvD,KAAK;IAE5B;IACA,MAAMoE,UAAUC,IAAAA,uDAAmC,EACjD,MACAJ;IAGF,MAAM2B,aAAa,MAAMpF,0BAA0BR,KAAKzD;IAExD,0FAA0F;IAC1F,mCAAmC;IACnC,MAAM6I,uBAAuBpF,IAAIY,YAAY,CAACyE,sBAAsB,CAClEO,YACA5F,IAAIkF,uBAAuB,CAACI,aAAa,EACzC;QACElB;IACF;IAGF,MAAMyB,SAAST,qBAAqBU,SAAS;IAC7C,MAAO,KAAM;QACX,IAAI,AAAC,CAAA,MAAMD,OAAOE,IAAI,EAAC,EAAGC,IAAI,EAAE;YAC9B;QACF;IACF;IAEA,0EAA0E;IAC1E,+EAA+E;IAC/E,+EAA+E;IAC/E,OAAO,IAAIR,sCAAkB,CAAC,IAAI;QAChCC,cAAczF,IAAIuB,SAAS,CAACkE,YAAY;IAC1C;AACF;AAEA;;;;;CAKC,GACD,SAASQ,2BAA2B7E,GAAwB;IAC1D,OAAO,AAACA,CAAAA,IAAIW,QAAQ,GAAGX,IAAI8E,MAAM,AAAD,EAAG1G,KAAK,CAAC;AAC3C;AAEA,wFAAwF;AACxF,eAAe2G,cACbtF,IAAgB,EAChBb,GAAqB,EACrBoG,KAAc;IAEd,MAAM1D,cAAc,IAAIC;IACxB,MAAMC,aAAa,IAAID;IACvB,MAAME,0BAA0B,IAAIF;IACpC,IAAI0D;IAEJ,sDAAsD;IACtD,IAAI7B,QAAQC,GAAG,CAACC,QAAQ,KAAK,eAAe;QAC1C2B,eAAe,IAAI1D;IACrB;IAEA,MAAM,EACJvE,0BAA0B,EAC1BiD,KAAK,EACLF,sBAAsB,EACtBP,cAAc,EACZ0F,WAAW,EACXxF,mCAAmC,EACnCC,6BAA6B,EAC7BC,wBAAwB,EACxBC,gBAAgB,EAChBC,gBAAgB,EACjB,EACDT,cAAc,EAAEW,GAAG,EAAE,EACrBG,SAAS,EACV,GAAGvB;IACJ,MAAMuG,cAAcC,IAAAA,4EAAqC,EACvD3F,MACAzC,4BACAiD;IAGF,MAAMK,eAAeZ,oCAAoCO,OAAOE;IAChE,MAAM,CAACI,cAAcC,iBAAiB,GAAGZ,yBAAyB;QAChEH;QACA4F,WAAWL,QAAQ,cAAcvJ;QACjC6E;QACAG,iBAAiBC,IAAAA,6CAA4B,EAC3CV,IAAIW,QAAQ,EACZ/B,IAAIgC,UAAU,EACdT;QAEFnD;QACA+C;QACAJ;QACAQ;QACAN;QACAC;IACF;IAEA,MAAMO,mBAAqC,EAAE;IAE7C,MAAMiF,WAAW,MAAMC,IAAAA,wCAAmB,EAAC;QACzC3G;QACAkC,mBAAmB,CAACC,QAAUA;QAC9BxE,YAAYkD;QACZwB,cAAc,CAAC;QACfuE,WAAW;QACXlE;QACAE;QACAC;QACAC,oBAAoB;QACpBlB;QACAyE;QACA5E;IACF;IAEA,0FAA0F;IAC1F,6FAA6F;IAC7F,2FAA2F;IAC3F,MAAMoF,aAAa7G,IAAIG,GAAG,CAAC2G,SAAS,CAAC;IACrC,MAAMC,qBACJ,OAAOF,eAAe,YAAYA,WAAWG,QAAQ,CAACC,0BAAQ;IAEhE,MAAMC,4BACJ,sBAAC1E,cAAK,CAACC,QAAQ;;0BACb,qBAAC1C;gBAASC,KAAKA;;0BAEf,qBAAC2B,kBAAkB3B,IAAIsB,SAAS;;OAHblF;IAOvB,OAAO;QACL,6FAA6F;QAC7F+K,iBAAG,qBAACC;YAAS3F,kBAAkBA;;QAC/B0B,GAAGnD,IAAIgC,UAAU,CAACoB,OAAO;QACzBiE,GAAGrH,IAAIsH,WAAW;QAClBC,GAAGtB,2BAA2B7E;QAC9BpC,GAAG,CAAC,CAAC+H;QACL7D,GAAG;YAAC;gBAACqD;gBAAaG;gBAAUQ;aAAY;SAAC;QACzCM,GAAGnB;QACHoB,GAAGnB;QACHoB,GAAG,OAAO1H,IAAIgC,UAAU,CAAC2F,SAAS,KAAK;QACvCtE,GAAG9B,UAAU+B,kBAAkB;IACjC;AACF;AAEA;;;;;CAKC,GACD,SAAS8D,SAAS,EAAE3F,gBAAgB,EAAoC;IACtEA,iBAAiBmG,OAAO,CAAC,CAACC,YAAcA;IACxC,OAAO;AACT;AAEA,sFAAsF;AACtF,eAAeC,mBACbjH,IAAgB,EAChBb,GAAqB,EACrByG,SAA+C;IAE/C,MAAM,EACJrI,0BAA0B,EAC1BiD,KAAK,EACLF,sBAAsB,EACtBP,cAAc,EACZ0F,WAAW,EACXxF,mCAAmC,EACnCC,6BAA6B,EAC7BC,wBAAwB,EACxBC,gBAAgB,EAChBC,gBAAgB,EACjB,EACDT,cAAc,EAAEW,GAAG,EAAE,EACrBE,SAAS,EACTC,SAAS,EACV,GAAGvB;IAEJ,MAAM0B,eAAeZ,oCAAoCO,OAAOE;IAChE,MAAM,CAACI,aAAa,GAAGX,yBAAyB;QAC9CH;QACAa;QACA,yEAAyE;QACzE,iCAAiC;QACjCG,iBAAiBkG,IAAAA,sCAAqB,EAAC3G,IAAIW,QAAQ,EAAE/B,IAAIgC,UAAU;QACnEyE;QACArI;QACA+C;QACAJ;QACAQ;QACAN;QACAC;IACF;IAEA,MAAMgG,4BACJ,sBAAC1E,cAAK,CAACC,QAAQ;;0BACb,qBAAC1C;gBAASC,KAAKA;;0BAEf,qBAAC2B,kBAAkBL;YAClBkD,QAAQC,GAAG,CAACC,QAAQ,KAAK,+BACxB,qBAACrE;gBAAKC,MAAK;gBAAaC,SAAQ;;;OALfnE;IAUvB,MAAMmK,cAAcC,IAAAA,4EAAqC,EACvD3F,MACAzC,4BACAiD;IAGF,0EAA0E;IAC1E,+CAA+C;IAC/C,MAAM2G,kBAAqC;QACzCzB,WAAW,CAAC,EAAE;sBACd,sBAAC0B;YAAKC,IAAG;;8BACP,qBAACC;8BACD,qBAACC;;;QAEH,CAAC;QACD;KACD;IAED,OAAO;QACLjF,GAAGnD,IAAIgC,UAAU,CAACoB,OAAO;QACzBiE,GAAGrH,IAAIsH,WAAW;QAClBC,GAAGtB,2BAA2B7E;QAC9BoG,GAAG3K;QACHmC,GAAG;QACHkE,GAAG;YAAC;gBAACqD;gBAAayB;gBAAiBd;aAAY;SAAC;QAChDO,GAAGnB;QACHoB,GAAG,OAAO1H,IAAIgC,UAAU,CAAC2F,SAAS,KAAK;QACvCtE,GAAG9B,UAAU+B,kBAAkB;IACjC;AACF;AAEA,mFAAmF;AACnF,SAAS+E,IAAO,EACdC,iBAAiB,EACjBC,cAAc,EACdrD,uBAAuB,EACvB1H,KAAK,EACLgL,0BAA0B,EAO3B;IACCD;IACA,MAAME,WAAWjG,cAAK,CAACkG,GAAG,CACxBC,IAAAA,kCAAe,EACbL,mBACApD,yBACA1H;IAIJ,MAAMoL,eAAeC,IAAAA,kDAAwB,EAAC;QAC5CzF,SAASqF,SAAStF,CAAC;QACnB2F,mBAAmBL,SAASvF,CAAC;QAC7B6F,0BAA0BN,SAASlB,CAAC;QACpC,2EAA2E;QAC3E,kFAAkF;QAClFyB,uBAAuB;QACvBC,UAAU;QACVlC,oBAAoB0B,SAASzJ,CAAC;QAC9B2I,WAAWc,SAASf,CAAC;QACrBwB,aAAaT,SAASpF,CAAC;IACzB;IAEA,MAAM8F,cAAcC,IAAAA,qCAAwB,EAACR;IAE7C,MAAM,EAAES,kBAAkB,EAAE,GAC1BC,QAAQ;IAEV,qBACE,qBAACD,mBAAmBE,QAAQ;QAC1B7K,OAAO;YACL8K,QAAQ;YACRhM;QACF;kBAEA,cAAA,qBAACgL;sBACC,cAAA,qBAACiB,kBAAS;gBACRN,aAAaA;gBACbO,sBAAsBjB,SAAShB,CAAC;gBAChCH,aAAamB,SAASpB,CAAC;;;;AAKjC;AAEA,oGAAoG;AACpG,uGAAuG;AACvG,sBAAsB;AACtB,SAASsC,kBAAqB,EAC5BrB,iBAAiB,EACjBC,cAAc,EACdrD,uBAAuB,EACvB1H,KAAK,EAMN;IACC+K;IACA,MAAME,WAAWjG,cAAK,CAACkG,GAAG,CACxBC,IAAAA,kCAAe,EACbL,mBACApD,yBACA1H;IAIJ,MAAMoL,eAAeC,IAAAA,kDAAwB,EAAC;QAC5CzF,SAASqF,SAAStF,CAAC;QACnB2F,mBAAmBL,SAASvF,CAAC;QAC7B6F,0BAA0BN,SAASlB,CAAC;QACpC,2EAA2E;QAC3E,kFAAkF;QAClFyB,uBAAuB;QACvBC,UAAU;QACVlC,oBAAoB0B,SAASzJ,CAAC;QAC9B2I,WAAWc,SAASf,CAAC;QACrBwB,aAAaT,SAASpF,CAAC;IACzB;IAEA,MAAM8F,cAAcC,IAAAA,qCAAwB,EAACR;IAE7C,qBACE,qBAACa,kBAAS;QACRN,aAAaA;QACbO,sBAAsBjB,SAAShB,CAAC;QAChCH,aAAamB,SAASpB,CAAC;;AAG7B;AASA,eAAeuC,yBACb5F,GAAoB,EACpB7D,GAAqB,EACrBjC,QAAgB,EAChBmD,KAAyB,EACzBW,UAAsB,EACtBvB,YAA0B,EAC1Bc,SAAoB,EACpBsI,oBAA0C,EAC1CC,iBAAsC,EACtCC,cAAqC;IAErC,MAAMC,iBAAiB9L,aAAa;IACpC,IAAI8L,gBAAgB;QAClB7J,IAAIC,UAAU,GAAG;IACnB;IAEA,qEAAqE;IACrE,wEAAwE;IACxE,6EAA6E;IAC7E,+EAA+E;IAC/E,MAAM6J,mBAAmBC,KAAKC,GAAG;IAEjC,MAAM,EACJC,qBAAqB,EACrBC,YAAY,EACZC,gBAAgB,EAChBC,aAAa,EACbjD,cAAc,EAAE,EAChBkD,cAAc,EACf,GAAGxI;IAEJ,2DAA2D;IAC3D,uEAAuE;IACvE,IAAIqI,aAAaI,YAAY,EAAE;QAC7B,MAAMC,eAAeC,IAAAA,wDAAyB,EAACN;QAC/C,aAAa;QACbO,WAAWC,gBAAgB,GAAGH,aAAapB,OAAO;QAClD,kEAAkE;QAClE,qEAAqE;QACrE,wEAAwE;QACxE,oEAAoE;QACpE,aAAa;QACbsB,WAAWE,mBAAmB,GAAG,CAAC,GAAGC;YACnC,MAAMC,eAAeN,aAAaO,SAAS,IAAIF;YAC/CG,kBAAkBF;YAClB,OAAOA;QACT;IACF;IAEA,IAAIxG,QAAQC,GAAG,CAACC,QAAQ,KAAK,eAAe;QAC1C,uCAAuC;QACvC,MAAM,EAAE3C,QAAQ,EAAE,GAAG,IAAIoJ,IAAInH,IAAI5C,GAAG,IAAI,KAAK;QAC7CY,WAAWoJ,eAAe,oBAA1BpJ,WAAWoJ,eAAe,MAA1BpJ,YAA6BD,UAAU;IACzC;IAEA,IACE,qEAAqE;IACrE,6DAA6D;IAC7DyC,QAAQC,GAAG,CAAC4G,YAAY,KAAK,UAC7BC,IAAAA,0BAAiB,EAACtH,MAClB;QACAA,IAAIuH,eAAe,CAACC,EAAE,CAAC,OAAO;gBAMpBC,iDAAAA;YALR,MAAMA,iBAAiBC,kDAAoB,CAACC,QAAQ;YACpD,MAAMC,QACJH,kBACCA,CAAAA,eAAetM,IAAI,KAAK,eACvBsM,eAAetM,IAAI,KAAK,eAAc,IACpC,CAAC,GAACsM,kCAAAA,eAAeI,eAAe,sBAA9BJ,kDAAAA,gCAAgCK,eAAe,qBAA/CL,gDAAiDM,MAAM,IACzD;YAEN,IACEvH,QAAQC,GAAG,CAACC,QAAQ,KAAK,iBACzB1C,WAAWoJ,eAAe,IAC1B,CAACQ,SACD,CAACnL,aAAauL,WAAW,IACzB,CAACzK,UAAU0K,YAAY,EACvB;gBACA,iEAAiE;gBACjE,MAAM,EAAElK,QAAQ,EAAE,GAAG,IAAIoJ,IAAInH,IAAI5C,GAAG,IAAI,KAAK;gBAC7CY,WAAWoJ,eAAe,CAACrJ,UAAU;YACvC;YAEA+H,kBAAkBoC,KAAK,GAAG;YAE1B,IAAI,iBAAiBtB,YAAY;gBAC/B,MAAMuB,UAAUC,IAAAA,8DAA+B,EAAC;oBAAEC,OAAO;gBAAK;gBAC9D,IAAIF,SAAS;oBACXG,IAAAA,iBAAS,IACNC,SAAS,CAACC,6BAAkB,CAACC,sBAAsB,EAAE;wBACpDC,WAAWP,QAAQQ,wBAAwB;wBAC3CC,YAAY;4BACV,iCACET,QAAQU,wBAAwB;4BAClC,kBAAkBL,6BAAkB,CAACC,sBAAsB;wBAC7D;oBACF,GACCK,GAAG,CACFX,QAAQQ,wBAAwB,GAC9BR,QAAQY,wBAAwB;gBAExC;YACF;QACF;IACF;IAEA,MAAMC,WAAwC,CAAC;IAE/C,MAAM7L,yBAAyB,CAAC,EAACmJ,oCAAAA,iBAAkB2C,kBAAkB;IAErE,4BAA4B;IAC5B,MAAM/H,0BAA0BlD,WAAWkD,uBAAuB;IAElE,MAAMgI,kBAAkBC,IAAAA,kCAAqB,EAAC;QAC5C/C;QACAgD,UAAUpL,WAAWjE,IAAI;IAC3B;IAEAsP,IAAAA,+CAA8B,EAAC;QAC7BnI;QACAkF;QACA8C;IACF;IAEA7C,aAAaiD,UAAU;IAEvB,oDAAoD;IACpD,MAAM,EAAEzM,MAAMlD,UAAU,EAAE4P,oBAAoB,EAAE,GAAGlD;IAEnD,IAAIG,gBAAgB;QAClB+C,qBACE,kFACA/I,QAAQC,GAAG;IAEf;IAEAlD,UAAUkE,YAAY,GAAG,EAAE;IAC3BuH,SAASvH,YAAY,GAAGlE,UAAUkE,YAAY;IAE9C,qCAAqC;IACrCpE,QAAQ;QAAE,GAAGA,KAAK;IAAC;IACnBmM,IAAAA,mCAAoB,EAACnM;IAErB,MAAM,EACJjE,iBAAiB,EACjBV,iBAAiB,EACjBM,YAAY,EACZR,kBAAkB,EAClBgB,KAAK,EACN,GAAGqM;IAEJ;;;GAGC,GACD,IAAIvI;IAEJ,IAAIkD,QAAQC,GAAG,CAAC4G,YAAY,KAAK,QAAQ;QACvC/J,YAAYmM,OAAOC,UAAU;IAC/B,OAAO;QACLpM,YAAYgI,QAAQ,6BAA6BqE,MAAM;IACzD;IAEA;;GAEC,GACD,MAAM1P,SAAS+D,WAAW/D,MAAM,IAAI,CAAC;IAErC,MAAM,EAAEqF,kBAAkB,EAAEnF,mBAAmB,EAAE,GAAGoD;IAEpD,MAAMnD,6BAA6BJ,+BACjCC,QACAC,UACAC;IAGF,MAAMyP,kBAAkBC,IAAAA,uDAA8B,EAAC7J,KAAK8J,cAAc;IAE1E,MAAM9N,MAAwB;QAC5BY,cAAcyJ;QACdrI;QACAvB;QACAc;QACAsI;QACAzL;QACAiD;QACA0M,YAAYrR;QACZkH,UAAUgK;QACV3D;QACA9I;QACA/D;QACAkE;QACApD;QACAgH;QACAoC;QACA0C;QACAxM;QACA2C;IACF;IAEAmM,IAAAA,iBAAS,IAAG0B,oBAAoB,CAAC,cAAc9P;IAE/C,IAAIoF,oBAAoB;QACtB,mEAAmE;QACnE,4CAA4C;QAC5C,MAAM2K,+BAA+B3B,IAAAA,iBAAS,IAAG4B,IAAI,CACnDC,wBAAa,CAACC,aAAa,EAC3B;YACEC,UAAU,CAAC,sBAAsB,EAAEnQ,SAAS,CAAC;YAC7C0O,YAAY;gBACV,cAAc1O;YAChB;QACF,GACAoQ;QAGF,IAAI7F,WAAW,MAAMwF,6BACnBjK,KACA7D,KACAH,KACAgN,UACAzL,WACA5D;QAGF,8EAA8E;QAC9E,mCAAmC;QACnC,0CAA0C;QAC1C,IACE8K,SAAS8F,aAAa,IACtBC,IAAAA,qCAAmB,EAAC/F,SAAS8F,aAAa,KAC1CvM,WAAWyM,sBAAsB,EACjC;YACAC,IAAAA,SAAI,EAAC;YACL,KAAK,MAAMC,UAAUC,IAAAA,0CAAwB,EAACnG,SAAS8F,aAAa,EAAG;gBACrEG,IAAAA,SAAI,EAACC;YACP;QACF;QAEA,mEAAmE;QACnE,oCAAoC;QACpC,IAAIlG,SAASoG,eAAe,CAACC,IAAI,EAAE;YACjC,MAAMC,oBAAoBtG,SAASoG,eAAe,CAACG,MAAM,GAAGC,IAAI,GAAGvQ,KAAK;YACxE,IAAIqQ,mBAAmB,MAAMA;QAC/B;QACA,gEAAgE;QAChE,IAAItG,SAASyG,SAAS,CAACnD,MAAM,EAAE;YAC7B,MAAMgD,oBAAoBtG,SAASyG,SAAS,CAACC,IAAI,CAAC,CAACjL,MACjDkL,IAAAA,mCAAe,EAAClL;YAElB,IAAI6K,mBAAmB,MAAMA;QAC/B;QAEA,MAAMxS,UAA+B;YACnCyQ;QACF;QACA,oEAAoE;QACpE,IACEzL,UAAU8N,kBAAkB,IAC5B9N,UAAU+N,uBAAuB,IACjC/N,UAAUgO,eAAe,EACzB;gBAEEhO;YADFhF,QAAQiT,SAAS,GAAGC,QAAQC,GAAG,CAAC;iBAC9BnO,8BAAAA,UAAUoO,gBAAgB,qBAA1BpO,4BAA4BqO,aAAa,CACvCrO,UAAUgO,eAAe,IAAI,EAAE;mBAE9BM,OAAOb,MAAM,CAACzN,UAAU8N,kBAAkB,IAAI,CAAC;mBAC9C9N,UAAU+N,uBAAuB,IAAI,EAAE;aAC5C;QACH;QAEA,IAAI7G,SAASqH,aAAa,EAAE;YAC1B9C,SAAS+C,SAAS,GAAGtH,SAASqH,aAAa,CAACjQ,IAAI,CAAC;QACnD;QAEA,uEAAuE;QACvE,MAAMmQ,cAAcC,OAAOxH,SAASyH,cAAc;QAClD/P,IAAIgQ,SAAS,CAACC,+CAA6B,EAAEJ;QAC7ChD,SAAS1Q,OAAO,KAAK,CAAC;QACtB0Q,SAAS1Q,OAAO,CAAC8T,+CAA6B,CAAC,GAAGJ;QAElD,yEAAyE;QACzE,YAAY;QACZ,IAAIzO,UAAU8O,WAAW,KAAK,SAAS5H,SAAS6H,mBAAmB,KAAK,GAAG;YACzEtD,SAASuD,UAAU,GAAG;QACxB,OAAO;YACL,+DAA+D;YAC/DvD,SAASuD,UAAU,GACjB9H,SAAS6H,mBAAmB,IAAIE,0BAAc,GAC1C,QACA/H,SAAS6H,mBAAmB;QACpC;QAEA,qCAAqC;QACrC,IAAItD,SAASuD,UAAU,KAAK,GAAG;YAC7BvD,SAASyD,iBAAiB,GAAG;gBAC3BC,aAAanP,UAAUoP,uBAAuB;gBAC9CC,OAAOrP,UAAUsP,iBAAiB;YACpC;QACF;QAEA,4BAA4B;QAC5B,EAAE;QACF,yEAAyE;QACzE,oEAAoE;QACpE,0EAA0E;QAC1E,2EAA2E;QAC3E,2EAA2E;QAC3E,wCAAwC;QACxC,EAAE;QACF,0EAA0E;QAC1E,8CAA8C;QAC9C,IAAI7O,WAAW2C,YAAY,CAACxH,iBAAiB,KAAK,MAAM;YACtD,MAAM2T,cAAcC,OAAOC,IAAI,CAC7B;YAEFhE,SAASiE,iBAAiB,GAAG,IAAIC,IAAI;gBACnC,eAAe;gBACf;oBAAC;oBAAKJ;iBAAY;gBAClB;oBAAC;oBAASA;iBAAY;gBACtB,0EAA0E;gBAC1E,qEAAqE;gBACrE,mBAAmB;gBACnB;oBAAC;oBAAoBA;iBAAY;aAClC;QACH;QAEA,OAAO,IAAIK,qBAAY,CAAC,MAAMC,IAAAA,oCAAc,EAAC3I,SAAS4I,MAAM,GAAG9U;IACjE,OAAO;QACL,8BAA8B;QAC9B,IAAIC,oBAAoB;YACtB,OAAOkJ,gBAAgB1B,KAAKhE;QAC9B,OAAO,IAAIhD,cAAc;YACvB,OAAO+G,kCAAkCC,KAAKhE;QAChD;QAEA,MAAMsR,4BAA4BhF,IAAAA,iBAAS,IAAG4B,IAAI,CAChDC,wBAAa,CAACC,aAAa,EAC3B;YACEC,UAAU,CAAC,mBAAmB,EAAEnQ,SAAS,CAAC;YAC1C0O,YAAY;gBACV,cAAc1O;YAChB;QACF,GACAqT;QAGF,IAAIC,YAAwB;QAC5B,IAAI5D,iBAAiB;YACnB,gFAAgF;YAChF,MAAM6D,sBAAsB,MAAMC,IAAAA,2BAAY,EAAC;gBAC7C1N;gBACA7D;gBACAkK;gBACA6C;gBACAyE,gBAAgB5N;gBAChBxC;gBACAd;gBACA8J;gBACAvK;YACF;YAEA,IAAIyR,qBAAqB;gBACvB,IAAIA,oBAAoBtS,IAAI,KAAK,aAAa;oBAC5C,MAAMyS,qBAAqBlU,yBAAyBC;oBACpDwC,IAAIC,UAAU,GAAG;oBACjB,MAAMiR,SAAS,MAAMC,0BACnB7Q,cACAuD,KACA7D,KACAH,KACAuB,WACAqQ,oBACAJ,WACAzH;oBAGF,OAAO,IAAIoH,qBAAY,CAACE,QAAQ;wBAAErE;oBAAS;gBAC7C,OAAO,IAAIyE,oBAAoBtS,IAAI,KAAK,QAAQ;oBAC9C,IAAIsS,oBAAoBI,MAAM,EAAE;wBAC9BJ,oBAAoBI,MAAM,CAACC,cAAc,CAAC9E;wBAC1C,OAAOyE,oBAAoBI,MAAM;oBACnC,OAAO,IAAIJ,oBAAoBD,SAAS,EAAE;wBACxCA,YAAYC,oBAAoBD,SAAS;oBAC3C;gBACF;YACF;QACF;QAEA,MAAMjV,UAA+B;YACnCyQ;QACF;QAEA,MAAMqE,SAAS,MAAMC,0BACnB7Q,cACAuD,KACA7D,KACAH,KACAuB,WACA5D,YACA6T,WACAzH;QAGF,oEAAoE;QACpE,IACExI,UAAU8N,kBAAkB,IAC5B9N,UAAU+N,uBAAuB,IACjC/N,UAAUgO,eAAe,EACzB;gBAEEhO;YADFhF,QAAQiT,SAAS,GAAGC,QAAQC,GAAG,CAAC;iBAC9BnO,+BAAAA,UAAUoO,gBAAgB,qBAA1BpO,6BAA4BqO,aAAa,CACvCrO,UAAUgO,eAAe,IAAI,EAAE;mBAE9BM,OAAOb,MAAM,CAACzN,UAAU8N,kBAAkB,IAAI,CAAC;mBAC9C9N,UAAU+N,uBAAuB,IAAI,EAAE;aAC5C;QACH;QAEA,iDAAiD;QACjD,OAAO,IAAI6B,qBAAY,CAACE,QAAQ9U;IAClC;AACF;AAYO,MAAML,uBAAsC,CACjD8H,KACA7D,KACAjC,UACAmD,OACAlD,qBACA6D,YACA+P;IAEA,IAAI,CAAC/N,IAAI5C,GAAG,EAAE;QACZ,MAAM,IAAI4Q,MAAM;IAClB;IAEA,MAAM5Q,MAAM6Q,IAAAA,kCAAgB,EAACjO,IAAI5C,GAAG,EAAEvE,WAAW;IAEjD,qEAAqE;IACrE,wEAAwE;IACxE,MAAMgN,uBAAuBxN,oBAAoB2H,IAAI1H,OAAO,EAAE;QAC5DG,aAAauF,WAAWvF,WAAW;QACnCU,mBAAmB6E,WAAW2C,YAAY,CAACxH,iBAAiB,KAAK;IACnE;IAEA,MAAM,EAAEL,YAAY,EAAEJ,iBAAiB,EAAE,GAAGmN;IAE5C,MAAMC,oBAAoB;QAAEoC,OAAO;IAAM;IACzC,IAAInC,iBAAwC;IAE5C,4EAA4E;IAC5E,SAAS;IACT,IAAI,OAAO/H,WAAW2F,SAAS,KAAK,UAAU;QAC5C,IAAIxJ,uBAAuBA,oBAAoB2Q,IAAI,GAAG,GAAG;YACvD,MAAM,IAAIkD,MACR;QAEJ;QAEAjI,iBAAiBmI,IAAAA,mCAAmB,EAClClQ,WAAW2F,SAAS,EACpB3F,WAAW/D,MAAM;IAErB;IAEA,MAAMkU,eAAeC,IAAAA,6BAAe,EAClCpQ,WAAWqQ,WAAW,CAACC,UAAU,CAACvU,IAAI,EACtCqD,KACAjD;IAEF,yEAAyE;IACzE,uEAAuE;IACvE,4EAA4E;IAC5E,uDAAuD;IACvD,MAAMsC,eAAe8R,IAAAA,yCAA2B,EAC9CvO,KACA7D,KACAiB,KACA+Q,cACAnQ,WAAWwQ,eAAe,EAC1BxQ,WAAWyQ,YAAY,EACvB3V,cACAiV;IAEF,OAAOrG,kDAAoB,CAACgH,GAAG,CAACjS,cAAc;QAC5C,OAAOkS,IAAAA,4BAAa,EAClB3Q,WAAWqI,YAAY,CAACuI,gBAAgB,EACxC;YACE7U,MAAMiE,WAAWqQ,WAAW,CAACC,UAAU,CAACvU,IAAI;YAC5CI;YACA6D;YACA8H;YACA,8CAA8C;YAC9CpN;QACF,GACA,CAAC6E,YACCqI,yBACE5F,KACA7D,KACAjC,UACAmD,OACAW,YACAvB,cACAc,WACAsI,sBACAC,mBACAC;IAGR;AACF;AAEA,eAAewH,eACb9Q,YAA0B,EAC1BuD,GAAoB,EACpB7D,GAAqB,EACrBH,GAAqB,EACrBuB,SAAoB,EACpBV,IAAgB,EAChB2Q,SAAc,EACdzH,cAAqC;IAErC,MAAM/H,aAAahC,IAAIgC,UAAU;IACjC,MAAMqI,eAAerI,WAAWqI,YAAY;IAC5C,4BAA4B;IAC5B,MAAMnF,0BAA0BlD,WAAWkD,uBAAuB;IAElE,MAAM,EAAEsD,0BAA0B,EAAEqK,wBAAwB,EAAE,GAC5DC,IAAAA,4CAAwB;IAE1B,MAAMC,kBAAkBC,IAAAA,yBAAiB,EACvC1G,IAAAA,iBAAS,IAAG2G,uBAAuB,IACnCjR,WAAW2C,YAAY,CAACuO,mBAAmB;IAG7C,MAAMC,YACJnR,WAAWoR,aAAa,CAACC,aAAa,CACnCC,MAAM,CACL,CAACC,WACCA,SAASC,QAAQ,CAAC,UAAU,CAACD,SAASC,QAAQ,CAAC,eAElDzU,GAAG,CAAC,CAACwU;YAKOvR;eALO;YAClByR,KAAK,CAAC,EAAEzT,IAAIsH,WAAW,CAAC,OAAO,EAAEiM,SAAS,EAAEG,IAAAA,wCAAmB,EAC7D1T,KACA,OACA,CAAC;YACH2T,SAAS,GAAE3R,2CAAAA,WAAW4R,4BAA4B,qBAAvC5R,wCAAyC,CAACuR,SAAS;YAC9DM,aAAa7R,WAAW6R,WAAW;YACnCC,UAAU;YACVtW,OAAOwC,IAAIxC,KAAK;QAClB;;IAEJ,MAAM,CAAC+K,gBAAgBwL,gBAAgB,GAAGC,IAAAA,mCAAkB,EAC1DhS,WAAWoR,aAAa,EACxB,6CAA6C;IAC7C,8EAA8E;IAC9EpT,IAAIsH,WAAW,EACftF,WAAW6R,WAAW,EACtB7R,WAAW4R,4BAA4B,EACvCF,IAAAA,wCAAmB,EAAC1T,KAAK,OACzBA,IAAIxC,KAAK,EACTwE,WAAWjE,IAAI;IAGjB,MAAMkW,4BAAwD,IAAI/C;IAClE,MAAMgD,gBAAgB;IACtB,SAASC,qBAAqBjQ,GAAkB;QAC9C,OAAOlC,WAAWmC,6BAA6B,oBAAxCnC,WAAWmC,6BAA6B,MAAxCnC,YACLkC,KACAF,KACAT,mBAAmBvD,KAAK;IAE5B;IACA,MAAMoU,+BAA+BC,IAAAA,qDAAiC,EACpE,CAAC,CAACrS,WAAWsC,GAAG,EAChB,CAAC,CAACtC,WAAWsS,UAAU,EACvBL,2BACAC,eACAC;IAGF,SAASI,qBAAqBrQ,GAAkB;QAC9C,OAAOlC,WAAWmC,6BAA6B,oBAAxCnC,WAAWmC,6BAA6B,MAAxCnC,YACLkC,KACAF,KACAT,mBAAmBvD,KAAK;IAE5B;IAEA,MAAMwU,oBAAoC,EAAE;IAC5C,MAAMC,2BAA2BC,IAAAA,0CAAsB,EACrD,CAAC,CAAC1S,WAAWsC,GAAG,EAChB,CAAC,CAACtC,WAAWsS,UAAU,EACvBL,2BACAO,mBACAN,eACAK;IAGF,IAAII,oBAA8C;IAElD,MAAMxE,YAAYhQ,IAAIgQ,SAAS,CAACyE,IAAI,CAACzU;IAErC,IAAI;QACF,IACE,qDAAqD;QACrD6B,WAAWsC,GAAG,IACd,uEAAuE;QACvEE,QAAQC,GAAG,CAACC,QAAQ,KAAK,iBACzB,oGAAoG;QACpGF,QAAQC,GAAG,CAAC4G,YAAY,KAAK,UAC7B,yEAAyE;QACzErJ,WAAW2C,YAAY,CAACC,SAAS,EACjC;YACA,wFAAwF;YACxF,MAAML,aAGF,MAAMmH,kDAAoB,CAACgH,GAAG,CAChCjS,cACA0F,eACAtF,MACAb,KACAG,IAAIC,UAAU,KAAK;YAErB,MAAM,CAACyE,mBAAmBC,iBAAiB,GAAGC;YAC9CR,WAAWS,WAAW,GAAGF;YAEzB,MAAMwD,oBAAoB,MAAMoD,kDAAoB,CAACgH,GAAG,CACtDjS,cACAoU,+CAAyB,EACzB;gBACEpU,aAAaqU,cAAc,GAAG;gBAC9B,OAAOzK,aAAahF,sBAAsB,CACxCd,YACAW,wBAAwBI,aAAa,EACrC;oBACElB,SAASgQ;oBACTW,iBAAiB,IACftU,aAAaqU,cAAc,KAAK,OAAO,cAAc;gBACzD;YAEJ,GACA;gBACErU,aAAaqU,cAAc,GAAG;YAChC;YAGF7P,4BACEJ,mBACAhE,MACAb,KACAG,IAAIC,UAAU,KAAK,KACnB8E,yBACA3D,UAAU4D,KAAK;YAGjBwP,oBAAoB,IAAIK,0CAAiB,CAAC1M;QAC5C,OAAO;YACL,wFAAwF;YACxF,MAAM/D,aAAa,MAAMmH,kDAAoB,CAACgH,GAAG,CAC/CjS,cACA0F,eACAtF,MACAb,KACAG,IAAIC,UAAU,KAAK;YAGrBuU,oBAAoB,IAAIK,0CAAiB,CACvCtJ,kDAAoB,CAACgH,GAAG,CACtBjS,cACA4J,aAAahF,sBAAsB,EACnCd,YACAW,wBAAwBI,aAAa,EACrC;gBACElB,SAASgQ;YACX;QAGN;QAEA,mGAAmG;QACnG,oGAAoG;QACpG,6BAA6B;QAC7B,MAAMa,IAAAA,wCAA6B;QAEnC,wEAAwE;QACxE,qBAAqB;QACrB,IAAI,OAAOjT,WAAW2F,SAAS,KAAK,UAAU;YAC5C,IAAIoC,CAAAA,kCAAAA,eAAgB5K,IAAI,MAAK+V,4BAAY,CAACC,IAAI,EAAE;gBAC9C,mEAAmE;gBACnE,4EAA4E;gBAC5E,yBAAyB;gBACzB,MAAMC,+BAA+BC,IAAAA,kDAA+B,EAClEV,kBAAkBW,GAAG,IACrBtV,IAAIxC,KAAK,EACTgU;gBAGF,OAAO+D,IAAAA,kCAAY,EACjBH,8BACAI,IAAAA,iDAA2B;YAE/B,OAAO,IAAIzL,gBAAgB;gBACzB,uEAAuE;gBACvE,MAAMpC,YAAY8N,IAAAA,qCAAqB,EAAC1L;gBAExC,MAAM2L,SAASpM,QAAQ,yBACpBoM,MAAM;gBAET,MAAMC,aAAa,MAAMjK,kDAAoB,CAACgH,GAAG,CAC/CjS,cACAiV,sBACA,qBAACrN;oBACCC,mBAAmBqM,kBAAkBW,GAAG;oBACxC/M,gBAAgBA;oBAChBrD,yBAAyBA;oBACzBsD,4BAA4BA;oBAC5BhL,OAAOwC,IAAIxC,KAAK;oBAElBmK,WACA;oBACEvD,SAASqQ;oBACTjX,OAAOwC,IAAIxC,KAAK;gBAClB;gBAGF,MAAMoY,wBAAwBC,IAAAA,oDAAyB,EAAC;oBACtD1C;oBACAN;oBACAiD,sBAAsBtB;oBACtBuB,UAAU/T,WAAW+T,QAAQ;oBAC7BhD,iBAAiBA;gBACnB;gBACA,OAAO,MAAMiD,IAAAA,+CAAyB,EAACL,YAAY;oBACjDM,mBAAmBZ,IAAAA,kDAA+B,EAChDV,kBAAkBuB,OAAO,IACzBlW,IAAIxC,KAAK,EACTgU;oBAEFoE;gBACF;YACF;QACF;QAEA,mCAAmC;QACnC,MAAMvQ,yBAAyBiE,QAAQ,yBACpCjE,sBAAsB;QAEzB,MAAMsQ,aAAa,MAAMjK,kDAAoB,CAACgH,GAAG,CAC/CjS,cACA4E,sCACA,qBAACgD;YACCC,mBAAmBqM,kBAAkBW,GAAG;YACxC/M,gBAAgBA;YAChBrD,yBAAyBA;YACzBsD,4BAA4BA;YAC5BhL,OAAOwC,IAAIxC,KAAK;YAElB;YACE4G,SAASqQ;YACTjX,OAAOwC,IAAIxC,KAAK;YAChB2Y,WAAW,CAAC7Z;gBACVA,QAAQsL,OAAO,CAAC,CAAClJ,OAAOF;oBACtB2R,UAAU3R,KAAKE;gBACjB;YACF;YACA0X,kBAAkBpU,WAAWqU,qBAAqB;YAClD,mEAAmE;YACnE,6CAA6C;YAC7CC,kBAAkBtU,WAAWuU,kBAAkB,GAC3C,EAAE,GACF;gBAACxC;aAAgB;YACrBvC;QACF;QAGF,MAAMoE,wBAAwBC,IAAAA,oDAAyB,EAAC;YACtD1C;YACAN;YACAiD,sBAAsBtB;YACtBuB,UAAU/T,WAAW+T,QAAQ;YAC7BhD,iBAAiBA;QACnB;QACA;;;;;;;;;;;;KAYC,GACD,MAAMyD,qBAAqBxU,WAAWyU,uBAAuB,KAAK;QAClE,MAAMC,qBAAqB1U,WAAWsC,GAAG;QACzC,OAAO,MAAMqS,IAAAA,wCAAkB,EAAChB,YAAY;YAC1CM,mBAAmBZ,IAAAA,kDAA+B,EAChDV,kBAAkBuB,OAAO,IACzBlW,IAAIxC,KAAK,EACTgU;YAEFlO,oBAAoBkT;YACpBZ;YACAgB,0BAA0B;YAC1BF;QACF;IACF,EAAE,OAAOxS,KAAK;QACZ,IACE2S,IAAAA,gDAAuB,EAAC3S,QACvB,OAAOA,QAAQ,YACdA,QAAQ,QACR,aAAaA,OACb,OAAOA,IAAI4S,OAAO,KAAK,YACvB5S,IAAI4S,OAAO,CAAC9P,QAAQ,CAClB,iEAEJ;YACA,sDAAsD;YACtD,MAAM9C;QACR;QAEA,wEAAwE;QACxE,uBAAuB;QACvB,MAAM6S,qBAAqBC,IAAAA,iCAAmB,EAAC9S;QAC/C,IAAI6S,oBAAoB;YACtB,MAAMnG,QAAQqG,IAAAA,8CAA2B,EAAC/S;YAC1CgT,IAAAA,UAAK,EACH,CAAC,EAAEhT,IAAIiT,MAAM,CAAC,mDAAmD,EAAEnX,IAAI9B,QAAQ,CAAC,kFAAkF,EAAE0S,MAAM,CAAC;YAG7K,MAAM1M;QACR;QAEA,IAAIuC;QAEJ,IAAI2Q,IAAAA,yBAAe,EAAClT,MAAM;YACxBuC,YAAY;YACZtG,IAAIC,UAAU,GAAG;QACnB,OAAO,IAAIiX,IAAAA,yBAAe,EAACnT,MAAM;YAC/BuC,YAAY;YACZtG,IAAIC,UAAU,GAAGkX,IAAAA,wCAA8B,EAACpT;YAEhD,MAAMqT,cAAcC,IAAAA,4BAAa,EAC/BC,IAAAA,iCAAuB,EAACvT,MACxBlC,WAAW+T,QAAQ;YAGrB,gEAAgE;YAChE,YAAY;YACZ,MAAMzZ,UAAU,IAAIob;YACpB,IAAIC,IAAAA,oCAAoB,EAACrb,SAAS0D,IAAIS,YAAY,CAACmX,cAAc,GAAG;gBAClEzH,UAAU,cAActR,MAAMmS,IAAI,CAAC1U,QAAQ0S,MAAM;YACnD;YAEAmB,UAAU,YAAYoH;QACxB,OAAO,IAAI,CAACR,oBAAoB;YAC9B5W,IAAIC,UAAU,GAAG;QACnB;QAEA,MAAM,CAACyX,qBAAqBC,qBAAqB,GAAG9D,IAAAA,mCAAkB,EACpEhS,WAAWoR,aAAa,EACxBpT,IAAIsH,WAAW,EACftF,WAAW6R,WAAW,EACtB7R,WAAW4R,4BAA4B,EACvCF,IAAAA,wCAAmB,EAAC1T,KAAK,QACzBA,IAAIxC,KAAK,EACT;QAGF,MAAMua,kBAAkB,MAAMrM,kDAAoB,CAACgH,GAAG,CACpDjS,cACAqH,oBACAjH,MACAb,KACAyG;QAGF,MAAMuR,oBAAoBtM,kDAAoB,CAACgH,GAAG,CAChDjS,cACA4J,aAAahF,sBAAsB,EACnC0S,iBACA7S,wBAAwBI,aAAa,EACrC;YACElB,SAASgQ;QACX;QAGF,IAAIO,sBAAsB,MAAM;YAC9B,wFAAwF;YACxF,gCAAgC;YAChC,MAAMzQ;QACR;QAEA,IAAI;YACF,MAAM+T,aAAa,MAAMvM,kDAAoB,CAACgH,GAAG,CAC/CjS,cACAyX,+CAAyB,EACzB;gBACEC,gBAAgB7O,QAAQ;gBACxB8O,uBACE,qBAACzO;oBACCrB,mBAAmB0P;oBACnBzP,gBAAgBsP;oBAChB3S,yBAAyBA;oBACzB1H,OAAOwC,IAAIxC,KAAK;;gBAGpB6a,eAAe;oBACb7a,OAAOwC,IAAIxC,KAAK;oBAChB,wCAAwC;oBACxC8Y,kBAAkB;wBAACwB;qBAAqB;oBACxCtG;gBACF;YACF;YAGF;;;;;;;;;;;;OAYC,GACD,MAAMgF,qBAAqBxU,WAAWyU,uBAAuB,KAAK;YAClE,MAAMC,qBAAqB1U,WAAWsC,GAAG;YACzC,OAAO,MAAMqS,IAAAA,wCAAkB,EAACsB,YAAY;gBAC1ChC,mBAAmBZ,IAAAA,kDAA+B,EAChD,+DAA+D;gBAC/D,8DAA8D;gBAC9D,SAAS;gBACTV,kBAAkBuB,OAAO,IACzBlW,IAAIxC,KAAK,EACTgU;gBAEFlO,oBAAoBkT;gBACpBZ,uBAAuBC,IAAAA,oDAAyB,EAAC;oBAC/C1C;oBACAN;oBACAiD,sBAAsB,EAAE;oBACxBC,UAAU/T,WAAW+T,QAAQ;oBAC7BhD,iBAAiBA;gBACnB;gBACA6D,0BAA0B;gBAC1BF;YACF;QACF,EAAE,OAAO4B,UAAe;YACtB,IAAI9T,QAAQC,GAAG,CAACC,QAAQ,KAAK,iBAAiB0S,IAAAA,yBAAe,EAACkB,WAAW;gBACvE,MAAMC,iBACJjP,QAAQ,uDAAuDiP,cAAc;gBAC/EA;YACF;YACA,MAAMD;QACR;IACF;AACF;AAEA,SAASvT;IACP,IAAIF;IACJ,IAAI2T,SAAS,IAAI/I,QAAyB,CAACgJ;QACzC5T,oBAAoB4T;IACtB;IACA,OAAO;QAAC5T;QAAoB2T;KAAO;AACrC;AAEA,eAAevT,4BACbJ,iBAA+D,EAC/DhE,IAAgB,EAChBb,GAAqB,EACrB0Y,UAAmB,EACnBxT,uBAA2E,EAC3EC,KAAa;IAEb,MAAM,EAAEvE,cAAcyJ,YAAY,EAAE,GAAGrK;IAEvC,MAAM2Y,+BAA+B,IAAIC;IACzC,IAAIC,wBAAwBC,IAAAA,4CAA0B,EAAC;IAEvD,MAAMC,mCAAmD;QACvD5Z,MAAM;QACNuB,OAAO;QACPyR,cAAc,EAAE;QAChB6G,cAAcL,6BAA6BM,MAAM;QACjDC,aAAa;QACb,uFAAuF;QACvF,iGAAiG;QACjG,sCAAsC;QACtCC,YAAYR;QACZ,8EAA8E;QAC9E,2EAA2E;QAC3E,4BAA4B;QAC5B9M,iBAAiBgN;QACjBtI,YAAYC,0BAAc;QAC1B4I,QAAQ5I,0BAAc;QACtB6I,OAAO7I,0BAAc;QACrB8I,MAAM,EAAE;QACR,6DAA6D;QAC7DC,YAAY;IACd;IAEA,MAAMC,yBAAyB,MAAM9N,kDAAoB,CAACgH,GAAG,CAC3DqG,kCACA5S,eACAtF,MACAb,KACA0Y;IAGF,IAAIpQ,oBAAoB,MAAMoD,kDAAoB,CAACgH,GAAG,CACpDqG,kCACAlE,+CAAyB,EACzB;QACE,MAAMxD,SAAShH,aAAahF,sBAAsB,CAChDmU,wBACAtU,wBAAwBI,aAAa,EACrC;YACE2T,QAAQN,6BAA6BM,MAAM;YAC3C7U,SAAS,KAAO;QAClB;QAEF,OAAOqV,eAAepI,QAAQsH,6BAA6BM,MAAM;IACnE,GACA;QACEN,6BAA6Be,KAAK;IACpC;IAGF,IAAIb,sBAAsBc,yBAAyB,EAAE;QACnD,+DAA+D;QAC/DrR,kBAAkBsR,MAAM;QAExB,MAAMC,gCAAgC,IAAIjB;QAC1CC,wBAAwBC,IAAAA,4CAA0B,EAAC;QAEnD,MAAMgB,oCAAoD;YACxD3a,MAAM;YACNuB,OAAO;YACPyR,cAAc,EAAE;YAChB6G,cAAca,8BAA8BZ,MAAM;YAClDC,aAAa;YACb,uFAAuF;YACvF,iGAAiG;YACjG,sCAAsC;YACtCC,YAAYU;YACZ,8EAA8E;YAC9E,2EAA2E;YAC3E,4BAA4B;YAC5BhO,iBAAiBgN;YACjBtI,YAAYC,0BAAc;YAC1B4I,QAAQ5I,0BAAc;YACtB6I,OAAO7I,0BAAc;YACrB8I,MAAM,EAAE;YACR,6DAA6D;YAC7DC,YAAY;QACd;QAEA,MAAMQ,0BAA0B,MAAMrO,kDAAoB,CAACgH,GAAG,CAC5DoH,mCACA3T,eACAtF,MACAb,KACA0Y;QAGFpQ,oBAAoB,MAAMoD,kDAAoB,CAACgH,GAAG,CAChDoH,mCACAjF,+CAAyB,EACzB;YACE,MAAMxD,SAAShH,aAAahF,sBAAsB,CAChD0U,yBACA7U,wBAAwBI,aAAa,EACrC;gBACE2T,QAAQY,8BAA8BZ,MAAM;gBAC5C7U,SAAS,KAAO;YAClB;YAEF,OAAOqV,eAAepI,QAAQwI,8BAA8BZ,MAAM;QACpE,GACA;YACEY,8BAA8BH,KAAK;QACrC;IAEJ;IAEA,MAAM,CAACM,cAAcC,aAAa,GAAG3R,kBAAkBgN,GAAG;IAE1D,MAAMnZ,mBAAmB6d,cAAc9U;IAEvC,MAAM,EAAEsD,0BAA0B,EAAE,GAAGsK,IAAAA,4CAAwB;IAC/D,MAAMtV,QAAQ;IAEd,MAAM0c,YAAY5Q,QAAQ,yBACvB4Q,SAAS;IAEZ,IAAIC,wBAAwBrB,IAAAA,4CAA0B,EAAC;IACvD,IAAIsB,oBAAoBC,IAAAA,8CAA4B;IAEpD,SAASC,WAAWpW,GAAY,EAAEqW,SAAqB;QACrD,IACEC,IAAAA,6CAA2B,EAACtW,QAC5ByU,6BAA6BM,MAAM,CAACwB,OAAO,EAC3C;YACA,MAAMC,iBAAqC,AAACH,UACzCG,cAAc;YACjB,IAAI,OAAOA,mBAAmB,YAAYxW,eAAe8N,OAAO;gBAC9D2I,IAAAA,2CAAyB,EACvBxV,OACAuV,gBACAN,mBACAvB,uBACAsB;YAEJ;YACA,OAAOtd;QACT;QACA,OAAOA;IACT;IAEA,MAAM+d,+BAA+B,IAAIhC;IACzC,MAAMiC,mCAAmD;QACvD1b,MAAM;QACNuB,OAAO;QACPyR,cAAc,EAAE;QAChB6G,cAAc4B,6BAA6B3B,MAAM;QACjD,oEAAoE;QACpEC,aAAa;QACb,mGAAmG;QACnG,mEAAmE;QACnEC,YAAYyB;QACZ,iFAAiF;QACjF,qBAAqB;QACrB/O,iBAAiBsO;QACjB5J,YAAYC,0BAAc;QAC1B4I,QAAQ5I,0BAAc;QACtB6I,OAAO7I,0BAAc;QACrB8I,MAAM,EAAE;QACRC,YAAY;IACd;IAEA,MAAM,CAACuB,+BAA+BC,+BAA+B,GACnEd,aAAa3E,GAAG;IAClB,IAAI0F,eAAe;IACnB,IAAI;QACF,MAAMC,IAAAA,2DAAkC,EACtC;YACEvP,kDAAoB,CACjBgH,GAAG,CACFmI,kCACAX,yBACA,qBAAC7R;gBACCC,mBAAmBwS;gBACnBvS,gBAAgB,KAAO;gBACvBrD,yBAAyBA;gBACzBsD,4BAA4BA;gBAC5BhL,OAAOA;gBAET;gBACEyb,QAAQ2B,6BAA6B3B,MAAM;gBAC3C7U,SAASkW;YACX,GAEDY,KAAK,CAAC,KAAO;YAChB,OAAO;QACT,GACA;YACEN,6BAA6BlB,KAAK;QACpC,GACAwB,KAAK,CAAC,KAAO;IACjB,EAAE,OAAOhX,KAAc;QACrB,IAAI0W,6BAA6B3B,MAAM,CAACwB,OAAO,EAAE;QAC/C,2DAA2D;QAC7D,OAAO;YACLO,eAAe;YACf,uEAAuE;YACvE,yCAAyC;YACzC,IAAIxW,QAAQC,GAAG,CAAC0W,sBAAsB,EAAE;gBACtCC,IAAAA,iEAAyC,EAAClX,KAAKiB;YACjD;QACF;IACF;IAEA,IAAI6V,gBAAgBb,sBAAsBR,yBAAyB,EAAE;QACnE,2EAA2E;QAC3E,+EAA+E;QAC/E,6EAA6E;QAE7E,yBAAyB;QACzBQ,wBAAwBrB,IAAAA,4CAA0B,EAAC;QACnDsB,oBAAoBC,IAAAA,8CAA4B;QAEhD,MAAMgB,gCAAgC,IAAIzC;QAC1C,MAAM0C,oCAAoD;YACxDnc,MAAM;YACNuB,OAAO;YACPyR,cAAc,EAAE;YAChB6G,cAAcqC,8BAA8BpC,MAAM;YAClD,oEAAoE;YACpEC,aAAa;YACb,mGAAmG;YACnG,mEAAmE;YACnEC,YAAYkC;YACZ,iFAAiF;YACjF,qBAAqB;YACrBxP,iBAAiBsO;YACjB5J,YAAYC,0BAAc;YAC1B4I,QAAQ5I,0BAAc;YACtB6I,OAAO7I,0BAAc;YACrB8I,MAAM,EAAE;YACRC,YAAY;QACd;QAEA,IAAI;YACF,MAAM0B,IAAAA,2DAAkC,EACtC;gBACEvP,kDAAoB,CACjBgH,GAAG,CACF4I,mCACApB,yBACA,qBAAC7R;oBACCC,mBAAmByS;oBACnBxS,gBAAgB,KAAO;oBACvBrD,yBAAyBA;oBACzBsD,4BAA4BA;oBAC5BhL,OAAOA;oBAET;oBACEyb,QAAQoC,8BAA8BpC,MAAM;oBAC5C7U,SAASkW;gBACX,GAEDY,KAAK,CAAC,KAAO;gBAChB,OAAO;YACT,GACA;gBACEG,8BAA8B3B,KAAK;YACrC;QAEJ,EAAE,OAAOxV,KAAK;YACZ,IAAImX,8BAA8BpC,MAAM,CAACwB,OAAO,EAAE;YAChD,2DAA2D;YAC7D,OAAO;gBACL,2EAA2E;gBAC3E,wEAAwE;gBACxE,IAAIjW,QAAQC,GAAG,CAAC0W,sBAAsB,EAAE;oBACtCC,IAAAA,iEAAyC,EAAClX,KAAKiB;gBACjD;YACF;QACF;IACF;IAEA,SAASoW;QACP,IAAI;YACFC,IAAAA,0CAAwB,EACtBrW,OACAiV,mBACAvB,uBACAsB;QAEJ,EAAE,OAAM,CAAC;QACT,OAAO;IACT;IAEAtV,gCAAkB,qBAAC0W;AACrB;AAEA,SAAS9B,eACPpI,MAAkC,EAClC4H,MAAmB;IAEnB,OAAO,IAAIwC,eAAe;QACxBC,OAAMvC,UAAuD;YAC3D,MAAMtT,SAASwL,OAAOvL,SAAS;YAC/B,SAAS6V,YAAYzX,GAAY;gBAC/BiV,WAAWjC,KAAK,CAAChT;gBACjB2B,OAAO+T,MAAM,CAAC1V;YAChB;YACA,SAAS0X,eAAe,EACtB5V,IAAI,EACJtH,KAAK,EACgC;gBACrC,IAAIsH,MAAM;oBACR,mDAAmD;oBACnD,mEAAmE;oBACnE;gBACF,OAAO;oBACL,IAAI,CAACiT,OAAOwB,OAAO,EAAE;wBACnBtB,WAAW0C,OAAO,CAACnd;wBACnBmH,OAAOE,IAAI,GAAG+V,IAAI,CAACF,gBAAgBD;oBACrC,OAAO;wBACL,sFAAsF;wBACtF9V,OAAO+T,MAAM;oBACf;gBACF;YACF;YACA/T,OAAOE,IAAI,GAAG+V,IAAI,CAACF,gBAAgBD;QACrC;IACF;AACF;AAaA;;CAEC,GACD,SAASI,+BAA+Bxa,SAAoB;IAC1D,MAAM,EAAEpD,mBAAmB,EAAEmF,kBAAkB,EAAE,GAAG/B;IACpD,IAAI,CAAC+B,oBAAoB,OAAO;IAEhC,IAAInF,uBAAuBA,oBAAoB2Q,IAAI,GAAG,GAAG;QACvD,OAAO;IACT;IAEA,OAAO;AACT;AAEA,eAAeR,kBACbtK,GAAoB,EACpB7D,GAAqB,EACrBH,GAAqB,EACrBgN,QAAqC,EACrCzL,SAAoB,EACpBV,IAAgB;IAEhBb,IAAIS,YAAY,CAACC,KAAK,GAAG;IAEzB,kEAAkE;IAClE,yEAAyE;IACzE,6DAA6D;IAC7D,MAAM8Q,YAAY;IAElB,MAAMxP,aAAahC,IAAIgC,UAAU;IACjC,MAAMqI,eAAerI,WAAWqI,YAAY;IAC5C,4BAA4B;IAC5B,MAAMnF,0BAA0BlD,WAAWkD,uBAAuB;IAClE,MAAM/G,sBAAsBoD,UAAUpD,mBAAmB;IAEzD,MAAM,EAAEqK,0BAA0B,EAAEqK,wBAAwB,EAAE,GAC5DC,IAAAA,4CAAwB;IAE1B,MAAMC,kBAAkBC,IAAAA,yBAAiB,EACvC1G,IAAAA,iBAAS,IAAG2G,uBAAuB,IACnCjR,WAAW2C,YAAY,CAACuO,mBAAmB;IAG7C,MAAMC,YACJnR,WAAWoR,aAAa,CAACC,aAAa,CACnCC,MAAM,CACL,CAACC,WACCA,SAASC,QAAQ,CAAC,UAAU,CAACD,SAASC,QAAQ,CAAC,eAElDzU,GAAG,CAAC,CAACwU;YAKOvR;eALO;YAClByR,KAAK,CAAC,EAAEzT,IAAIsH,WAAW,CAAC,OAAO,EAAEiM,SAAS,EAAEG,IAAAA,wCAAmB,EAC7D1T,KACA,OACA,CAAC;YACH2T,SAAS,GAAE3R,2CAAAA,WAAW4R,4BAA4B,qBAAvC5R,wCAAyC,CAACuR,SAAS;YAC9DM,aAAa7R,WAAW6R,WAAW;YACnCC,UAAU;YACVtW,OAAOwC,IAAIxC,KAAK;QAClB;;IAEJ,MAAM,CAAC+K,gBAAgBwL,gBAAgB,GAAGC,IAAAA,mCAAkB,EAC1DhS,WAAWoR,aAAa,EACxB,6CAA6C;IAC7C,8EAA8E;IAC9EpT,IAAIsH,WAAW,EACftF,WAAW6R,WAAW,EACtB7R,WAAW4R,4BAA4B,EACvCF,IAAAA,wCAAmB,EAAC1T,KAAK,OACzBA,IAAIxC,KAAK,EACTwE,WAAWjE,IAAI;IAGjB,MAAMkW,4BAAwD,IAAI/C;IAClE,+EAA+E;IAC/E,MAAMgD,gBAAgB,CAAC,CAAClS,WAAW2C,YAAY,CAACxH,iBAAiB;IACjE,SAASgX,qBAAqBjQ,GAAkB;QAC9C,OAAOlC,WAAWmC,6BAA6B,oBAAxCnC,WAAWmC,6BAA6B,MAAxCnC,YACLkC,KACAF,KACAT,mBAAmBvD,KAAK;IAE5B;IACA,MAAMoU,+BAA+BC,IAAAA,qDAAiC,EACpE,CAAC,CAACrS,WAAWsC,GAAG,EAChB,CAAC,CAACtC,WAAWsS,UAAU,EACvBL,2BACAC,eACAC;IAGF,SAASI,qBAAqBrQ,GAAkB;QAC9C,OAAOlC,WAAWmC,6BAA6B,oBAAxCnC,WAAWmC,6BAA6B,MAAxCnC,YACLkC,KACAF,KACAT,mBAAmBvD,KAAK;IAE5B;IACA,MAAMwU,oBAAoC,EAAE;IAC5C,MAAMC,2BAA2BC,IAAAA,0CAAsB,EACrD,CAAC,CAAC1S,WAAWsC,GAAG,EAChB,CAAC,CAACtC,WAAWsS,UAAU,EACvBL,2BACAO,mBACAN,eACAK;IAGF,IAAIyH,6BAAgE;IACpE,MAAM7L,YAAY,CAAC7P,MAAc5B;QAC/ByB,IAAIgQ,SAAS,CAAC7P,MAAM5B;QAEpBsO,SAAS1Q,OAAO,KAAK,CAAC;QACtB0Q,SAAS1Q,OAAO,CAACgE,KAAK,GAAGH,IAAI2G,SAAS,CAACxG;QAEvC,OAAOH;IACT;IAEA,IAAIsL,iBAAwC;IAE5C,IAAI;QACF,IAAIzJ,WAAW2C,YAAY,CAACC,SAAS,EAAE;YACrC,IAAI5C,WAAW2C,YAAY,CAACxH,iBAAiB,EAAE;gBAC7C;;;;;;;;;;;;SAYC,GAED,MAAM8e,qBAAqB;gBAC3B,MAAMC,cAAc,IAAIlK,MAAMiK;gBAE9B,MAAME,oCAAoC,IAAIvD;gBAC9C,MAAMwD,gCACJD,kCAAkClD,MAAM;gBAC1C,MAAMC,cAAc,IAAImD,wBAAW;gBAEnC,MAAMC,kCACH7Q,iBAAiB;oBAChBtM,MAAM;oBACNuB,OAAO;oBACPyR,cAAcnS,IAAIS,YAAY,CAAC0R,YAAY;oBAC3C6G,cAAcoD;oBACdlD;oBACA,uFAAuF;oBACvF,iGAAiG;oBACjG,sCAAsC;oBACtCC,YAAY;oBACZ,8EAA8E;oBAC9E,2EAA2E;oBAC3E,4BAA4B;oBAC5BtN,iBAAiB;oBACjB0E,YAAYC,0BAAc;oBAC1B4I,QAAQ5I,0BAAc;oBACtB6I,OAAO7I,0BAAc;oBACrB8I,MAAM;2BAAItZ,IAAIS,YAAY,CAAC0R,YAAY;qBAAC;gBAC1C;gBAEF,IAAIoK,uBAAuB;gBAC3B,SAASC,yBAAyBtY,GAAY;oBAC5C,IAAIsW,IAAAA,6CAA2B,EAACtW,MAAM;wBACpCqY,uBAAuB;wBACvB,OAAOrY,IAAIuY,MAAM;oBACnB,OAAO,IAAIL,8BAA8B3B,OAAO,EAAE;wBAChD8B,uBAAuB;wBACvB,OAAON;oBACT,OAAO,IACLzX,QAAQC,GAAG,CAACiY,gBAAgB,IAC5BlY,QAAQC,GAAG,CAAC0W,sBAAsB,EAClC;wBACAC,IAAAA,iEAAyC,EAAClX,KAAK3C,UAAU4D,KAAK;oBAChE;gBACA,sEAAsE;gBACtE,2EAA2E;gBAC3E,mCAAmC;gBACrC;gBAEA,0FAA0F;gBAC1F,wFAAwF;gBACxF,MAAMqU,yBAAyB,MAAM9N,kDAAoB,CAACgH,GAAG,CAC3D4J,iCACAnW,eACAtF,MACAb,KACAG,IAAIC,UAAU,KAAK;gBAInBsL,kDAAoB,CAACgH,GAAG,CACtB,qBAAqB;gBACrB4J,iCACA,sBAAsB;gBACtBjS,aAAa6P,SAAS,EACtB,4CAA4C;gBAC5CV,wBACAtU,wBAAwBI,aAAa,EACrC;oBACElB,SAASoY;oBACT,iFAAiF;oBACjF,qCAAqC;oBACrCG,YAAY9f;oBACZoc,QAAQmD;gBACV,GAEFlB,KAAK,CAAC,CAAChX;oBACP,IACE,AAACM,CAAAA,QAAQC,GAAG,CAACiY,gBAAgB,IAC3BlY,QAAQC,GAAG,CAAC0W,sBAAsB,AAAD,KACnC,CAACgB,kCAAkClD,MAAM,CAACwB,OAAO,IACjD,CAACD,IAAAA,6CAA2B,EAACtW,QAC7B,CAAC0Y,IAAAA,wCAAoB,EAAC1Y,MACtB;wBACAkX,IAAAA,iEAAyC,EAAClX,KAAK3C,UAAU4D,KAAK;oBAChE;gBACF;gBAEA,8FAA8F;gBAC9F,MAAM+T,YAAY2D,UAAU;gBAC5BV,kCAAkCzC,KAAK,CAACwC;gBAExC,mGAAmG;gBACnG,+FAA+F;gBAC/F,iDAAiD;gBAEjD,kDAAkD;gBAClDK,uBAAuB;gBACvB,MAAMO,8BAA8B,IAAIlE;gBACxC,MAAMmE,0BAA0BD,4BAA4B7D,MAAM;gBAClE,MAAMJ,wBAAwBC,IAAAA,4CAA0B,EACtD9W,WAAWyM,sBAAsB;gBAGnC,MAAMuO,4BAA6CvR,iBAAiB;oBAClEtM,MAAM;oBACNuB,OAAO;oBACPyR,cAAcnS,IAAIS,YAAY,CAAC0R,YAAY;oBAC3C6G,cAAc+D;oBACd,uFAAuF;oBACvF7D,aAAa;oBACb,oFAAoF;oBACpF,8CAA8C;oBAC9CC,YAAY2D;oBACZjR,iBAAiBgN;oBACjBtI,YAAYC,0BAAc;oBAC1B4I,QAAQ5I,0BAAc;oBACtB6I,OAAO7I,0BAAc;oBACrB8I,MAAM;2BAAItZ,IAAIS,YAAY,CAAC0R,YAAY;qBAAC;gBAC1C;gBAEA,SAAS8K,mBAAmB/Y,GAAY;oBACtC,IAAIsW,IAAAA,6CAA2B,EAACtW,MAAM;wBACpCqY,uBAAuB;wBACvB,OAAOrY,IAAIuY,MAAM;oBACnB,OAAO,IAAIM,wBAAwBtC,OAAO,EAAE;wBAC1C8B,uBAAuB;wBACvB,OAAON;oBACT;oBAEA,OAAO7H,6BAA6BlQ;gBACtC;gBAEA,MAAMgZ,yBAAyB,MAAMxR,kDAAoB,CAACgH,GAAG,CAC3DsK,2BACA7W,eACAtF,MACAb,KACAG,IAAIC,UAAU,KAAK;gBAErB,MAAMuU,oBAAqBqH,6BACzB,MAAMmB,IAAAA,yDAAgC,EACpClC,IAAAA,2DAAkC,EAChC,IACEvP,kDAAoB,CAACgH,GAAG,CACtB,qBAAqB;oBACrBsK,2BACA,sBAAsB;oBACtB3S,aAAa6P,SAAS,EACtB,4CAA4C;oBAC5CgD,wBACAhY,wBAAwBI,aAAa,EACrC;wBACElB,SAAS6Y;wBACThE,QAAQ8D;oBACV,IAEJ;oBACED,4BAA4BpD,KAAK,CAACwC;gBACpC;gBAIN,MAAM/f,mBACJwY,kBAAkByI,QAAQ,IAC1BlY;gBAGF,IAAIiV,wBAAwBrB,IAAAA,4CAA0B,EACpD9W,WAAWyM,sBAAsB;gBAEnC,MAAM4O,gBAAgB,IAAIzE;gBAC1B,MAAM0E,oBAAoC;oBACxCne,MAAM;oBACNuB,OAAO;oBACPyR,cAAcnS,IAAIS,YAAY,CAAC0R,YAAY;oBAC3C6G,cAAcqE,cAAcpE,MAAM;oBAClC,oEAAoE;oBACpEC,aAAa;oBACb,6EAA6E;oBAC7E,8DAA8D;oBAC9DC,YAAY;oBACZ,iFAAiF;oBACjF,qBAAqB;oBACrBtN,iBAAiBsO;oBACjB5J,YAAYC,0BAAc;oBAC1B4I,QAAQ5I,0BAAc;oBACtB6I,OAAO7I,0BAAc;oBACrB8I,MAAM;2BAAItZ,IAAIS,YAAY,CAAC0R,YAAY;qBAAC;gBAC1C;gBACA,IAAIoL,eAAe;gBACnB,IAAInD,oBAAoBC,IAAAA,8CAA4B;gBACpD,SAASC,WAAWpW,GAAY,EAAEqW,SAAoB;oBACpD,IACEC,IAAAA,6CAA2B,EAACtW,QAC5BmZ,cAAcpE,MAAM,CAACwB,OAAO,EAC5B;wBACA8C,eAAe;wBAEf,MAAM7C,iBAAqC,AAACH,UACzCG,cAAc;wBACjB,IAAI,OAAOA,mBAAmB,UAAU;4BACtCC,IAAAA,2CAAyB,EACvBpZ,UAAU4D,KAAK,EACfuV,gBACAN,mBACAvB,uBACAsB;wBAEJ;wBACA;oBACF;oBAEA,OAAO1F,yBAAyBvQ,KAAKqW;gBACvC;gBAEA,MAAML,YAAY5Q,QAAQ,yBACvB4Q,SAAS;gBACZ,IAAI,EAAEsD,OAAO,EAAE7V,SAAS,EAAE,GAAG,MAAMsT,IAAAA,2DAAkC,EACnE,IACEvP,kDAAoB,CAACgH,GAAG,CACtB4K,mBACApD,yBACA,qBAAC7R;wBACCC,mBAAmBqM,kBAAkB8I,iBAAiB;wBACtDlV,gBAAgBA;wBAChBrD,yBAAyBA;wBACzBsD,4BAA4BA;wBAC5BhL,OAAOwC,IAAIxC,KAAK;wBAElB;wBACEyb,QAAQoE,cAAcpE,MAAM;wBAC5B7U,SAASkW;wBACTnE,WAAW,CAAC7Z;4BACVA,QAAQsL,OAAO,CAAC,CAAClJ,OAAOF;gCACtB2R,UAAU3R,KAAKE;4BACjB;wBACF;wBACA0X,kBAAkBpU,WAAWqU,qBAAqB;wBAClD,mEAAmE;wBACnE,6CAA6C;wBAC7CC,kBAAkBtU,WAAWuU,kBAAkB,GAC3C,EAAE,GACF;4BAACxC;yBAAgB;oBACvB,IAEJ;oBACEsJ,cAAc3D,KAAK,CAACwC;gBACtB;gBAGF,IAAI/B,sBAAsBR,yBAAyB,EAAE;oBACnD,yEAAyE;oBACzE,uEAAuE;oBACvE,2EAA2E;oBAC3E,iFAAiF;oBACjF,iFAAiF;oBAEjF,yBAAyB;oBACzBQ,wBAAwBrB,IAAAA,4CAA0B,EAChD9W,WAAWyM,sBAAsB;oBAEnC2L,oBAAoBC,IAAAA,8CAA4B;oBAChDkD,eAAe;oBAEf,MAAMG,qBAAqB,IAAI9E;oBAC/B,MAAM+E,yBAAyC;wBAC7Cxe,MAAM;wBACNuB,OAAO;wBACPyR,cAAcnS,IAAIS,YAAY,CAAC0R,YAAY;wBAC3C6G,cAAc0E,mBAAmBzE,MAAM;wBACvC,oEAAoE;wBACpEC,aAAa;wBACbC,YAAYuE;wBACZ,iFAAiF;wBACjF,qBAAqB;wBACrB7R,iBAAiBsO;wBACjB5J,YAAYC,0BAAc;wBAC1B4I,QAAQ5I,0BAAc;wBACtB6I,OAAO7I,0BAAc;wBACrB8I,MAAM;+BAAItZ,IAAIS,YAAY,CAAC0R,YAAY;yBAAC;oBAC1C;oBAEE,CAAA,EAAEqL,OAAO,EAAE7V,SAAS,EAAE,GAAG,MAAMsT,IAAAA,2DAAkC,EACjE,IACEvP,kDAAoB,CAACgH,GAAG,CACtBiL,wBACAzD,yBACA,qBAAC7R;4BACCC,mBAAmBqM,kBAAkB8I,iBAAiB;4BACtDlV,gBAAgBA;4BAChBrD,yBAAyBA;4BACzBsD,4BAA4BA;4BAC5BhL,OAAOwC,IAAIxC,KAAK;4BAElB;4BACEyb,QAAQyE,mBAAmBzE,MAAM;4BACjC7U,SAASkW;4BACTnE,WAAW,CAAC7Z;gCACVA,QAAQsL,OAAO,CAAC,CAAClJ,OAAOF;oCACtB2R,UAAU3R,KAAKE;gCACjB;4BACF;4BACA0X,kBAAkBpU,WAAWqU,qBAAqB;4BAClD,mEAAmE;4BACnE,6CAA6C;4BAC7CC,kBAAkBtU,WAAWuU,kBAAkB,GAC3C,EAAE,GACF;gCAACxC;6BAAgB;wBACvB,IAEJ;wBACE2J,mBAAmBhE,KAAK,CAACwC;oBAC3B,EACF;gBACF;gBAEAV,IAAAA,0CAAwB,EACtBja,UAAU4D,KAAK,EACfiV,mBACAvB,uBACAsB;gBAGF,MAAMvE,wBAAwBC,IAAAA,oDAAyB,EAAC;oBACtD1C;oBACAN;oBACAiD,sBAAsBtB;oBACtBuB,UAAU/T,WAAW+T,QAAQ;oBAC7BhD,iBAAiBA;gBACnB;gBAEA/F,SAASrM,UAAU,GAAG,MAAMid,IAAAA,oCAAc,EAACjJ,kBAAkByI,QAAQ;gBAErE,IAAIG,gBAAgBhB,sBAAsB;oBACxC,IAAI5U,aAAa,MAAM;wBACrB,oBAAoB;wBACpBqF,SAASrF,SAAS,GAAGkW,IAAAA,4CAA4B,EAC/ClW,WACAxJ;oBAEJ,OAAO;wBACL,oBAAoB;wBACpB6O,SAASrF,SAAS,GAAGmW,IAAAA,4CAA4B;oBACnD;oBACAnJ,kBAAkBuB,OAAO;oBACzB,OAAO;wBACLrH,iBAAiBoF;wBACjB/E,WAAWsF;wBACXnD,QAAQ,MAAM0M,IAAAA,8CAAwB,EAACP,SAAS;4BAC9C5H;wBACF;wBACArH,eAAeyP,IAAAA,sCAAoB,EACjCnF,uBACAsB;wBAEF,0CAA0C;wBAC1C7J,qBAAqB0M,0BAA0BzM,UAAU;wBACzD0N,iBAAiBjB,0BAA0B5D,MAAM;wBACjDlJ,gBAAgB8M,0BAA0B3D,KAAK;wBAC/CvJ,eAAekN,0BAA0B1D,IAAI;oBAC/C;gBACF,OAAO;oBACL,cAAc;oBACd,IAAI/X,UAAU0K,YAAY,EAAE;wBAC1B,MAAM,IAAIiS,8CAAqB,CAC7B;oBAEJ;oBAEA,IAAIvI,aAAa6H;oBACjB,IAAI7V,aAAa,MAAM;wBACrB,+FAA+F;wBAC/F,qGAAqG;wBACrG,MAAM+N,SAASpM,QAAQ,yBACpBoM,MAAM;wBAET,qEAAqE;wBACrE,4EAA4E;wBAC5E,MAAMyI,gBAAgB,IAAI1C;wBAE1B,MAAM2C,eAAe,MAAM1I,qBACzB,qBAACrN;4BACCC,mBAAmB6V;4BACnB5V,gBAAgB,KAAO;4BACvBrD,yBAAyBA;4BACzBsD,4BAA4BA;4BAC5BhL,OAAOwC,IAAIxC,KAAK;4BAElB6gB,KAAKC,KAAK,CAACD,KAAKE,SAAS,CAAC5W,aAC1B;4BACEsR,QAAQuF,IAAAA,4CAA0B,EAAC;4BACnCpa,SAASqQ;4BACTjX,OAAOwC,IAAIxC,KAAK;wBAClB;wBAGF,wGAAwG;wBACxGmY,aAAaJ,IAAAA,kCAAY,EAACiI,SAASY;oBACrC;oBAEA,OAAO;wBACLvP,iBAAiBoF;wBACjB/E,WAAWsF;wBACXnD,QAAQ,MAAMoN,IAAAA,6CAAuB,EAAC9I,YAAY;4BAChDM,mBAAmBZ,IAAAA,kDAA+B,EAChDV,kBAAkB+J,eAAe,IACjC1e,IAAIxC,KAAK,EACTgU;4BAEFoE;wBACF;wBACArH,eAAeyP,IAAAA,sCAAoB,EACjCnF,uBACAsB;wBAEF,0CAA0C;wBAC1C7J,qBAAqB0M,0BAA0BzM,UAAU;wBACzD0N,iBAAiBjB,0BAA0B5D,MAAM;wBACjDlJ,gBAAgB8M,0BAA0B3D,KAAK;wBAC/CvJ,eAAekN,0BAA0B1D,IAAI;oBAC/C;gBACF;YACF,OAAO;gBACL;;;;;;;;;;;;;;;;SAgBC,GAED,MAAMqF,QAAQpd,UAAUoO,gBAAgB;gBACxC,IAAI,CAACgP,OAAO;oBACV,MAAM,IAAI3M,MACR;gBAEJ;gBAEA,MAAMiK,qBAAqB;gBAC3B,MAAMC,cAAc,IAAIlK,MAAMiK;gBAE9B,iFAAiF;gBACjF,8DAA8D;gBAC9D,MAAME,oCAAoC,IAAIvD;gBAC9C,MAAMwD,gCACJD,kCAAkClD,MAAM;gBAE1C,MAAMC,cAAc,IAAImD,wBAAW;gBACnC,MAAMC,kCACH7Q,iBAAiB;oBAChBtM,MAAM;oBACNuB,OAAO;oBACPyR,cAAcnS,IAAIS,YAAY,CAAC0R,YAAY;oBAC3C6G,cAAcoD;oBACdlD;oBACAC,YAAY;oBACZtN,iBAAiB;oBACjB0E,YAAYC,0BAAc;oBAC1B4I,QAAQ5I,0BAAc;oBACtB6I,OAAO7I,0BAAc;oBACrB8I,MAAM;2BAAItZ,IAAIS,YAAY,CAAC0R,YAAY;qBAAC;gBAC1C;gBAEF,MAAMqH,yBAAyB,MAAM9N,kDAAoB,CAACgH,GAAG,CAC3D4J,iCACAnW,eACAtF,MACAb,KACAG,IAAIC,UAAU,KAAK;gBAGrB,IAAImc,uBAAuB;gBAE3B,SAASC,0BAAyBtY,GAAY;oBAC5C,IAAIsW,IAAAA,6CAA2B,EAACtW,MAAM;wBACpCqY,uBAAuB;wBACvB,OAAOrY,IAAIuY,MAAM;oBACnB,OAAO,IAAIL,8BAA8B3B,OAAO,EAAE;wBAChD8B,uBAAuB;wBACvB,OAAON;oBACT,OAAO,IAAIzX,QAAQC,GAAG,CAACiY,gBAAgB,EAAE;wBACvCtB,IAAAA,iEAAyC,EAAClX,KAAK3C,UAAU4D,KAAK;oBAChE;gBACA,sEAAsE;gBACtE,2EAA2E;gBAC3E,mCAAmC;gBACrC;gBAEA,IAAI;oBACF,MAAMyZ,oBAAoBlT,kDAAoB,CAACgH,GAAG,CAChD,qBAAqB;oBACrB4J,iCACA,sBAAsB;oBACtBjS,aAAahF,sBAAsB,EACnC,4CAA4C;oBAC5CmU,wBACAtU,wBAAwBI,aAAa,EACrC;wBACElB,SAASoY;wBACTvD,QAAQmD;oBACV;oBAGF,8FAA8F;oBAC9F,MAAMlD,YAAY2D,UAAU;oBAC5B,iGAAiG;oBACjG,sDAAsD;oBACtDV,kCAAkCzC,KAAK,CAACwC;oBAExC,MAAM/f,mBAAmByiB,mBAAmB1Z;gBAC9C,EAAE,OAAOhB,KAAK;oBACZ,IACEM,QAAQC,GAAG,CAACiY,gBAAgB,IAC5BxY,QAAQgY,eACR,CAAC1B,IAAAA,6CAA2B,EAACtW,QAC7B,CAAC0Y,IAAAA,wCAAoB,EAAC1Y,MACtB;wBACAkX,IAAAA,iEAAyC,EAAClX,KAAK3C,UAAU4D,KAAK;oBAChE;gBACF;gBAEA,oEAAoE;gBACpE,MAAM2X,8BAA8B,IAAIlE;gBACxC,MAAMmE,0BAA0BD,4BAA4B7D,MAAM;gBAClE,IAAIJ,wBAAwBC,IAAAA,4CAA0B,EACpD9W,WAAWyM,sBAAsB;gBAEnC8N,uBAAuB;gBACvB,IAAIgB,eAAe;gBAEnB,MAAMP,4BAA6CvR,iBAAiB;oBAClEtM,MAAM;oBACNuB,OAAO;oBACPyR,cAAcnS,IAAIS,YAAY,CAAC0R,YAAY;oBAC3C6G,cAAc+D;oBACd,uFAAuF;oBACvF7D,aAAa;oBACbC,YAAY2D;oBACZjR,iBAAiBgN;oBACjBtI,YAAYC,0BAAc;oBAC1B4I,QAAQ5I,0BAAc;oBACtB6I,OAAO7I,0BAAc;oBACrB8I,MAAM;2BAAItZ,IAAIS,YAAY,CAAC0R,YAAY;qBAAC;gBAC1C;gBAEA,IAAIgI,wBAAwBrB,IAAAA,4CAA0B,EACpD9W,WAAWyM,sBAAsB;gBAEnC,MAAM4O,gBAAgB,IAAIzE;gBAC1B,MAAM0E,oBAAoC;oBACxCne,MAAM;oBACNuB,OAAO;oBACPyR,cAAcnS,IAAIS,YAAY,CAAC0R,YAAY;oBAC3C6G,cAAcqE,cAAcpE,MAAM;oBAClC,oEAAoE;oBACpEC,aAAa;oBACb,+EAA+E;oBAC/E,+EAA+E;oBAC/E,8DAA8D;oBAC9DC,YAAY;oBACZ,iFAAiF;oBACjF,qBAAqB;oBACrBtN,iBAAiBsO;oBACjB5J,YAAYC,0BAAc;oBAC1B4I,QAAQ5I,0BAAc;oBACtB6I,OAAO7I,0BAAc;oBACrB8I,MAAM;2BAAItZ,IAAIS,YAAY,CAAC0R,YAAY;qBAAC;gBAC1C;gBAEA,MAAM+K,yBAAyB,MAAMxR,kDAAoB,CAACgH,GAAG,CAC3DsK,2BACA7W,eACAtF,MACAb,KACAG,IAAIC,UAAU,KAAK;gBAGrB,SAAS6c,oBAAmB/Y,GAAY;oBACtC,IAAIsW,IAAAA,6CAA2B,EAACtW,MAAM;wBACpCqY,uBAAuB;wBACvB,OAAOrY,IAAIuY,MAAM;oBACnB,OAAO,IAAIM,wBAAwBtC,OAAO,EAAE;wBAC1C8B,uBAAuB;wBACvB,OAAON;oBACT;oBAEA,OAAO7H,6BAA6BlQ;gBACtC;gBAEA,IAAIkW,oBAAoBC,IAAAA,8CAA4B;gBACpD,SAASC,YAAWpW,GAAY,EAAEqW,SAAqB;oBACrD,IACEC,IAAAA,6CAA2B,EAACtW,QAC5BmZ,cAAcpE,MAAM,CAACwB,OAAO,EAC5B;wBACA8C,eAAe;wBAEf,MAAM7C,iBAAqC,AAACH,UACzCG,cAAc;wBACjB,IAAI,OAAOA,mBAAmB,UAAU;4BACtCC,IAAAA,2CAAyB,EACvBpZ,UAAU4D,KAAK,EACfuV,gBACAN,mBACAvB,uBACAsB;wBAEJ;wBACA;oBACF;oBAEA,OAAO1F,yBAAyBvQ,KAAKqW;gBACvC;gBAEA,IAAIjS;gBACJ,IAAIqN;gBACJ,IAAI;oBACFA,aAAa,MAAMsF,IAAAA,2DAAkC,EACnD;wBACE,MAAM4D,aAAa,AACjBnT,kDAAoB,CAACgH,GAAG,CACtB,qBAAqB;wBACrBsK,2BACA,sBAAsB;wBACtB3S,aAAahF,sBAAsB,EACnC,4CAA4C;wBAC5C6X,wBACAhY,wBAAwBI,aAAa,EACrC;4BACElB,SAAS6Y;4BACThE,QAAQ8D;wBACV,GAEFzH,GAAG;wBAELhN,oBAAoBuW,UAAU,CAAC,EAAE;wBACjC,MAAMC,kBAAkBD,UAAU,CAAC,EAAE;wBAErC,MAAM3E,YAAY5Q,QAAQ,yBACvB4Q,SAAS;wBACZ,MAAM,EAAEsD,OAAO,EAAE,GAAG,MAAM9R,kDAAoB,CAACgH,GAAG,CAChD4K,mBACApD,yBACA,qBAAC7R;4BACCC,mBAAmBwW;4BACnBvW,gBAAgBA;4BAChBrD,yBAAyBA;4BACzBsD,4BAA4BA;4BAC5BhL,OAAOwC,IAAIxC,KAAK;4BAElB;4BACEyb,QAAQoE,cAAcpE,MAAM;4BAC5B7U,SAASkW;4BACT,mEAAmE;4BACnE,6CAA6C;4BAC7ChE,kBAAkBtU,WAAWuU,kBAAkB,GAC3C,EAAE,GACF;gCAACxC;6BAAgB;wBACvB;wBAEF,OAAOyJ;oBACT,GACA;wBACEH,cAAc3D,KAAK,CAACwC;wBACpBY,4BAA4BpD,KAAK,CAACwC;oBACpC;gBAEJ,EAAE,OAAOhY,KAAK;oBACZ,IAAI6Y,wBAAwBtC,OAAO,IAAI4C,cAAcpE,MAAM,CAACwB,OAAO,EAAE;oBACnE,iFAAiF;oBACjF,eAAe;oBACjB,OAAO;wBACL,kFAAkF;wBAClF,MAAMvW;oBACR;gBACF;gBAEA,IAAIiW,sBAAsBR,yBAAyB,EAAE;oBACnD,yEAAyE;oBACzE,uEAAuE;oBACvE,2EAA2E;oBAC3E,iFAAiF;oBACjF,iFAAiF;oBAEjF,yBAAyB;oBACzBQ,wBAAwBrB,IAAAA,4CAA0B,EAChD9W,WAAWyM,sBAAsB;oBAEnC2L,oBAAoBC,IAAAA,8CAA4B;oBAChDkD,eAAe;oBACfhB,uBAAuB;oBAEvB1D,wBAAwBC,IAAAA,4CAA0B,EAChD9W,WAAWyM,sBAAsB;oBAEnC,MAAMsQ,8BAA8B,IAAInG;oBACxC,MAAMoG,4BAA6CvT,iBAAiB;wBAClEtM,MAAM;wBACNuB,OAAO;wBACPyR,cAAcnS,IAAIS,YAAY,CAAC0R,YAAY;wBAC3C6G,cAAc+F,4BAA4B9F,MAAM;wBAChD,uFAAuF;wBACvFC,aAAa;wBACbC,YAAY4F;wBACZlT,iBAAiBgN;wBACjBtI,YAAYC,0BAAc;wBAC1B4I,QAAQ5I,0BAAc;wBACtB6I,OAAO7I,0BAAc;wBACrB8I,MAAM;+BAAItZ,IAAIS,YAAY,CAAC0R,YAAY;yBAAC;oBAC1C;oBAEA,MAAM8M,wBAAwB,MAAMvT,kDAAoB,CAACgH,GAAG,CAC1DsK,2BACA7W,eACAtF,MACAb,KACAG,IAAIC,UAAU,KAAK;oBAGrB,MAAMsd,qBAAqB,IAAI9E;oBAC/B,MAAM+E,yBAAyC;wBAC7Cxe,MAAM;wBACNuB,OAAO;wBACPyR,cAAcnS,IAAIS,YAAY,CAAC0R,YAAY;wBAC3C6G,cAAc0E,mBAAmBzE,MAAM;wBACvC,oEAAoE;wBACpEC,aAAa;wBACbC,YAAYuE;wBACZ,iFAAiF;wBACjF,qBAAqB;wBACrB7R,iBAAiBsO;wBACjB5J,YAAYC,0BAAc;wBAC1B4I,QAAQ5I,0BAAc;wBACtB6I,OAAO7I,0BAAc;wBACrB8I,MAAM;+BAAItZ,IAAIS,YAAY,CAAC0R,YAAY;yBAAC;oBAC1C;oBAEA,IAAI;wBACFwD,aAAa,MAAMsF,IAAAA,2DAAkC,EACnD;4BACE,MAAM4D,aAAa,AACjBnT,kDAAoB,CAACgH,GAAG,CACtB,qBAAqB;4BACrBsM,2BACA,sBAAsB;4BACtB3U,aAAahF,sBAAsB,EACnC,4CAA4C;4BAC5C4Z,uBACA/Z,wBAAwBI,aAAa,EACrC;gCACElB,SAAS6Y;gCACThE,QAAQ8F,4BAA4B9F,MAAM;4BAC5C,GAEF3D,GAAG;4BAELhN,oBAAoBuW,UAAU,CAAC,EAAE;4BACjC,MAAMC,kBAAkBD,UAAU,CAAC,EAAE;4BAErC,MAAMxZ,yBAAyBiE,QAAQ,yBACpCjE,sBAAsB;4BACzB,MAAM6Z,oBAAoBxT,kDAAoB,CAACgH,GAAG,CAChDiL,wBACAtY,sCACA,qBAACgD;gCACCC,mBAAmBwW;gCACnBvW,gBAAgBA;gCAChBrD,yBAAyBA;gCACzBsD,4BAA4BA;gCAC5BhL,OAAOwC,IAAIxC,KAAK;gCAElB;gCACEyb,QAAQyE,mBAAmBzE,MAAM;gCACjC7U,SAASkW;gCACT,mEAAmE;gCACnE,6CAA6C;gCAC7ChE,kBAAkBtU,WAAWuU,kBAAkB,GAC3C,EAAE,GACF;oCAACxC;iCAAgB;4BACvB;4BAEFmL,kBAAkBhE,KAAK,CAAC,KAAO;4BAC/B,OAAOgE;wBACT,GACA;4BACExB,mBAAmBhE,KAAK,CAACwC;4BACzB6C,4BAA4BrF,KAAK,CAACwC;wBACpC;oBAEJ,EAAE,OAAOhY,KAAK;wBACZ,IACE6a,4BAA4B9F,MAAM,CAACwB,OAAO,IAC1CiD,mBAAmBzE,MAAM,CAACwB,OAAO,EACjC;wBACA,iFAAiF;wBACjF,eAAe;wBACjB,OAAO;4BACL,kFAAkF;4BAClF,MAAMvW;wBACR;oBACF;gBACF;gBAEAsX,IAAAA,0CAAwB,EACtBja,UAAU4D,KAAK,EACfiV,mBACAvB,uBACAsB;gBAGF,IAAIoD,cAAc;oBAChB,MAAM4B,gBAAgBC,IAAAA,uCAAqB,EAACjF;oBAC5C,IAAIgF,eAAe;wBACjB,MAAM,IAAIE,sCAAkB,CAC1B,CAAC,OAAO,EAAE9d,UAAU4D,KAAK,CAAC,oDAAoD,EAAEga,cAAc,6EAA6E,CAAC;oBAEhL,OAAO;wBACL,MAAM,IAAIE,sCAAkB,CAC1B,CAAC,OAAO,EAAE9d,UAAU4D,KAAK,CAAC,iJAAiJ,CAAC;oBAEhL;gBACF,OAAO,IAAIoX,sBAAsB;oBAC/B,MAAM4C,gBAAgBC,IAAAA,uCAAqB,EAACvG;oBAC5C,IAAIsG,eAAe;wBACjB,MAAM,IAAIE,sCAAkB,CAC1B,CAAC,OAAO,EAAE9d,UAAU4D,KAAK,CAAC,oDAAoD,EAAEga,cAAc,6EAA6E,CAAC;oBAEhL,OAAO;wBACL,MAAM,IAAIE,sCAAkB,CAC1B,CAAC,OAAO,EAAE9d,UAAU4D,KAAK,CAAC,iJAAiJ,CAAC;oBAEhL;gBACF;gBAEA,MAAMwP,oBACJ,MAAM2K,IAAAA,mEAA0C,EAAChX;gBAEnD0E,SAASrM,UAAU,GAAG,MAAMid,IAAAA,oCAAc,EAACjJ,kBAAkByI,QAAQ;gBAErE,MAAMxH,wBAAwBC,IAAAA,oDAAyB,EAAC;oBACtD1C;oBACAN;oBACAiD,sBAAsBtB;oBACtBuB,UAAU/T,WAAW+T,QAAQ;oBAC7BhD,iBAAiBA;gBACnB;gBACA,MAAM2D,qBAAqB1U,WAAWsC,GAAG;gBACzC,OAAO;oBACLuK,iBAAiBoF;oBACjB/E,WAAWsF;oBACXnD,QAAQ,MAAMsF,IAAAA,wCAAkB,EAAChB,YAAa;wBAC5CM,mBAAmBZ,IAAAA,kDAA+B,EAChDV,kBAAkB+J,eAAe,IACjC1e,IAAIxC,KAAK,EACTgU;wBAEFlO,oBAAoB;wBACpBsS;wBACAgB,0BAA0B;wBAC1BF;oBACF;oBACAnI,eAAeyP,IAAAA,sCAAoB,EACjCnF,uBACAsB;oBAEF,0CAA0C;oBAC1C7J,qBAAqB0M,0BAA0BzM,UAAU;oBACzD0N,iBAAiBjB,0BAA0B5D,MAAM;oBACjDlJ,gBAAgB8M,0BAA0B3D,KAAK;oBAC/CvJ,eAAekN,0BAA0B1D,IAAI;gBAC/C;YACF;QACF,OAAO,IAAItX,WAAW2C,YAAY,CAACxH,iBAAiB,EAAE;YACpD,uEAAuE;YACvE,IAAI0O,kBAAkBiN,IAAAA,4CAA0B,EAC9C9W,WAAWyM,sBAAsB;YAEnC,MAAM8Q,4BAA6C9T,iBAAiB;gBAClEtM,MAAM;gBACNuB,OAAO;gBACPyR,cAAcnS,IAAIS,YAAY,CAAC0R,YAAY;gBAC3CtG;gBACA0E,YAAYC,0BAAc;gBAC1B4I,QAAQ5I,0BAAc;gBACtB6I,OAAO7I,0BAAc;gBACrB8I,MAAM;uBAAItZ,IAAIS,YAAY,CAAC0R,YAAY;iBAAC;YAC1C;YACA,MAAM5N,aAAa,MAAMmH,kDAAoB,CAACgH,GAAG,CAC/C6M,2BACApZ,eACAtF,MACAb,KACAG,IAAIC,UAAU,KAAK;YAErB,MAAMuU,oBAAqBqH,6BACzB,MAAMsD,IAAAA,mEAA0C,EAC9C5T,kDAAoB,CAACgH,GAAG,CACtB6M,2BACAlV,aAAahF,sBAAsB,EACnC,4CAA4C;YAC5Cd,YACAW,wBAAwBI,aAAa,EACrC;gBACElB,SAASgQ;YACX;YAIN,MAAMkJ,oBAAoC;gBACxCne,MAAM;gBACNuB,OAAO;gBACPyR,cAAcnS,IAAIS,YAAY,CAAC0R,YAAY;gBAC3CtG;gBACA0E,YAAYC,0BAAc;gBAC1B4I,QAAQ5I,0BAAc;gBACtB6I,OAAO7I,0BAAc;gBACrB8I,MAAM;uBAAItZ,IAAIS,YAAY,CAAC0R,YAAY;iBAAC;YAC1C;YACA,MAAM+H,YAAY5Q,QAAQ,yBACvB4Q,SAAS;YACZ,MAAM,EAAEsD,OAAO,EAAE7V,SAAS,EAAE,GAAG,MAAM+D,kDAAoB,CAACgH,GAAG,CAC3D4K,mBACApD,yBACA,qBAAC7R;gBACCC,mBAAmBqM,kBAAkB8I,iBAAiB;gBACtDlV,gBAAgBA;gBAChBrD,yBAAyBA;gBACzBsD,4BAA4BA;gBAC5BhL,OAAOwC,IAAIxC,KAAK;gBAElB;gBACE4G,SAASqQ;gBACT0B,WAAW,CAAC7Z;oBACVA,QAAQsL,OAAO,CAAC,CAAClJ,OAAOF;wBACtB2R,UAAU3R,KAAKE;oBACjB;gBACF;gBACA0X,kBAAkBpU,WAAWqU,qBAAqB;gBAClD,mEAAmE;gBACnE,6CAA6C;gBAC7CC,kBAAkBtU,WAAWuU,kBAAkB,GAC3C,EAAE,GACF;oBAACxC;iBAAgB;YACvB;YAEF,MAAM6B,wBAAwBC,IAAAA,oDAAyB,EAAC;gBACtD1C;gBACAN;gBACAiD,sBAAsBtB;gBACtBuB,UAAU/T,WAAW+T,QAAQ;gBAC7BhD,iBAAiBA;YACnB;YAEA,+FAA+F;YAC/F,8FAA8F;YAC9F,6EAA6E;YAC7E,MAAMpS,aAAa,MAAMid,IAAAA,oCAAc,EAACjJ,kBAAkByI,QAAQ;YAElE,IAAIrB,+BAA+Bxa,YAAY;gBAC7CyL,SAASrM,UAAU,GAAGA;YACxB;YAEA;;;;;;;;;;;;;OAaC,GACD,oEAAoE;YACpE,IAAI6N,IAAAA,qCAAmB,EAAC3C,gBAAgBC,eAAe,GAAG;gBACxD,IAAInE,aAAa,MAAM;oBACrB,qBAAqB;oBACrBqF,SAASrF,SAAS,GAAGkW,IAAAA,4CAA4B,EAC/ClW,WACAxJ;gBAEJ,OAAO;oBACL,qBAAqB;oBACrB6O,SAASrF,SAAS,GAAGmW,IAAAA,4CAA4B;gBACnD;gBACA,mGAAmG;gBACnG,8GAA8G;gBAC9G,uHAAuH;gBACvH,sDAAsD;gBACtDnJ,kBAAkBuB,OAAO;gBACzB,OAAO;oBACLrH,iBAAiBoF;oBACjB/E,WAAWsF;oBACXnD,QAAQ,MAAM0M,IAAAA,8CAAwB,EAACP,SAAS;wBAC9C5H;oBACF;oBACArH,eAAe1C,gBAAgBC,eAAe;oBAC9C,0CAA0C;oBAC1CwE,qBAAqBiP,0BAA0BhP,UAAU;oBACzD0N,iBAAiBsB,0BAA0BnG,MAAM;oBACjDlJ,gBAAgBqP,0BAA0BlG,KAAK;oBAC/CvJ,eAAeyP,0BAA0BjG,IAAI;gBAC/C;YACF,OAAO,IAAInb,uBAAuBA,oBAAoB2Q,IAAI,GAAG,GAAG;gBAC9D,+BAA+B;gBAC/B9B,SAASrF,SAAS,GAAGmW,IAAAA,4CAA4B;gBAEjD,OAAO;oBACLjP,iBAAiBoF;oBACjB/E,WAAWsF;oBACXnD,QAAQ,MAAM0M,IAAAA,8CAAwB,EAACP,SAAS;wBAC9C5H;oBACF;oBACArH,eAAe1C,gBAAgBC,eAAe;oBAC9C,0CAA0C;oBAC1CwE,qBAAqBiP,0BAA0BhP,UAAU;oBACzD0N,iBAAiBsB,0BAA0BnG,MAAM;oBACjDlJ,gBAAgBqP,0BAA0BlG,KAAK;oBAC/CvJ,eAAeyP,0BAA0BjG,IAAI;gBAC/C;YACF,OAAO;gBACL,cAAc;gBACd,8GAA8G;gBAC9G,IAAI/X,UAAU0K,YAAY,EAAE;oBAC1B,MAAM,IAAIiS,8CAAqB,CAC7B;gBAEJ;gBAEA,IAAIvI,aAAa6H;gBACjB,IAAI7V,aAAa,MAAM;oBACrB,+FAA+F;oBAC/F,qGAAqG;oBACrG,MAAM+N,SAASpM,QAAQ,yBACpBoM,MAAM;oBAET,qEAAqE;oBACrE,4EAA4E;oBAC5E,MAAMyI,gBAAgB,IAAI1C;oBAE1B,MAAM2C,eAAe,MAAM1I,qBACzB,qBAACrN;wBACCC,mBAAmB6V;wBACnB5V,gBAAgB,KAAO;wBACvBrD,yBAAyBA;wBACzBsD,4BAA4BA;wBAC5BhL,OAAOwC,IAAIxC,KAAK;wBAElB6gB,KAAKC,KAAK,CAACD,KAAKE,SAAS,CAAC5W,aAC1B;wBACEsR,QAAQuF,IAAAA,4CAA0B,EAAC;wBACnCpa,SAASqQ;wBACTjX,OAAOwC,IAAIxC,KAAK;oBAClB;oBAGF,wGAAwG;oBACxGmY,aAAaJ,IAAAA,kCAAY,EAACiI,SAASY;gBACrC;gBAEA,OAAO;oBACLvP,iBAAiBoF;oBACjB/E,WAAWsF;oBACXnD,QAAQ,MAAMoN,IAAAA,6CAAuB,EAAC9I,YAAY;wBAChDM,mBAAmBZ,IAAAA,kDAA+B,EAChDV,kBAAkB+J,eAAe,IACjC1e,IAAIxC,KAAK,EACTgU;wBAEFoE;oBACF;oBACArH,eAAe1C,gBAAgBC,eAAe;oBAC9C,0CAA0C;oBAC1CwE,qBAAqBiP,0BAA0BhP,UAAU;oBACzD0N,iBAAiBsB,0BAA0BnG,MAAM;oBACjDlJ,gBAAgBqP,0BAA0BlG,KAAK;oBAC/CvJ,eAAeyP,0BAA0BjG,IAAI;gBAC/C;YACF;QACF,OAAO;YACL,MAAMkG,uBAAwC/T,iBAAiB;gBAC7DtM,MAAM;gBACNuB,OAAO;gBACPyR,cAAcnS,IAAIS,YAAY,CAAC0R,YAAY;gBAC3C5B,YAAYC,0BAAc;gBAC1B4I,QAAQ5I,0BAAc;gBACtB6I,OAAO7I,0BAAc;gBACrB8I,MAAM;uBAAItZ,IAAIS,YAAY,CAAC0R,YAAY;iBAAC;YAC1C;YACA,uFAAuF;YACvF,yEAAyE;YACzE,MAAM5N,aAAa,MAAMmH,kDAAoB,CAACgH,GAAG,CAC/C8M,sBACArZ,eACAtF,MACAb,KACAG,IAAIC,UAAU,KAAK;YAErB,MAAMuU,oBAAqBqH,6BACzB,MAAMsD,IAAAA,mEAA0C,EAC9C5T,kDAAoB,CAACgH,GAAG,CACtB8M,sBACAnV,aAAahF,sBAAsB,EACnCd,YACAW,wBAAwBI,aAAa,EACrC;gBACElB,SAASgQ;YACX;YAIN,MAAM/O,yBAAyBiE,QAAQ,yBACpCjE,sBAAsB;YAEzB,MAAMsQ,aAAa,MAAMjK,kDAAoB,CAACgH,GAAG,CAC/C8M,sBACAna,sCACA,qBAACgD;gBACCC,mBAAmBqM,kBAAkB8I,iBAAiB;gBACtDlV,gBAAgBA;gBAChBrD,yBAAyBA;gBACzBsD,4BAA4BA;gBAC5BhL,OAAOwC,IAAIxC,KAAK;gBAElB;gBACE4G,SAASqQ;gBACTjX,OAAOwC,IAAIxC,KAAK;gBAChB,mEAAmE;gBACnE,6CAA6C;gBAC7C8Y,kBAAkBtU,WAAWuU,kBAAkB,GAC3C,EAAE,GACF;oBAACxC;iBAAgB;YACvB;YAGF,IAAIgI,+BAA+Bxa,YAAY;gBAC7CyL,SAASrM,UAAU,GAAG,MAAMid,IAAAA,oCAAc,EAACjJ,kBAAkByI,QAAQ;YACvE;YAEA,MAAMxH,wBAAwBC,IAAAA,oDAAyB,EAAC;gBACtD1C;gBACAN;gBACAiD,sBAAsBtB;gBACtBuB,UAAU/T,WAAW+T,QAAQ;gBAC7BhD,iBAAiBA;YACnB;YACA,OAAO;gBACLlE,iBAAiBoF;gBACjB/E,WAAWsF;gBACXnD,QAAQ,MAAMsF,IAAAA,wCAAkB,EAAChB,YAAY;oBAC3CM,mBAAmBZ,IAAAA,kDAA+B,EAChDV,kBAAkB+J,eAAe,IACjC1e,IAAIxC,KAAK,EACTgU;oBAEFlO,oBAAoB;oBACpBsS;oBACAgB,0BAA0B;gBAC5B;gBACA,0CAA0C;gBAC1CtG,qBAAqBkP,qBAAqBjP,UAAU;gBACpD0N,iBAAiBuB,qBAAqBpG,MAAM;gBAC5ClJ,gBAAgBsP,qBAAqBnG,KAAK;gBAC1CvJ,eAAe0P,qBAAqBlG,IAAI;YAC1C;QACF;IACF,EAAE,OAAOpV,KAAK;QACZ,IACE2S,IAAAA,gDAAuB,EAAC3S,QACvB,OAAOA,QAAQ,YACdA,QAAQ,QACR,aAAaA,OACb,OAAOA,IAAI4S,OAAO,KAAK,YACvB5S,IAAI4S,OAAO,CAAC9P,QAAQ,CAClB,iEAEJ;YACA,sDAAsD;YACtD,MAAM9C;QACR;QAEA,uEAAuE;QACvE,mEAAmE;QACnE,IAAI0Y,IAAAA,wCAAoB,EAAC1Y,MAAM;YAC7B,MAAMA;QACR;QAEA,wEAAwE;QACxE,uBAAuB;QACvB,MAAM6S,qBAAqBC,IAAAA,iCAAmB,EAAC9S;QAC/C,IAAI6S,oBAAoB;YACtB,MAAMnG,QAAQqG,IAAAA,8CAA2B,EAAC/S;YAC1CgT,IAAAA,UAAK,EACH,CAAC,EAAEhT,IAAIiT,MAAM,CAAC,mDAAmD,EAAEnX,IAAI9B,QAAQ,CAAC,kFAAkF,EAAE0S,MAAM,CAAC;YAG7K,MAAM1M;QACR;QAEA,yEAAyE;QACzE,mDAAmD;QACnD,IAAI8X,+BAA+B,MAAM;YACvC,MAAM9X;QACR;QAEA,IAAIuC;QAEJ,IAAI2Q,IAAAA,yBAAe,EAAClT,MAAM;YACxBuC,YAAY;YACZtG,IAAIC,UAAU,GAAG;QACnB,OAAO,IAAIiX,IAAAA,yBAAe,EAACnT,MAAM;YAC/BuC,YAAY;YACZtG,IAAIC,UAAU,GAAGkX,IAAAA,wCAA8B,EAACpT;YAEhD,MAAMqT,cAAcC,IAAAA,4BAAa,EAC/BC,IAAAA,iCAAuB,EAACvT,MACxBlC,WAAW+T,QAAQ;YAGrB,gEAAgE;YAChE,YAAY;YACZ,MAAMzZ,UAAU,IAAIob;YACpB,IAAIC,IAAAA,oCAAoB,EAACrb,SAAS0D,IAAIS,YAAY,CAACmX,cAAc,GAAG;gBAClEzH,UAAU,cAActR,MAAMmS,IAAI,CAAC1U,QAAQ0S,MAAM;YACnD;YAEAmB,UAAU,YAAYoH;QACxB,OAAO,IAAI,CAACR,oBAAoB;YAC9B5W,IAAIC,UAAU,GAAG;QACnB;QAEA,MAAM,CAACyX,qBAAqBC,qBAAqB,GAAG9D,IAAAA,mCAAkB,EACpEhS,WAAWoR,aAAa,EACxBpT,IAAIsH,WAAW,EACftF,WAAW6R,WAAW,EACtB7R,WAAW4R,4BAA4B,EACvCF,IAAAA,wCAAmB,EAAC1T,KAAK,QACzBA,IAAIxC,KAAK,EACT;QAGF,MAAMgiB,uBAAwC/T,iBAAiB;YAC7DtM,MAAM;YACNuB,OAAO;YACPyR,cAAcnS,IAAIS,YAAY,CAAC0R,YAAY;YAC3C5B,YAAYC,0BAAc;YAC1B4I,QAAQ5I,0BAAc;YACtB6I,OAAO7I,0BAAc;YACrB8I,MAAM;mBAAItZ,IAAIS,YAAY,CAAC0R,YAAY;aAAC;QAC1C;QACA,MAAM4F,kBAAkB,MAAMrM,kDAAoB,CAACgH,GAAG,CACpD8M,sBACA1X,oBACAjH,MACAb,KACAyG;QAGF,MAAMuR,oBAAoBtM,kDAAoB,CAACgH,GAAG,CAChD8M,sBACAnV,aAAahF,sBAAsB,EACnC0S,iBACA7S,wBAAwBI,aAAa,EACrC;YACElB,SAASgQ;QACX;QAGF,IAAI;YACF,MAAM6D,aAAa,MAAMC,IAAAA,+CAAyB,EAAC;gBACjDC,gBAAgB7O,QAAQ;gBACxB8O,uBACE,qBAACzO;oBACCrB,mBAAmB0P;oBACnBzP,gBAAgBsP;oBAChB3S,yBAAyBA;oBACzB1H,OAAOwC,IAAIxC,KAAK;;gBAGpB6a,eAAe;oBACb7a,OAAOwC,IAAIxC,KAAK;oBAChB,wCAAwC;oBACxC8Y,kBAAkB;wBAACwB;qBAAqB;oBACxCtG;gBACF;YACF;YAEA,IAAIuK,+BAA+Bxa,YAAY;gBAC7CyL,SAASrM,UAAU,GAAG,MAAMid,IAAAA,oCAAc,EACxC5B,2BAA2BoB,QAAQ;YAEvC;YAEA,MAAM1G,qBAAqB1U,WAAWsC,GAAG;YACzC,OAAO;gBACL,kEAAkE;gBAClE,8BAA8B;gBAC9BuK,iBAAiBoF;gBACjB/E,WAAWsF;gBACXnD,QAAQ,MAAMsF,IAAAA,wCAAkB,EAACsB,YAAY;oBAC3ChC,mBAAmBZ,IAAAA,kDAA+B,EAChD,+DAA+D;oBAC/D,8DAA8D;oBAC9D,SAAS;oBACT2G,2BAA2B0C,eAAe,IAC1C1e,IAAIxC,KAAK,EACTgU;oBAEFlO,oBAAoB;oBACpBsS,uBAAuBC,IAAAA,oDAAyB,EAAC;wBAC/C1C;wBACAN;wBACAiD,sBAAsB,EAAE;wBACxBC,UAAU/T,WAAW+T,QAAQ;wBAC7BhD,iBAAiBA;oBACnB;oBACA6D,0BAA0B;oBAC1BF;gBACF;gBACAnI,eAAe;gBACf+B,qBACE7E,mBAAmB,OAAOA,eAAe8E,UAAU,GAAGC,0BAAc;gBACtEyN,iBACExS,mBAAmB,OAAOA,eAAe2N,MAAM,GAAG5I,0BAAc;gBAClEN,gBACEzE,mBAAmB,OAAOA,eAAe4N,KAAK,GAAG7I,0BAAc;gBACjEV,eAAerE,mBAAmB,OAAOA,eAAe6N,IAAI,GAAG;YACjE;QACF,EAAE,OAAOhB,UAAe;YACtB,IAAI9T,QAAQC,GAAG,CAACC,QAAQ,KAAK,iBAAiB0S,IAAAA,yBAAe,EAACkB,WAAW;gBACvE,MAAMC,iBACJjP,QAAQ,uDAAuDiP,cAAc;gBAC/EA;YACF;YACA,MAAMD;QACR;IACF;AACF;AAEA,MAAMmH,gBAAuC,IAAI9c;AACjD,MAAM+c,iBAA+C,EAAE;AAEvD,SAASxU,kBAAkByU,IAAsB;IAC/CF,cAAcG,GAAG,CAACD;IAClBA,KAAKE,OAAO,CAAC;QACX,IAAIJ,cAAc9gB,GAAG,CAACghB,OAAO;YAC3BF,cAAcK,MAAM,CAACH;YACrB,IAAIF,cAAc3Q,IAAI,KAAK,GAAG;gBAC5B,uEAAuE;gBACvE,IAAK,IAAI9P,IAAI,GAAGA,IAAI0gB,eAAe3T,MAAM,EAAE/M,IAAK;oBAC9C0gB,cAAc,CAAC1gB,EAAE;gBACnB;gBACA0gB,eAAe3T,MAAM,GAAG;YAC1B;QACF;IACF;AACF;AAEO,eAAe5P,mBACpB4jB,YAAwC,EACxC7a,uBAA8D;IAE9D,IAAI8a;IACJ,IAAIxb,QAAQC,GAAG,CAACwb,SAAS,EAAE;QACzBD,2BACE,6DAA6D;QAC7D1W,QAAQ,0CAA0C0W,wBAAwB;IAC9E,OAAO;QACLA,2BACE,6DAA6D;QAC7D1W,QAAQ,wCAAwC0W,wBAAwB;IAC5E;IAEA,IAAI;QACFA,yBAAyBD,cAAc;YACrCG,wBAAwB;gBACtBC,eAAejb,wBAAwBib,aAAa;gBACpDC,WAAWlb,wBAAwBmb,gBAAgB;gBACnDnT,iBAAiB;YACnB;QACF;IACF,EAAE,OAAM;IACN,8DAA8D;IAC9D,gEAAgE;IAChE,oCAAoC;IACtC;IAEA,0EAA0E;IAC1E,2EAA2E;IAC3EhC,kBAAkB+J,IAAAA,wCAA6B;IAC/C,OAAO,IAAIxF,QAAQ,CAAC6Q;QAClBZ,eAAea,IAAI,CAACD;IACtB;AACF"}