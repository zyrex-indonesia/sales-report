"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.File = exports.Link = exports.Node = exports.SEP = void 0;
var process_1 = require("./process");
var buffer_1 = require("./internal/buffer");
var constants_1 = require("./constants");
var events_1 = require("events");
var Stats_1 = require("./Stats");
var S_IFMT = constants_1.constants.S_IFMT, S_IFDIR = constants_1.constants.S_IFDIR, S_IFREG = constants_1.constants.S_IFREG, S_IFLNK = constants_1.constants.S_IFLNK, O_APPEND = constants_1.constants.O_APPEND;
var getuid = function () { var _a, _b; return (_b = (_a = process_1.default.getuid) === null || _a === void 0 ? void 0 : _a.call(process_1.default)) !== null && _b !== void 0 ? _b : 0; };
var getgid = function () { var _a, _b; return (_b = (_a = process_1.default.getgid) === null || _a === void 0 ? void 0 : _a.call(process_1.default)) !== null && _b !== void 0 ? _b : 0; };
exports.SEP = '/';
/**
 * Node in a file system (like i-node, v-node).
 */
var Node = /** @class */ (function (_super) {
    __extends(Node, _super);
    function Node(ino, perm) {
        if (perm === void 0) { perm = 438; }
        var _this = _super.call(this) || this;
        // User ID and group ID.
        _this._uid = getuid();
        _this._gid = getgid();
        _this._atime = new Date();
        _this._mtime = new Date();
        _this._ctime = new Date();
        _this._perm = 438; // Permissions `chmod`, `fchmod`
        _this.mode = S_IFREG; // S_IFDIR, S_IFREG, etc.. (file by default?)
        // Number of hard links pointing at this Node.
        _this._nlink = 1;
        _this._perm = perm;
        _this.mode |= perm;
        _this.ino = ino;
        return _this;
    }
    Object.defineProperty(Node.prototype, "ctime", {
        get: function () {
            return this._ctime;
        },
        set: function (ctime) {
            this._ctime = ctime;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "uid", {
        get: function () {
            return this._uid;
        },
        set: function (uid) {
            this._uid = uid;
            this.ctime = new Date();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "gid", {
        get: function () {
            return this._gid;
        },
        set: function (gid) {
            this._gid = gid;
            this.ctime = new Date();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "atime", {
        get: function () {
            return this._atime;
        },
        set: function (atime) {
            this._atime = atime;
            this.ctime = new Date();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "mtime", {
        get: function () {
            return this._mtime;
        },
        set: function (mtime) {
            this._mtime = mtime;
            this.ctime = new Date();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "perm", {
        get: function () {
            return this._perm;
        },
        set: function (perm) {
            this._perm = perm;
            this.ctime = new Date();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "nlink", {
        get: function () {
            return this._nlink;
        },
        set: function (nlink) {
            this._nlink = nlink;
            this.ctime = new Date();
        },
        enumerable: false,
        configurable: true
    });
    Node.prototype.getString = function (encoding) {
        if (encoding === void 0) { encoding = '